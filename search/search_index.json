{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Engineering Playbook Un ingeniero que trabaja en un proyecto del CoE... Tiene responsabilidades para con su equipo: mentor, coach y l\u00edder. Conoce su playbook . Sigue su playbook. Corrige su playbook cuando encuentra alg\u00fan error. Si encuentran un playbook mejor, lo copia. Si alguien puede utilizar su playbook, lo comparte. Predica con el ejemplo. Modela los comportamientos que deseamos tanto interpersonal como t\u00e9cnicamente. Se esfuerza por comprender c\u00f3mo encaja su trabajo en un contexto m\u00e1s amplio y garantiza el resultado. Este es nuestro playbook. Todas las contribuciones son bienvenidas! Por favor, no dudes en enviar un pull request para participar. Por qu\u00e9 tener un playbook Para aumentar la eficiencia de los miembros del equipo y de todo el equipo en general. Para reducir el n\u00famero de errores y evitar las dificultades m\u00e1s comunes. Para esforzarse por ser mejores ingenieros y aprender de la experiencia compartida de otras personas. Checklist Siga la checklist de los fundamentos de la ingenier\u00eda ! Estructura de un sprint La estructura de un sprint es un desglose de las secciones del playbook seg\u00fan la estructura de un sprint \u00e1gil. Gu\u00eda general Mantenga alta la vara de la calidad del c\u00f3digo. Valore la calidad y la precisi\u00f3n por encima de \"hacer el trabajo\". Trabaje con diligencia en lo m\u00e1s importante. Como equipo distribuido, t\u00f3mate el tiempo necesario para compartir el contexto a trav\u00e9s de la wiki, teams y los \u00edtems del backlog. Haz que lo m\u00e1s sencillo funcione ahora. Construye menos funciones hoy, pero aseg\u00farate de que funcionan de forma incre\u00edble. Despu\u00e9s, a\u00f1ade m\u00e1s funciones ma\u00f1ana. Evita a\u00f1adir alcance a un elemento del backlog, en su lugar a\u00f1ade un nuevo elemento del backlog. Nuestro objetivo es ofrecer un valor incremental al cliente. Mant\u00e9n los detalles de los elementos del backlog actualizados para comunicar el estado de las cosas al resto de tu equipo. Informar de los problemas encontrados en el producto y proporcionar una retroalimentaci\u00f3n de ingenier\u00eda clara y repetible. Todos somos due\u00f1os de nuestro c\u00f3digo y cada uno de nosotros tiene la obligaci\u00f3n de hacer que todas las partes de la soluci\u00f3n sean excelentes. Fundamentos de ingenier\u00eda Desarrollo \u00e1gil Pruebas automatizadas Revisiones de c\u00f3digo Integraci\u00f3n y entrega continuas (CI/CD) Experiencia del desarrollador Documentaci\u00f3n Observabilidad Seguridad Control de versiones Fundamentos para \u00e1reas tecnol\u00f3gicas espec\u00edficas Fundamentos del aprendizaje autom\u00e1tico","title":"Engineering Playbook"},{"location":"#engineering-playbook","text":"Un ingeniero que trabaja en un proyecto del CoE... Tiene responsabilidades para con su equipo: mentor, coach y l\u00edder. Conoce su playbook . Sigue su playbook. Corrige su playbook cuando encuentra alg\u00fan error. Si encuentran un playbook mejor, lo copia. Si alguien puede utilizar su playbook, lo comparte. Predica con el ejemplo. Modela los comportamientos que deseamos tanto interpersonal como t\u00e9cnicamente. Se esfuerza por comprender c\u00f3mo encaja su trabajo en un contexto m\u00e1s amplio y garantiza el resultado. Este es nuestro playbook. Todas las contribuciones son bienvenidas! Por favor, no dudes en enviar un pull request para participar.","title":"Engineering Playbook"},{"location":"#por-que-tener-un-playbook","text":"Para aumentar la eficiencia de los miembros del equipo y de todo el equipo en general. Para reducir el n\u00famero de errores y evitar las dificultades m\u00e1s comunes. Para esforzarse por ser mejores ingenieros y aprender de la experiencia compartida de otras personas.","title":"Por qu\u00e9 tener un playbook"},{"location":"#checklist","text":"Siga la checklist de los fundamentos de la ingenier\u00eda !","title":"Checklist"},{"location":"#estructura-de-un-sprint","text":"La estructura de un sprint es un desglose de las secciones del playbook seg\u00fan la estructura de un sprint \u00e1gil.","title":"Estructura de un sprint"},{"location":"#guia-general","text":"Mantenga alta la vara de la calidad del c\u00f3digo. Valore la calidad y la precisi\u00f3n por encima de \"hacer el trabajo\". Trabaje con diligencia en lo m\u00e1s importante. Como equipo distribuido, t\u00f3mate el tiempo necesario para compartir el contexto a trav\u00e9s de la wiki, teams y los \u00edtems del backlog. Haz que lo m\u00e1s sencillo funcione ahora. Construye menos funciones hoy, pero aseg\u00farate de que funcionan de forma incre\u00edble. Despu\u00e9s, a\u00f1ade m\u00e1s funciones ma\u00f1ana. Evita a\u00f1adir alcance a un elemento del backlog, en su lugar a\u00f1ade un nuevo elemento del backlog. Nuestro objetivo es ofrecer un valor incremental al cliente. Mant\u00e9n los detalles de los elementos del backlog actualizados para comunicar el estado de las cosas al resto de tu equipo. Informar de los problemas encontrados en el producto y proporcionar una retroalimentaci\u00f3n de ingenier\u00eda clara y repetible. Todos somos due\u00f1os de nuestro c\u00f3digo y cada uno de nosotros tiene la obligaci\u00f3n de hacer que todas las partes de la soluci\u00f3n sean excelentes.","title":"Gu\u00eda general"},{"location":"#fundamentos-de-ingenieria","text":"Desarrollo \u00e1gil Pruebas automatizadas Revisiones de c\u00f3digo Integraci\u00f3n y entrega continuas (CI/CD) Experiencia del desarrollador Documentaci\u00f3n Observabilidad Seguridad Control de versiones","title":"Fundamentos de ingenier\u00eda"},{"location":"#fundamentos-para-areas-tecnologicas-especificas","text":"Fundamentos del aprendizaje autom\u00e1tico","title":"Fundamentos para \u00e1reas tecnol\u00f3gicas espec\u00edficas"},{"location":"eng-fundamentals-checklist/","text":"Checklist de los fundamentos de la ingenier\u00eda Esta checklist ayuda a garantizar que los proyectos cumplen con nuestros fundamentos de ingenier\u00eda. Control del c\u00f3digo fuente La rama principal est\u00e1 bloqueada. Las fusiones se realizan a trav\u00e9s de PRs. Los PRs hacen referencia a elementos de trabajo relacionados. El historial de commit es consistente y los mensajes de commit son informativos. Convenciones de nomenclatura de ramas consistentes. Documentaci\u00f3n clara de la estructura del repositorio. Los secretos no forman parte del historial de confirmaciones ni se hacen p\u00fablicos. M\u00e1s detalles sobre el control de c\u00f3digo fuente Seguimiento de elementos de trabajo Todos los elementos se registran en Azure DevOps (o similar). El tablero est\u00e1 organizado (swim lanes, feature tags, technology tags). M\u00e1s detalles sobre la gesti\u00f3n del backlog Testing Las pruebas unitarias cubren la mayor\u00eda de los componentes (>90% si es posible). Las pruebas de integraci\u00f3n se ejecutan para probar la soluci\u00f3n e2e. M\u00e1s detalles sobre las pruebas automatizadas CI/CD El proyecto ejecuta CI con compilaci\u00f3n y pruebas automatizadas en cada PR. El proyecto utiliza CD para gestionar los despliegues en un entorno de r\u00e9plica antes de fusionar los PR. La rama principal siempre est\u00e1 disponible. M\u00e1s detalles sobre la integraci\u00f3n y entrega continua Seguridad El acceso s\u00f3lo se concede en funci\u00f3n de las necesidades Los secretos se almacenan en lugares seguros y no se registran en el c\u00f3digo Los datos se cifran en tr\u00e1nsito y en reposo y las contrase\u00f1as se codifican. \u00bfEst\u00e1 el sistema dividido en segmentos l\u00f3gicos con separaci\u00f3n de intereses? Esto ayuda a limitar las vulnerabilidades de seguridad. M\u00e1s detalles sobre la seguridad Observabilidad Los eventos funcionales y de negocio significativos se rastrean y se recogen las m\u00e9tricas relacionadas. Se registran los fallos y errores de la aplicaci\u00f3n. Se supervisa la salud del sistema. Los datos de observabilidad del lado del cliente y del servidor pueden diferenciarse. La configuraci\u00f3n del log puede modificarse sin necesidad de cambiar el c\u00f3digo. El contexto del tracing entrante se propaga para permitir la depuraci\u00f3n de problemas de producci\u00f3n. M\u00e1s detalles sobre la observabilidad Agilidad/Scrum El l\u00edder del proceso (fijo/rotativo) dirige el standup diario El proceso \u00e1gil est\u00e1 claramente definido dentro del equipo. El Dev Lead (+ PO/Otros) es responsable de la gesti\u00f3n y el refinamiento del backlog. Se establece un acuerdo de trabajo entre los miembros del equipo y el cliente. M\u00e1s detalles sobre el desarrollo \u00e1gil Revisiones del c\u00f3digo Existe un acuerdo claro en el equipo sobre la funci\u00f3n de las revisiones de c\u00f3digo. El equipo tiene una checklist de la revisi\u00f3n del c\u00f3digo o un proceso establecido. Un n\u00famero m\u00ednimo de revisores (normalmente 2) para una fusi\u00f3n de PR se hace cumplir por pol\u00edtica. Se establecen linters/analizadores de c\u00f3digo, pruebas unitarias y compilaciones exitosas para las fusiones de PR. Hay un proceso para forzar una revisi\u00f3n r\u00e1pida. M\u00e1s detalles sobre las revisiones de c\u00f3digo Retrospectivas Las retrospectivas se realizan al final de cada sprint. El equipo identifica de 1 a 3 experimentos propuestos para probar cada sprint para mejorar el proceso. Los experimentos tienen propietarios y se a\u00f1aden al backlog del proyecto. El equipo lleva a cabo una retrospectiva m\u00e1s larga para los hitos y la finalizaci\u00f3n del proyecto. M\u00e1s detalles sobre las retrospectivas Experiencia del desarrollador (DevEx) Los desarrolladores del equipo pueden Construir/Compilar el c\u00f3digo fuente para verificar que no tiene errores de sintaxis y que se compila. Ejecutar todas las pruebas automatizadas. Iniciar el lanzamiento de extremo a extremo para simular la ejecuci\u00f3n en un entorno desplegado. Adjuntar un depurador a la soluci\u00f3n iniciada o a las pruebas automatizadas en ejecuci\u00f3n, establecer puntos de interrupci\u00f3n, recorrer el c\u00f3digo e inspeccionar las variables. Instalar autom\u00e1ticamente las dependencias en su IDE. Utilizar los valores de configuraci\u00f3n locales de dev. M\u00e1s detalles sobre la experiencia del desarrollador","title":"Checklist de los fundamentos de la ingenier\u00eda"},{"location":"eng-fundamentals-checklist/#checklist-de-los-fundamentos-de-la-ingenieria","text":"Esta checklist ayuda a garantizar que los proyectos cumplen con nuestros fundamentos de ingenier\u00eda.","title":"Checklist de los fundamentos de la ingenier\u00eda"},{"location":"eng-fundamentals-checklist/#control-del-codigo-fuente","text":"La rama principal est\u00e1 bloqueada. Las fusiones se realizan a trav\u00e9s de PRs. Los PRs hacen referencia a elementos de trabajo relacionados. El historial de commit es consistente y los mensajes de commit son informativos. Convenciones de nomenclatura de ramas consistentes. Documentaci\u00f3n clara de la estructura del repositorio. Los secretos no forman parte del historial de confirmaciones ni se hacen p\u00fablicos. M\u00e1s detalles sobre el control de c\u00f3digo fuente","title":"Control del c\u00f3digo fuente"},{"location":"eng-fundamentals-checklist/#seguimiento-de-elementos-de-trabajo","text":"Todos los elementos se registran en Azure DevOps (o similar). El tablero est\u00e1 organizado (swim lanes, feature tags, technology tags). M\u00e1s detalles sobre la gesti\u00f3n del backlog","title":"Seguimiento de elementos de trabajo"},{"location":"eng-fundamentals-checklist/#testing","text":"Las pruebas unitarias cubren la mayor\u00eda de los componentes (>90% si es posible). Las pruebas de integraci\u00f3n se ejecutan para probar la soluci\u00f3n e2e. M\u00e1s detalles sobre las pruebas automatizadas","title":"Testing"},{"location":"eng-fundamentals-checklist/#cicd","text":"El proyecto ejecuta CI con compilaci\u00f3n y pruebas automatizadas en cada PR. El proyecto utiliza CD para gestionar los despliegues en un entorno de r\u00e9plica antes de fusionar los PR. La rama principal siempre est\u00e1 disponible. M\u00e1s detalles sobre la integraci\u00f3n y entrega continua","title":"CI/CD"},{"location":"eng-fundamentals-checklist/#seguridad","text":"El acceso s\u00f3lo se concede en funci\u00f3n de las necesidades Los secretos se almacenan en lugares seguros y no se registran en el c\u00f3digo Los datos se cifran en tr\u00e1nsito y en reposo y las contrase\u00f1as se codifican. \u00bfEst\u00e1 el sistema dividido en segmentos l\u00f3gicos con separaci\u00f3n de intereses? Esto ayuda a limitar las vulnerabilidades de seguridad. M\u00e1s detalles sobre la seguridad","title":"Seguridad"},{"location":"eng-fundamentals-checklist/#observabilidad","text":"Los eventos funcionales y de negocio significativos se rastrean y se recogen las m\u00e9tricas relacionadas. Se registran los fallos y errores de la aplicaci\u00f3n. Se supervisa la salud del sistema. Los datos de observabilidad del lado del cliente y del servidor pueden diferenciarse. La configuraci\u00f3n del log puede modificarse sin necesidad de cambiar el c\u00f3digo. El contexto del tracing entrante se propaga para permitir la depuraci\u00f3n de problemas de producci\u00f3n. M\u00e1s detalles sobre la observabilidad","title":"Observabilidad"},{"location":"eng-fundamentals-checklist/#agilidadscrum","text":"El l\u00edder del proceso (fijo/rotativo) dirige el standup diario El proceso \u00e1gil est\u00e1 claramente definido dentro del equipo. El Dev Lead (+ PO/Otros) es responsable de la gesti\u00f3n y el refinamiento del backlog. Se establece un acuerdo de trabajo entre los miembros del equipo y el cliente. M\u00e1s detalles sobre el desarrollo \u00e1gil","title":"Agilidad/Scrum"},{"location":"eng-fundamentals-checklist/#revisiones-del-codigo","text":"Existe un acuerdo claro en el equipo sobre la funci\u00f3n de las revisiones de c\u00f3digo. El equipo tiene una checklist de la revisi\u00f3n del c\u00f3digo o un proceso establecido. Un n\u00famero m\u00ednimo de revisores (normalmente 2) para una fusi\u00f3n de PR se hace cumplir por pol\u00edtica. Se establecen linters/analizadores de c\u00f3digo, pruebas unitarias y compilaciones exitosas para las fusiones de PR. Hay un proceso para forzar una revisi\u00f3n r\u00e1pida. M\u00e1s detalles sobre las revisiones de c\u00f3digo","title":"Revisiones del c\u00f3digo"},{"location":"eng-fundamentals-checklist/#retrospectivas","text":"Las retrospectivas se realizan al final de cada sprint. El equipo identifica de 1 a 3 experimentos propuestos para probar cada sprint para mejorar el proceso. Los experimentos tienen propietarios y se a\u00f1aden al backlog del proyecto. El equipo lleva a cabo una retrospectiva m\u00e1s larga para los hitos y la finalizaci\u00f3n del proyecto. M\u00e1s detalles sobre las retrospectivas","title":"Retrospectivas"},{"location":"eng-fundamentals-checklist/#experiencia-del-desarrollador-devex","text":"Los desarrolladores del equipo pueden Construir/Compilar el c\u00f3digo fuente para verificar que no tiene errores de sintaxis y que se compila. Ejecutar todas las pruebas automatizadas. Iniciar el lanzamiento de extremo a extremo para simular la ejecuci\u00f3n en un entorno desplegado. Adjuntar un depurador a la soluci\u00f3n iniciada o a las pruebas automatizadas en ejecuci\u00f3n, establecer puntos de interrupci\u00f3n, recorrer el c\u00f3digo e inspeccionar las variables. Instalar autom\u00e1ticamente las dependencias en su IDE. Utilizar los valores de configuraci\u00f3n locales de dev. M\u00e1s detalles sobre la experiencia del desarrollador","title":"Experiencia del desarrollador (DevEx)"},{"location":"sprint-structure/","text":"Estructura de un Sprint El prop\u00f3sito de este documento es: Organizar el contenido en el playbook para una r\u00e1pida referencia y descubrimiento. Proporcionar el contenido en una estructura l\u00f3gica que refleje el proceso de ingenier\u00eda. Una jerarqu\u00eda extensible que permita a los equipos compartir conocimientos profundos sobre el tema. La primera semana de un proyecto Antes de comenzar el proyecto Discutir y empezar a redactar los Acuerdos de Equipo. Actualice estos documentos con cualquier decisi\u00f3n de proceso tomada a lo largo del proyecto. Acuerdo de trabajo. Definici\u00f3n de Listo. Definici\u00f3n de Hecho. Estimaci\u00f3n. Establecer el/los repositorio/s. Decidir la estructura del repositorio. A\u00f1adir README.md, .gitignore, etc. Construir un Backlog de Producto. Configurar un proyecto en la herramienta de gesti\u00f3n de proyectos elegida (Azure DevOps). Invertir en buenas historias de usuario y criterios de aceptaci\u00f3n. Gu\u00eda sobre los requisitos no funcionales. D\u00eda 1 Planificar el primer sprint. Acordar el objetivo del sprint y c\u00f3mo medir el progreso del mismo. Determinar la capacidad del equipo. Asignar historias de usuario al sprint y dividir las historias de usuario en tareas. Establecer los l\u00edmites del trabajo en curso (WIP). Decidir los frameworks de test y discutir las estrategias de testeo. Discutir el prop\u00f3sito y los objetivos de los tests y c\u00f3mo medir la cobertura de los mismos. Acordar c\u00f3mo separar los tests unitarios de los de integraci\u00f3n, carga y humo. Dise\u00f1ar los primeros casos de prueba. Decidir la denominaci\u00f3n de las ramas. Discutir las necesidades de seguridad y verificar que los secretos se mantienen fuera del control de origen. D\u00eda 2 Configurar el control de c\u00f3digo fuente. Acordar las mejores pr\u00e1cticas para los commits. Configurar la integraci\u00f3n continua b\u00e1sica con linters y pruebas automatizadas. Establecer reuniones para los Stand-ups diarios. Discutir el prop\u00f3sito, los objetivos, los participantes y la gu\u00eda de facilitaci\u00f3n. Discutir el calendario y c\u00f3mo llevar a cabo una reuni\u00f3n eficaz. Si el proyecto tiene subequipos, establecer un Scrum de Scrums. D\u00eda 3 Acordar el estilo de c\u00f3digo y c\u00f3mo asignar los Pull Requests. Establecer la validaci\u00f3n de la compilaci\u00f3n para los Pull Requests (2 revisores, linters, pruebas automatizadas) y acordar la definici\u00f3n de Hecho. Acordar una estrategia de fusi\u00f3n de c\u00f3digo. Acordar frameworks y estrategias de logging y observabilidad. D\u00eda 4 Configurar el despliegue continuo. Determinar qu\u00e9 entornos son apropiados para esta soluci\u00f3n. Para cada entorno, discutir el prop\u00f3sito, cu\u00e1ndo debe activarse el despliegue, los aprobadores de predespliegue, la cancelaci\u00f3n del despliegue. Decidir una estrategia de versiones. D\u00eda 5 Realizaci\u00f3n de una Demo del Sprint. Realizar una retrospectiva. Determinar los participantes necesarios, la forma de captar las aportaciones (herramientas) y los resultados. Establecer un calendario y discutir la facilitaci\u00f3n, la estructura de la reuni\u00f3n, etc. Refinar el Backlog. Determinar los participantes necesarios. Actualizar la definici\u00f3n de \"listo\". Actualizar las estimaciones y el documento de estimaci\u00f3n.","title":"Estructura de un Sprint"},{"location":"sprint-structure/#estructura-de-un-sprint","text":"El prop\u00f3sito de este documento es: Organizar el contenido en el playbook para una r\u00e1pida referencia y descubrimiento. Proporcionar el contenido en una estructura l\u00f3gica que refleje el proceso de ingenier\u00eda. Una jerarqu\u00eda extensible que permita a los equipos compartir conocimientos profundos sobre el tema.","title":"Estructura de un Sprint"},{"location":"sprint-structure/#la-primera-semana-de-un-proyecto","text":"","title":"La primera semana de un proyecto"},{"location":"sprint-structure/#antes-de-comenzar-el-proyecto","text":"Discutir y empezar a redactar los Acuerdos de Equipo. Actualice estos documentos con cualquier decisi\u00f3n de proceso tomada a lo largo del proyecto. Acuerdo de trabajo. Definici\u00f3n de Listo. Definici\u00f3n de Hecho. Estimaci\u00f3n. Establecer el/los repositorio/s. Decidir la estructura del repositorio. A\u00f1adir README.md, .gitignore, etc. Construir un Backlog de Producto. Configurar un proyecto en la herramienta de gesti\u00f3n de proyectos elegida (Azure DevOps). Invertir en buenas historias de usuario y criterios de aceptaci\u00f3n. Gu\u00eda sobre los requisitos no funcionales.","title":"Antes de comenzar el proyecto"},{"location":"sprint-structure/#dia-1","text":"Planificar el primer sprint. Acordar el objetivo del sprint y c\u00f3mo medir el progreso del mismo. Determinar la capacidad del equipo. Asignar historias de usuario al sprint y dividir las historias de usuario en tareas. Establecer los l\u00edmites del trabajo en curso (WIP). Decidir los frameworks de test y discutir las estrategias de testeo. Discutir el prop\u00f3sito y los objetivos de los tests y c\u00f3mo medir la cobertura de los mismos. Acordar c\u00f3mo separar los tests unitarios de los de integraci\u00f3n, carga y humo. Dise\u00f1ar los primeros casos de prueba. Decidir la denominaci\u00f3n de las ramas. Discutir las necesidades de seguridad y verificar que los secretos se mantienen fuera del control de origen.","title":"D\u00eda 1"},{"location":"sprint-structure/#dia-2","text":"Configurar el control de c\u00f3digo fuente. Acordar las mejores pr\u00e1cticas para los commits. Configurar la integraci\u00f3n continua b\u00e1sica con linters y pruebas automatizadas. Establecer reuniones para los Stand-ups diarios. Discutir el prop\u00f3sito, los objetivos, los participantes y la gu\u00eda de facilitaci\u00f3n. Discutir el calendario y c\u00f3mo llevar a cabo una reuni\u00f3n eficaz. Si el proyecto tiene subequipos, establecer un Scrum de Scrums.","title":"D\u00eda 2"},{"location":"sprint-structure/#dia-3","text":"Acordar el estilo de c\u00f3digo y c\u00f3mo asignar los Pull Requests. Establecer la validaci\u00f3n de la compilaci\u00f3n para los Pull Requests (2 revisores, linters, pruebas automatizadas) y acordar la definici\u00f3n de Hecho. Acordar una estrategia de fusi\u00f3n de c\u00f3digo. Acordar frameworks y estrategias de logging y observabilidad.","title":"D\u00eda 3"},{"location":"sprint-structure/#dia-4","text":"Configurar el despliegue continuo. Determinar qu\u00e9 entornos son apropiados para esta soluci\u00f3n. Para cada entorno, discutir el prop\u00f3sito, cu\u00e1ndo debe activarse el despliegue, los aprobadores de predespliegue, la cancelaci\u00f3n del despliegue. Decidir una estrategia de versiones.","title":"D\u00eda 4"},{"location":"sprint-structure/#dia-5","text":"Realizaci\u00f3n de una Demo del Sprint. Realizar una retrospectiva. Determinar los participantes necesarios, la forma de captar las aportaciones (herramientas) y los resultados. Establecer un calendario y discutir la facilitaci\u00f3n, la estructura de la reuni\u00f3n, etc. Refinar el Backlog. Determinar los participantes necesarios. Actualizar la definici\u00f3n de \"listo\". Actualizar las estimaciones y el documento de estimaci\u00f3n.","title":"D\u00eda 5"},{"location":"ci_cd/","text":"Integraci\u00f3n y entrega continuas La integraci\u00f3n continua es la pr\u00e1ctica de ingenier\u00eda que consiste en comitear frecuentemente el c\u00f3digo en un repositorio compartido, idealmente varias veces al d\u00eda, y realizar una compilaci\u00f3n automatizada sobre \u00e9l. Estos cambios se compilan con otros cambios simult\u00e1neos en el sistema, lo que permite la detecci\u00f3n temprana de problemas de integraci\u00f3n entre varios desarrolladores que trabajan en un proyecto. Las interrupciones de la compilaci\u00f3n debidas a fallos de integraci\u00f3n se tratan como el problema de mayor prioridad para todos los desarrolladores de un equipo y, por lo general, el trabajo se detiene hasta que se solucionan. Junto con un enfoque de pruebas automatizadas, la integraci\u00f3n continua tambi\u00e9n nos permite probar la compilaci\u00f3n integrada, de modo que podamos verificar no s\u00f3lo que la base de c\u00f3digo sigue compilandose correctamente, sino que tambi\u00e9n sigue siendo funcionalmente correcta. Esta es tambi\u00e9n una de las mejores pr\u00e1cticas para construir sistemas de software robustos y flexibles. La entrega continua lleva el concepto de integraci\u00f3n continua m\u00e1s all\u00e1 para probar tambi\u00e9n los despliegues de la base de c\u00f3digo integrada en una r\u00e9plica del entorno en el que se desplegar\u00e1 finalmente. Esto nos permite conocer con antelaci\u00f3n cualquier problema imprevisto que surja de nuestros cambios con la mayor rapidez posible y tambi\u00e9n conocer las brechas en nuestra cobertura de pruebas. El objetivo de todo esto es asegurar que la rama principal sea siempre implementable, lo que significa que podr\u00edamos, si lo necesit\u00e1ramos, tomar una compilaci\u00f3n de la rama principal e implementarla en producci\u00f3n. Para reforzar estos conceptos puedes leer sobre la Integraci\u00f3n Continua y la Entrega Continua . Para una comprensi\u00f3n mucho m\u00e1s profunda de todos estos conceptos, los libros Continuous Integration y Continuous Delivery proporcionan una base completa. Herramientas Azure Pipelines Jenkins TravisCI CircleCI","title":"Integraci\u00f3n y entrega continuas"},{"location":"ci_cd/#integracion-y-entrega-continuas","text":"La integraci\u00f3n continua es la pr\u00e1ctica de ingenier\u00eda que consiste en comitear frecuentemente el c\u00f3digo en un repositorio compartido, idealmente varias veces al d\u00eda, y realizar una compilaci\u00f3n automatizada sobre \u00e9l. Estos cambios se compilan con otros cambios simult\u00e1neos en el sistema, lo que permite la detecci\u00f3n temprana de problemas de integraci\u00f3n entre varios desarrolladores que trabajan en un proyecto. Las interrupciones de la compilaci\u00f3n debidas a fallos de integraci\u00f3n se tratan como el problema de mayor prioridad para todos los desarrolladores de un equipo y, por lo general, el trabajo se detiene hasta que se solucionan. Junto con un enfoque de pruebas automatizadas, la integraci\u00f3n continua tambi\u00e9n nos permite probar la compilaci\u00f3n integrada, de modo que podamos verificar no s\u00f3lo que la base de c\u00f3digo sigue compilandose correctamente, sino que tambi\u00e9n sigue siendo funcionalmente correcta. Esta es tambi\u00e9n una de las mejores pr\u00e1cticas para construir sistemas de software robustos y flexibles. La entrega continua lleva el concepto de integraci\u00f3n continua m\u00e1s all\u00e1 para probar tambi\u00e9n los despliegues de la base de c\u00f3digo integrada en una r\u00e9plica del entorno en el que se desplegar\u00e1 finalmente. Esto nos permite conocer con antelaci\u00f3n cualquier problema imprevisto que surja de nuestros cambios con la mayor rapidez posible y tambi\u00e9n conocer las brechas en nuestra cobertura de pruebas. El objetivo de todo esto es asegurar que la rama principal sea siempre implementable, lo que significa que podr\u00edamos, si lo necesit\u00e1ramos, tomar una compilaci\u00f3n de la rama principal e implementarla en producci\u00f3n. Para reforzar estos conceptos puedes leer sobre la Integraci\u00f3n Continua y la Entrega Continua . Para una comprensi\u00f3n mucho m\u00e1s profunda de todos estos conceptos, los libros Continuous Integration y Continuous Delivery proporcionan una base completa.","title":"Integraci\u00f3n y entrega continuas"},{"location":"ci_cd/#herramientas","text":"Azure Pipelines Jenkins TravisCI CircleCI","title":"Herramientas"},{"location":"ci_cd/continuous-delivery/","text":"Continuous Delivery La inspiraci\u00f3n detr\u00e1s de la entrega continua es entregar constantemente software valioso a los usuarios con mayor frecuencia. La aplicaci\u00f3n de los principios y pr\u00e1cticas expuestos en este documento le ayudar\u00e1 a reducir el riesgo, eliminar las operaciones manuales y aumentar la calidad y la confianza. El despliegue de software implica los siguientes principios: Aprovisionar y gestionar el tiempo de ejecuci\u00f3n del entorno de la nube para su aplicaci\u00f3n. Instalar la versi\u00f3n de la aplicaci\u00f3n de destino en sus entornos de nube. Configurar su aplicaci\u00f3n, incluyendo los datos necesarios. Una canalizaci\u00f3n de entrega continua es una manifestaci\u00f3n automatizada de su proceso para agilizar estos mismos principios de forma coherente y repetible. Objetivo Seguir las mejores pr\u00e1cticas de la industria para entregar los cambios de software a los clientes. Establecer la coherencia de los principios rectores y las mejores pr\u00e1cticas al ensamblar flujos de trabajo de entrega continua. Gu\u00eda general Definir una estrategia de release Es importante establecer un entendimiento com\u00fan en torno a la estrategia/dise\u00f1o de release durante la fase de planificaci\u00f3n de un proyecto. Este entendimiento incluye el despliegue y el mantenimiento de la aplicaci\u00f3n a lo largo de su SDLC. Principios de la estrategia de release Continuous Delivery por Jez Humble, David Farley cubren las consideraciones clave a seguir cuando se crea una estrategia de release: Partes encargadas de los despliegues en cada entorno, as\u00ed como encargadas del release. Estrategia de gesti\u00f3n de activos y configuraci\u00f3n. Enumeraci\u00f3n de los entornos disponibles para las pruebas de aceptaci\u00f3n, capacidad, integraci\u00f3n y aceptaci\u00f3n por parte del usuario, as\u00ed como el proceso por el que se mover\u00e1n las compilaciones a trav\u00e9s de estos entornos. Descripci\u00f3n de los procesos que se seguir\u00e1n para el despliegue en los entornos de prueba y producci\u00f3n, como las solicitudes de cambio que se abrir\u00e1n y las aprobaciones que deben concederse. Descripci\u00f3n del m\u00e9todo por el que se gestionar\u00e1 la configuraci\u00f3n en tiempo de despliegue y de ejecuci\u00f3n de la aplicaci\u00f3n, y c\u00f3mo se relaciona esto con el proceso de despliegue automatizado. Descripci\u00f3n de la integraci\u00f3n con cualquier sistema externo. \u00bfEn qu\u00e9 fase y c\u00f3mo se prueban como parte de un release? \u00bfC\u00f3mo se comunica el operador t\u00e9cnico con el proveedor en caso de problema? Un plan de recuperaci\u00f3n de desastres para poder recuperar el estado de la aplicaci\u00f3n tras un desastre. \u00bfQu\u00e9 pasos habr\u00e1 que dar para reiniciar o volver a desplegar la aplicaci\u00f3n en caso de que falle? Planificaci\u00f3n del tama\u00f1o y la capacidad de producci\u00f3n: \u00bfCu\u00e1ntos datos crear\u00e1 su aplicaci\u00f3n en vivo? \u00bfCu\u00e1ntos archivos de log o bases de datos necesitar\u00e1? \u00bfCu\u00e1nto ancho de banda y espacio en disco necesitar\u00e1? \u00bfQu\u00e9 latencia esperan los clientes? C\u00f3mo funciona el despliegue inicial en producci\u00f3n. C\u00f3mo se gestionar\u00e1 la correcci\u00f3n de defectos y la aplicaci\u00f3n de parches en el entorno de producci\u00f3n. C\u00f3mo se gestionar\u00e1n las actualizaciones del entorno de producci\u00f3n, incluida la migraci\u00f3n de datos. C\u00f3mo se llevar\u00e1n a cabo las actualizaciones de la aplicaci\u00f3n sin destruir su estado. Release de la aplicaci\u00f3n y promoci\u00f3n del entorno Su proceso de release debe tomar el artefacto de compilaci\u00f3n desplegable creado desde su etapa de commit y desplegarlo en todos los entornos de la nube, comenzando con su entorno de test. El entorno de test act\u00faa como una puerta para validar si su conjunto de pruebas se completa con \u00e9xito. Esta validaci\u00f3n siempre debe comenzar en un entorno de prueba mientras se inspecciona la versi\u00f3n desplegada integrada desde la rama de features / release que contiene sus cambios de c\u00f3digo. Los cambios de c\u00f3digo liberados en el entorno de pruebas suelen tener como objetivo la rama principal o la rama de release. El primer despliegue El primer despliegue de cualquier aplicaci\u00f3n debe mostrarse al cliente en un entorno similar al de producci\u00f3n (UAT) para solicitar su opini\u00f3n desde el principio. El entorno de UAT se utiliza para obtener la aceptaci\u00f3n del propietario del producto y, en \u00faltima instancia, promover el release a producci\u00f3n. Criterios para un entorno similar al de producci\u00f3n Ejecuta el mismo sistema operativo que producci\u00f3n. Tiene instalado el mismo software que producci\u00f3n. Tiene el mismo tama\u00f1o y configuraci\u00f3n que producci\u00f3n. Refleja la topolog\u00eda de red de producci\u00f3n. Se ejecutan pruebas de carga simuladas similares a las de producci\u00f3n despu\u00e9s de un release para hacer visible cualquier degradaci\u00f3n de la latencia o el rendimiento. Modelado del pipeline de release Es fundamental modelar su proceso de prueba y release para establecer un entendimiento com\u00fan entre los ingenieros de aplicaciones y las partes interesadas del cliente. Espec\u00edficamente, alinear las expectativas de cu\u00e1ntos entornos de nube deben ser pre-aprovisionados, as\u00ed como definir las funciones y responsabilidades. Etapas del pipeline de release El pipeline de release debe tener en cuenta las siguientes condiciones: Selecci\u00f3n del release: El desarrollador que lleva a cabo las pruebas de la aplicaci\u00f3n debe tener la capacidad de seleccionar la versi\u00f3n de release que va a desplegar en el entorno de test. Despliegue: liberar el artefacto de compilaci\u00f3n desplegable de la aplicaci\u00f3n en el entorno de nube de destino. Configuraci\u00f3n: Las aplicaciones deben ser configuradas de forma consistente en todos sus entornos. Esta configuraci\u00f3n se aplica en el momento del despliegue. Los datos confidenciales, como los secretos y certificados de la aplicaci\u00f3n, deben estar guardados en un almac\u00e9n de claves y secretos de PaaS totalmente gestionado. Todos los secretos utilizados por la aplicaci\u00f3n deben obtenerse internamente dentro de la propia aplicaci\u00f3n. Los secretos no deber\u00edan estar expuestos dentro del entorno de ejecuci\u00f3n. Migraci\u00f3n de datos: Prepueble el estado de la aplicaci\u00f3n y/o los registros de datos que se necesitan para su entorno de tiempo de ejecuci\u00f3n. Esto tambi\u00e9n puede incluir los datos de prueba necesarios para su conjunto de pruebas de integraci\u00f3n. Prueba de humo de despliegue. Su prueba de humo tambi\u00e9n debe verificar que su aplicaci\u00f3n est\u00e1 apuntando a la configuraci\u00f3n correcta. Realice cualquier escenario de prueba de aceptaci\u00f3n manual o automatizada. Apruebe la puerta de release para promover la versi\u00f3n de la aplicaci\u00f3n al entorno de la nube de destino. Releases de preproducci\u00f3n Las aplicaciones candidatas deben desplegarse en un entorno similar al de producci\u00f3n para llevar a cabo las pruebas finales manuales/automatizadas (incluidas las pruebas de capacidad). Reversi\u00f3n de releases Su estrategia de release debe tener en cuenta los escenarios de reversi\u00f3n en caso de fallos inesperados despu\u00e9s de un despliegue. La reversi\u00f3n de releases puede ser complicada. Si no hay cambios en los datos que deban ser revertidos, entonces puede simplemente activar un nuevo release candidato para la \u00faltima versi\u00f3n de producci\u00f3n conocida y promover ese release a lo largo de su pipeline de CD. Referencias Entrega continua por Jez Humble, David Farley. Integraci\u00f3n continua vs. entrega continua vs. despliegue continuo Anillos de despliegue Herramientas Flux para gitops Flujo de trabajo CI/CD usando GitOps Tekton para pipelines nativos de Kubernetes Argo Workflows Flagger para potentes lanzamientos nativos de Kubernetes, incluyendo blue/green, canary y A/B testing. No est\u00e1 muy relacionado con Kubernetes, pero echa un vistazo a jsonnet , un lenguaje de plantillas para reducir la repetici\u00f3n de tareas y aumentar el intercambio entre sus manifiestos yaml/json.","title":"Continuous Delivery"},{"location":"ci_cd/continuous-delivery/#continuous-delivery","text":"La inspiraci\u00f3n detr\u00e1s de la entrega continua es entregar constantemente software valioso a los usuarios con mayor frecuencia. La aplicaci\u00f3n de los principios y pr\u00e1cticas expuestos en este documento le ayudar\u00e1 a reducir el riesgo, eliminar las operaciones manuales y aumentar la calidad y la confianza. El despliegue de software implica los siguientes principios: Aprovisionar y gestionar el tiempo de ejecuci\u00f3n del entorno de la nube para su aplicaci\u00f3n. Instalar la versi\u00f3n de la aplicaci\u00f3n de destino en sus entornos de nube. Configurar su aplicaci\u00f3n, incluyendo los datos necesarios. Una canalizaci\u00f3n de entrega continua es una manifestaci\u00f3n automatizada de su proceso para agilizar estos mismos principios de forma coherente y repetible.","title":"Continuous Delivery"},{"location":"ci_cd/continuous-delivery/#objetivo","text":"Seguir las mejores pr\u00e1cticas de la industria para entregar los cambios de software a los clientes. Establecer la coherencia de los principios rectores y las mejores pr\u00e1cticas al ensamblar flujos de trabajo de entrega continua.","title":"Objetivo"},{"location":"ci_cd/continuous-delivery/#guia-general","text":"","title":"Gu\u00eda general"},{"location":"ci_cd/continuous-delivery/#definir-una-estrategia-de-release","text":"Es importante establecer un entendimiento com\u00fan en torno a la estrategia/dise\u00f1o de release durante la fase de planificaci\u00f3n de un proyecto. Este entendimiento incluye el despliegue y el mantenimiento de la aplicaci\u00f3n a lo largo de su SDLC.","title":"Definir una estrategia de release"},{"location":"ci_cd/continuous-delivery/#principios-de-la-estrategia-de-release","text":"Continuous Delivery por Jez Humble, David Farley cubren las consideraciones clave a seguir cuando se crea una estrategia de release: Partes encargadas de los despliegues en cada entorno, as\u00ed como encargadas del release. Estrategia de gesti\u00f3n de activos y configuraci\u00f3n. Enumeraci\u00f3n de los entornos disponibles para las pruebas de aceptaci\u00f3n, capacidad, integraci\u00f3n y aceptaci\u00f3n por parte del usuario, as\u00ed como el proceso por el que se mover\u00e1n las compilaciones a trav\u00e9s de estos entornos. Descripci\u00f3n de los procesos que se seguir\u00e1n para el despliegue en los entornos de prueba y producci\u00f3n, como las solicitudes de cambio que se abrir\u00e1n y las aprobaciones que deben concederse. Descripci\u00f3n del m\u00e9todo por el que se gestionar\u00e1 la configuraci\u00f3n en tiempo de despliegue y de ejecuci\u00f3n de la aplicaci\u00f3n, y c\u00f3mo se relaciona esto con el proceso de despliegue automatizado. Descripci\u00f3n de la integraci\u00f3n con cualquier sistema externo. \u00bfEn qu\u00e9 fase y c\u00f3mo se prueban como parte de un release? \u00bfC\u00f3mo se comunica el operador t\u00e9cnico con el proveedor en caso de problema? Un plan de recuperaci\u00f3n de desastres para poder recuperar el estado de la aplicaci\u00f3n tras un desastre. \u00bfQu\u00e9 pasos habr\u00e1 que dar para reiniciar o volver a desplegar la aplicaci\u00f3n en caso de que falle? Planificaci\u00f3n del tama\u00f1o y la capacidad de producci\u00f3n: \u00bfCu\u00e1ntos datos crear\u00e1 su aplicaci\u00f3n en vivo? \u00bfCu\u00e1ntos archivos de log o bases de datos necesitar\u00e1? \u00bfCu\u00e1nto ancho de banda y espacio en disco necesitar\u00e1? \u00bfQu\u00e9 latencia esperan los clientes? C\u00f3mo funciona el despliegue inicial en producci\u00f3n. C\u00f3mo se gestionar\u00e1 la correcci\u00f3n de defectos y la aplicaci\u00f3n de parches en el entorno de producci\u00f3n. C\u00f3mo se gestionar\u00e1n las actualizaciones del entorno de producci\u00f3n, incluida la migraci\u00f3n de datos. C\u00f3mo se llevar\u00e1n a cabo las actualizaciones de la aplicaci\u00f3n sin destruir su estado.","title":"Principios de la estrategia de release"},{"location":"ci_cd/continuous-delivery/#release-de-la-aplicacion-y-promocion-del-entorno","text":"Su proceso de release debe tomar el artefacto de compilaci\u00f3n desplegable creado desde su etapa de commit y desplegarlo en todos los entornos de la nube, comenzando con su entorno de test. El entorno de test act\u00faa como una puerta para validar si su conjunto de pruebas se completa con \u00e9xito. Esta validaci\u00f3n siempre debe comenzar en un entorno de prueba mientras se inspecciona la versi\u00f3n desplegada integrada desde la rama de features / release que contiene sus cambios de c\u00f3digo. Los cambios de c\u00f3digo liberados en el entorno de pruebas suelen tener como objetivo la rama principal o la rama de release.","title":"Release de la aplicaci\u00f3n y promoci\u00f3n del entorno"},{"location":"ci_cd/continuous-delivery/#el-primer-despliegue","text":"El primer despliegue de cualquier aplicaci\u00f3n debe mostrarse al cliente en un entorno similar al de producci\u00f3n (UAT) para solicitar su opini\u00f3n desde el principio. El entorno de UAT se utiliza para obtener la aceptaci\u00f3n del propietario del producto y, en \u00faltima instancia, promover el release a producci\u00f3n.","title":"El primer despliegue"},{"location":"ci_cd/continuous-delivery/#criterios-para-un-entorno-similar-al-de-produccion","text":"Ejecuta el mismo sistema operativo que producci\u00f3n. Tiene instalado el mismo software que producci\u00f3n. Tiene el mismo tama\u00f1o y configuraci\u00f3n que producci\u00f3n. Refleja la topolog\u00eda de red de producci\u00f3n. Se ejecutan pruebas de carga simuladas similares a las de producci\u00f3n despu\u00e9s de un release para hacer visible cualquier degradaci\u00f3n de la latencia o el rendimiento.","title":"Criterios para un entorno similar al de producci\u00f3n"},{"location":"ci_cd/continuous-delivery/#modelado-del-pipeline-de-release","text":"Es fundamental modelar su proceso de prueba y release para establecer un entendimiento com\u00fan entre los ingenieros de aplicaciones y las partes interesadas del cliente. Espec\u00edficamente, alinear las expectativas de cu\u00e1ntos entornos de nube deben ser pre-aprovisionados, as\u00ed como definir las funciones y responsabilidades.","title":"Modelado del pipeline de release"},{"location":"ci_cd/continuous-delivery/#etapas-del-pipeline-de-release","text":"El pipeline de release debe tener en cuenta las siguientes condiciones: Selecci\u00f3n del release: El desarrollador que lleva a cabo las pruebas de la aplicaci\u00f3n debe tener la capacidad de seleccionar la versi\u00f3n de release que va a desplegar en el entorno de test. Despliegue: liberar el artefacto de compilaci\u00f3n desplegable de la aplicaci\u00f3n en el entorno de nube de destino. Configuraci\u00f3n: Las aplicaciones deben ser configuradas de forma consistente en todos sus entornos. Esta configuraci\u00f3n se aplica en el momento del despliegue. Los datos confidenciales, como los secretos y certificados de la aplicaci\u00f3n, deben estar guardados en un almac\u00e9n de claves y secretos de PaaS totalmente gestionado. Todos los secretos utilizados por la aplicaci\u00f3n deben obtenerse internamente dentro de la propia aplicaci\u00f3n. Los secretos no deber\u00edan estar expuestos dentro del entorno de ejecuci\u00f3n. Migraci\u00f3n de datos: Prepueble el estado de la aplicaci\u00f3n y/o los registros de datos que se necesitan para su entorno de tiempo de ejecuci\u00f3n. Esto tambi\u00e9n puede incluir los datos de prueba necesarios para su conjunto de pruebas de integraci\u00f3n. Prueba de humo de despliegue. Su prueba de humo tambi\u00e9n debe verificar que su aplicaci\u00f3n est\u00e1 apuntando a la configuraci\u00f3n correcta. Realice cualquier escenario de prueba de aceptaci\u00f3n manual o automatizada. Apruebe la puerta de release para promover la versi\u00f3n de la aplicaci\u00f3n al entorno de la nube de destino.","title":"Etapas del pipeline de release"},{"location":"ci_cd/continuous-delivery/#releases-de-preproduccion","text":"Las aplicaciones candidatas deben desplegarse en un entorno similar al de producci\u00f3n para llevar a cabo las pruebas finales manuales/automatizadas (incluidas las pruebas de capacidad).","title":"Releases de preproducci\u00f3n"},{"location":"ci_cd/continuous-delivery/#reversion-de-releases","text":"Su estrategia de release debe tener en cuenta los escenarios de reversi\u00f3n en caso de fallos inesperados despu\u00e9s de un despliegue. La reversi\u00f3n de releases puede ser complicada. Si no hay cambios en los datos que deban ser revertidos, entonces puede simplemente activar un nuevo release candidato para la \u00faltima versi\u00f3n de producci\u00f3n conocida y promover ese release a lo largo de su pipeline de CD.","title":"Reversi\u00f3n de releases"},{"location":"ci_cd/continuous-delivery/#referencias","text":"Entrega continua por Jez Humble, David Farley. Integraci\u00f3n continua vs. entrega continua vs. despliegue continuo Anillos de despliegue","title":"Referencias"},{"location":"ci_cd/continuous-delivery/#herramientas","text":"Flux para gitops Flujo de trabajo CI/CD usando GitOps Tekton para pipelines nativos de Kubernetes Argo Workflows Flagger para potentes lanzamientos nativos de Kubernetes, incluyendo blue/green, canary y A/B testing. No est\u00e1 muy relacionado con Kubernetes, pero echa un vistazo a jsonnet , un lenguaje de plantillas para reducir la repetici\u00f3n de tareas y aumentar el intercambio entre sus manifiestos yaml/json.","title":"Herramientas"},{"location":"ci_cd/continuous-integration/","text":"Continuous Integration Alentamos a los equipos de ingenier\u00eda a realizar una inversi\u00f3n inicial durante el Sprint 0 de un proyecto para establecer una canalizaci\u00f3n automatizada y repetible que integre continuamente el c\u00f3digo y libere los ejecutables del sistema para los entornos de nube de destino. Cada integraci\u00f3n debe ser verificada por un proceso de compilaci\u00f3n automatizado que asegure que pasa un conjunto de tests de validaci\u00f3n y detecte cualquier error. Estos principios mapean directamente las pr\u00e1cticas \u00e1giles del ciclo de vida del desarrollo de software. Metas La automatizaci\u00f3n de integraci\u00f3n continua es una parte integral del ciclo de vida de desarrollo de software destinado a reducir los errores de integraci\u00f3n de compilaci\u00f3n y maximizar la velocidad en un equipo de desarrollo. Una s\u00f3lida canalizaci\u00f3n de automatizaci\u00f3n de compilaci\u00f3n: Acelera la velocidad del equipo Previene problemas de integraci\u00f3n Evita el caos de \u00faltima hora durante las fechas de lanzamiento Proporciona un ciclo r\u00e1pido de retroalimentaci\u00f3n para el impacto de los cambios locales en todo el sistema Separa etapas de compilaci\u00f3n e implementaci\u00f3n Mide e informa m\u00e9tricas sobre fallas/\u00e9xitos de compilaci\u00f3n Aumenta la visibilidad en todo el equipo permitiendo una comunicaci\u00f3n m\u00e1s estrecha Reduce los errores humanos, que es probablemente la parte m\u00e1s importante de la automatizaci\u00f3n de las compilaciones. Definici\u00f3n de compilaci\u00f3n administrada en Git Los artefactos de c\u00f3digo/manifiesto requeridos para construir su proyecto deben mantenerse dentro de su(s) repositorio(s) de git de su(s) proyecto(s) Las definiciones de canalizaci\u00f3n de compilaci\u00f3n espec\u00edficas del proveedor de CI deben residir dentro de su(s) repositorio(s) de git de proyecto(s). Automatizaci\u00f3n de compilaci\u00f3n Una compilaci\u00f3n automatizada debe abarcar los siguientes principios: Compilaci\u00f3n Un solo paso dentro de su canalizaci\u00f3n de compilaci\u00f3n que compila su proyecto de c\u00f3digo en un solo artefacto de compilaci\u00f3n. Unit Testing Su definici\u00f3n de compilaci\u00f3n incluye pasos de validaci\u00f3n para ejecutar un conjunto de tests unitarios automatizados para garantizar que los componentes de la aplicaci\u00f3n cumplan con su dise\u00f1o y se comporten seg\u00fan lo previsto. Comprobaciones de estilo de c\u00f3digo El c\u00f3digo debe formatearse seg\u00fan los est\u00e1ndares de codificaci\u00f3n acordados. Dichos est\u00e1ndares mantienen el c\u00f3digo consistente y, lo que es m\u00e1s importante, f\u00e1cil de leer y refactorizar para el equipo. La consistencia en el estilo del c\u00f3digo fomenta la propiedad colectiva de los equipos Scrum del proyecto. Hay varias herramientas de validaci\u00f3n de estilo de c\u00f3digo abierto disponibles para elegir ( code style checks , StyleCop ). La secci\u00f3n Code Reviews tiene sugerencias para linters y estilos preferidos para varios lenguajes. Recomendamos incorporar herramientas de an\u00e1lisis de seguridad dentro de la etapa de compilaci\u00f3n de su canalizaci\u00f3n, como: esc\u00e1ner de credenciales, detecci\u00f3n de riesgos de seguridad, an\u00e1lisis est\u00e1tico, etc. Los est\u00e1ndares de c\u00f3digo se mantienen dentro de un \u00fanico archivo de configuraci\u00f3n. Debe haber un paso en la canalizaci\u00f3n de compilaci\u00f3n que afirme que el c\u00f3digo en el \u00faltimo commit se ajusta a la definici\u00f3n de estilo conocida. Script de compilaci\u00f3n Un solo comando debe tener la capacidad de compilar el sistema. Esto tambi\u00e9n es cierto para las compilaciones que se ejecutan en un servidor CI o en una m\u00e1quina local de desarrolladores. Sin dependencias IDE Es esencial tener una compilaci\u00f3n que se pueda ejecutar a trav\u00e9s de scripts independientes y que no dependa de un IDE en particular. Los destinos de canalizaci\u00f3n de compilaci\u00f3n se pueden activar localmente en sus escritorios a trav\u00e9s del IDE de su elecci\u00f3n. El proceso de compilaci\u00f3n tambi\u00e9n debe mantener la flexibilidad suficiente para ejecutarse dentro de un servidor de CI. Comprobaciones de seguridad de DevOps Introduzca seguridad a su proyecto en las primeras etapas. Siga la secci\u00f3n DevSecOps para introducir pr\u00e1cticas de seguridad, automatizaci\u00f3n, herramientas y frameworks como parte de la CI. Dependencias del entorno de compilaci\u00f3n Configuraci\u00f3n del entorno local automatizado Alentamos a mantener una experiencia de desarrollador consistente para todos los miembros del equipo. Debe haber un manifiesto/proceso automatizado central que agilice la instalaci\u00f3n y configuraci\u00f3n de cualquier dependencia de software. De esta forma, los desarrolladores pueden replicar localmente el mismo entorno de compilaci\u00f3n que el que se ejecuta en un servidor de CI. Los scripts de automatizaci\u00f3n de compilaci\u00f3n a menudo requieren paquetes de software espec\u00edficos y una versi\u00f3n preinstalada dentro del entorno de tiempo de ejecuci\u00f3n del sistema operativo. Todos los desarrolladores del equipo deber\u00edan poder emular el entorno de compilaci\u00f3n desde su escritorio local, independientemente de su sistema operativo. Para los proyectos que usan VS Code, aprovechar Dev Containers realmente puede ayudar a estandarizar la experiencia del desarrollador local en todo el equipo. Se deben considerar herramientas de empaquetado de software bien establecidas como Docker, Maven, npm, etc. al dise\u00f1ar su cadena de herramientas de automatizaci\u00f3n de compilaci\u00f3n. Documentaci\u00f3n de la configuraci\u00f3n local El proceso de configuraci\u00f3n para un entorno de compilaci\u00f3n local debe estar bien documentado y ser f\u00e1cil de seguir para los desarrolladores. Infrastructure as Code Administre la mayor cantidad posible de lo siguiente, como c\u00f3digo: Archivos de configuraci\u00f3n Gesti\u00f3n de configuraci\u00f3n (es decir, automatizaci\u00f3n de variables de entorno) Gesti\u00f3n de secretos Aprovisionamiento de recursos en la nube Asignaciones de roles Escenarios de prueba de carga Reglas y condiciones de monitoreo/alertas de disponibilidad Desvincular la infraestructura del c\u00f3digo base de la aplicaci\u00f3n simplifica el paso de los equipos de ingenier\u00eda a las aplicaciones nativas de la nube. Por qu\u00e9 Los cambios repetibles y auditables en la infraestructura facilitan la reversi\u00f3n a buenas configuraciones conocidas y la r\u00e1pida expansi\u00f3n sin tener que conectar manualmente los recursos de la nube. Los proyectos de referencia de IAC probados permiten que m\u00e1s equipos de ingenier\u00eda implementen soluciones seguras y escalables a un ritmo mucho m\u00e1s r\u00e1pido Permite simplificar los escenarios de \"lift and shift\" abstrayendo las complejidades de la computaci\u00f3n nativa en la nube lejos de los equipos de desarrolladores de aplicaciones. IAC DevOPS: operaciones por Pull Request El proceso de implementaci\u00f3n de la infraestructura se basa en un repositorio que contiene el estado esperado actual del sistema/entorno de Azure. Los cambios operativos se realizan en el sistema en ejecuci\u00f3n al realizar confirmaciones en este repositorio. Git tambi\u00e9n proporciona un modelo simple para auditar implementaciones y retroceder a un estado anterior. Patrones recomendados Usted define la infraestructura como c\u00f3digo en las plantillas de Terraform/ARM/Ansible Las plantillas son pilas de recursos en la nube repetibles que se centran en conjuntos de configuraci\u00f3n alineados con las necesidades de escalado y rendimiento de la aplicaci\u00f3n. Principios de la IAC Automatice el entorno de Azure Todos los recursos de la nube se aprovisionan a trav\u00e9s de un conjunto de infraestructura como plantillas de c\u00f3digo. Esto tambi\u00e9n incluye secretos, ajustes de configuraci\u00f3n de servicios, asignaciones de roles y condiciones de monitoreo. Azure Portal debe proporcionar una vista de solo lectura de los recursos del entorno. Cualquier cambio aplicado al entorno debe realizarse \u00fanicamente a trav\u00e9s de la cadena de herramientas IAC CI. El aprovisionamiento de entornos en la nube debe ser un proceso repetible que se basa en los artefactos del c\u00f3digo de infraestructura registrados en nuestro repositorio de git. Flujo de trabajo de CI de IAC Cuando los archivos de plantilla de IAC cambian a trav\u00e9s de un flujo de trabajo basado en Git, una canalizaci\u00f3n de compilaci\u00f3n de CI crea, valida y concilia el estado actual del entorno de infraestructura de destino con el estado esperado. El plan de ejecuci\u00f3n de infraestructura candidato para estos entornos fijos es revisado por un administrador como verificaci\u00f3n de entrada antes de la etapa de implementaci\u00f3n de la canalizaci\u00f3n que aplica el plan de ejecuci\u00f3n. Acceso de solo lectura del desarrollador a los recursos de la nube Las cuentas de desarrollador en Azure Portal deben tener acceso de solo lectura a los recursos del entorno de IAC en Azure. Automatizaci\u00f3n de secretos Las plantillas de IAC se implementan a trav\u00e9s de un sistema CI/CD que tiene integrada la automatizaci\u00f3n de secretos. Evite aplicar cambios a secretos y/o certificados directamente en Azure Portal. Automatizaci\u00f3n de tests de integraci\u00f3n de infraestructura Los tests de integraci\u00f3n de un extremo a otro se ejecutan como parte de su proceso de IAC CI para inspeccionar y validar que un entorno est\u00e9 listo para usar. Documentaci\u00f3n de Infraestructura La implementaci\u00f3n y la topolog\u00eda de la plantilla de recursos en la nube deben documentarse y comprenderse bien con el README del repositorio git de IAC. Se deben documentar los pasos de configuraci\u00f3n del entorno local y del flujo de trabajo de CI. Validaci\u00f3n de la configuraci\u00f3n Las aplicaciones utilizan la configuraci\u00f3n para permitir diferentes comportamientos en tiempo de ejecuci\u00f3n y es bastante com\u00fan utilizar archivos para esto. Como desarrolladores, podemos introducir errores al editar estos archivos, lo que causar\u00eda problemas para que la aplicaci\u00f3n se inicie y/o se ejecute correctamente. Aplicando t\u00e9cnicas de validaci\u00f3n tanto en la sintaxis como en la sem\u00e1ntica de nuestra configuraci\u00f3n, podemos detectar errores antes de que la aplicaci\u00f3n se despliegue y ejecute, mejorando la experiencia del desarrollador. Ejemplos de archivos de configuraci\u00f3n de aplicaciones JSON, con soporte para tipos de datos y estructuras de datos complejas YAML, un superconjunto de JSON con soporte para tipos de datos y estructuras complejas TOML, un superconjunto de JSON y un formato de archivo de configuraci\u00f3n formalmente especificado \u00bfPor qu\u00e9 validar la configuraci\u00f3n de la aplicaci\u00f3n como un paso separado? Depuraci\u00f3n m\u00e1s f\u00e1cil y ahorro de tiempo: Con un paso de validaci\u00f3n de la configuraci\u00f3n en nuestro pipeline, podemos evitar ejecutar la aplicaci\u00f3n s\u00f3lo para descubrir que falla. Se ahorra tiempo en tener que desplegar y ejecutar, esperar y luego darse cuenta de que algo est\u00e1 mal en la configuraci\u00f3n. Adem\u00e1s, tambi\u00e9n ahorra tiempo en revisar los logs para averiguar qu\u00e9 fall\u00f3 y por qu\u00e9. Mejor experiencia del usuario/desarrollador: Un simple recordatorio al usuario de que algo en la configuraci\u00f3n no est\u00e1 en el formato correcto puede marcar la diferencia entre un proceso de despliegue exitoso y la frustraci\u00f3n de tener que adivinar lo que sali\u00f3 mal. Evitar la corrupci\u00f3n de datos y las brechas de seguridad: Dado que los datos llegan desde una fuente no confiable, como un usuario o un servicio web externo, es particularmente importante validar la entrada. \u00bfQu\u00e9 es el esquema Json? JSON-Schema es el est\u00e1ndar de los documentos JSON que describe la estructura y los requisitos de sus datos JSON. Aunque se llama JSON-Schema, tambi\u00e9n es com\u00fan utilizar este m\u00e9todo para los YAML, ya que es un superconjunto de JSON. El esquema es muy sencillo; se\u00f1alar qu\u00e9 campos pueden existir, cu\u00e1les son obligatorios u opcionales, qu\u00e9 formato de datos utilizan. Sobre esa premisa b\u00e1sica se pueden a\u00f1adir otras reglas de validaci\u00f3n, junto con informaci\u00f3n legible para el ser humano. Los metadatos viven en los esquemas, que tambi\u00e9n son archivos .json. \u00bfC\u00f3mo implementar la validaci\u00f3n de esquemas? La implementaci\u00f3n de la validaci\u00f3n de esquemas se divide en dos: la generaci\u00f3n de los esquemas y la validaci\u00f3n de los archivos yaml/json con esos esquemas. Generaci\u00f3n Hay dos opciones para generar un esquema: Desde el c\u00f3digo : podemos aprovechar los modelos y objetos existentes en el c\u00f3digo y generar un esquema personalizado. Desde los datos : podemos tomar muestros yaml/json que reflejen la configuraci\u00f3n en general y utilizar las distintas herramientas online para generar un esquema. Validaci\u00f3n El esquema tiene m\u00e1s de 30 validadores para diferentes lenguajes, por lo que no es necesario que lo codifiques t\u00fa mismo. Validaci\u00f3n de la integraci\u00f3n Una manera eficaz de identificar los errores en su compilaci\u00f3n a un ritmo r\u00e1pido es invertir temprano en un conjunto fiable de tests automatizados que validan la funcionalidad de base del sistema: Tests de integraci\u00f3n de extremo a extremo Incluya pruebas en su proceso para validar que la versi\u00f3n candidata se ajusta a las afirmaciones de funcionalidad empresarial automatizada. Cualquier error debe ser reportado en los resultados de los tests, incluyendo la prueba fallida y el seguimiento de la pila correspondiente. Todas los tests deben ser invocadas a trav\u00e9s de un \u00fanico comando. Mantenga la compilaci\u00f3n r\u00e1pida. Tenga en cuenta el tiempo de ejecuci\u00f3n de los tests automatizados cuando decida introducir dependencias como bases de datos, servicios externos y carga de datos simulados. Considere la posibilidad de a\u00f1adir l\u00edmites m\u00e1ximos de tiempo de espera para las validaciones largas para fallar r\u00e1pidamente y mantener una alta velocidad en todo el equipo. Evitar el checkin de compilaciones falladas Las comprobaciones automatizadas de las compilaciones, los tests, las ejecuciones de lint, etc. deber\u00edan validarse localmente antes de confirmar los cambios en el repositorio. Informar de los fallos de compilaci\u00f3n Si el paso de compilaci\u00f3n falla, el estado de ejecuci\u00f3n de la cadena de compilaci\u00f3n debe ser reportado como fallido, incluyendo los logs relevantes y las trazas de pila. Dependencias de datos de automatizaci\u00f3n de tests Cualquier conjunto de datos simulado que se utilice para los tests unitarios y de integraci\u00f3n debe ser chequeado en el repositorio principal. Minimice cualquier dependencia de datos externos con su proceso de compilaci\u00f3n. Comprobaci\u00f3n de la cobertura del c\u00f3digo Recomendamos integrar las herramientas de cobertura del c\u00f3digo en la fase de compilaci\u00f3n. La mayor\u00eda de las herramientas de cobertura suspenden las compilaciones cuando la cobertura de los tests cae por debajo de un umbral m\u00ednimo. El informe de cobertura deber\u00eda publicarse en su sistema CI para hacer un seguimiento de una serie de variaciones en el tiempo. Flujo de trabajo basado en Git Compilar en el momento del commit Cada commit en el repositorio base debe activar el canal de CI para crear un nuevo candidato a la compilaci\u00f3n. Los artefactos de compilaci\u00f3n se construyen, empaquetan, validan y despliegan continuamente en un entorno de no producci\u00f3n por cada commit. Cada commit contra el repositorio resulta en una ejecuci\u00f3n de CI que comprueba las fuentes en la m\u00e1quina de integraci\u00f3n, inicia una compilaci\u00f3n y notifica el resultado de la compilaci\u00f3n. Evitar comentar los tests que fallan Evita comentar los tests en la rama principal. Al comentar los tests, obtenemos una indicaci\u00f3n incorrecta del estado de la compilaci\u00f3n. Aplicaci\u00f3n de la pol\u00edtica de rama Las pol\u00edticas de rama protegida deben ser configuradas en la rama principal para asegurar que las etapas de CI han pasado antes de comenzar una revisi\u00f3n de c\u00f3digo. Los aprobadores de la revisi\u00f3n del c\u00f3digo s\u00f3lo comenzar\u00e1n a revisar un PR una vez que la ejecuci\u00f3n de la canalizaci\u00f3n de CI haya pasado. Las compilaciones rotas deber\u00edan bloquear las revisiones de los PRs. Evita que los commits vayan directamente a la rama principal. Estrategia de las ramas Las ramas de release deber\u00edan activar autom\u00e1ticamente el despliegue de un artefacto de compilaci\u00f3n en su entorno de nube de destino. Puedes encontrar una gu\u00eda en el sitio de documentaci\u00f3n de Azure DevOps en la secci\u00f3n Manage deployments . Entrega r\u00e1pida y diaria En aras de la transparencia y de la comunicaci\u00f3n frecuente entre el equipo de desarrollo, animamos a los desarrolladores a que env\u00eden el c\u00f3digo a diario. Este enfoque proporciona visibilidad y acelera la programaci\u00f3n por pares en todo el equipo. Estos son algunos principios a tener en cuenta: Todos comitean al repositorio cada d\u00eda El c\u00f3digo registrado al final del d\u00eda debe contener pruebas unitarias como m\u00ednimo. Ejecuta la compilaci\u00f3n localmente antes de hacer el check-in para evitar la saturaci\u00f3n de fallos de la canalizaci\u00f3n CI. Deber\u00edas verificar qu\u00e9 caus\u00f3 el error, y tratar de resolverlo tan pronto como sea posible. Animamos a los desarrolladores a seguir los principios lean de SDLC . A\u00edsle el trabajo en peque\u00f1as partes que se relacionen directamente con el valor del negocio y refactorice de forma incremental. Entornos aislados Uno de los objetivos clave de la validaci\u00f3n de la compilaci\u00f3n es aislar e identificar los fallos en los entornos de test y minimizar cualquier interrupci\u00f3n de producci\u00f3n. Las pruebas automatizadas E2E deben ejecutarse en un entorno que imite el entorno de producci\u00f3n (en la medida de lo posible). Test en un clon de producci\u00f3n El entorno de producci\u00f3n debe duplicarse en un entorno de test (QA y/o Pre-Prod) como m\u00ednimo. Las actualizaciones PR desencadenan releases escalonados Los nuevos commits relacionados con un pull request deben desencadenar una compilaci\u00f3n / release en un entorno de integraci\u00f3n. El entorno de producci\u00f3n debe estar totalmente aislado de este proceso. Promover los cambios de infraestructura en entornos fijos Los cambios en la infraestructura como c\u00f3digo deben probarse en un entorno de integraci\u00f3n y promoverse a todos los entornos fijos, para luego migrar a producci\u00f3n sin que haya tiempo de inactividad para los usuarios del sistema. Tests en producci\u00f3n Existen varios enfoques para llevar a cabo de forma segura las pruebas automatizadas para los despliegues de producci\u00f3n. Algunos de ellos pueden ser: Feature flagging A/B testing Traffic shifting Acceso de los desarrolladores a los \u00faltimos artefactos de la versi\u00f3n Nuestro flujo de trabajo de desarrollo debe permitir a los desarrolladores obtener, instalar y ejecutar el \u00faltimo ejecutable del sistema. Los ejecutables de la versi\u00f3n deben ser generados autom\u00e1ticamente como parte de nuestros procesos CI/CD. Los desarrolladores pueden acceder al \u00faltimo ejecutable El \u00faltimo ejecutable del sistema est\u00e1 disponible para todos los desarrolladores del equipo. Debe haber un lugar bien conocido donde los desarrolladores puedan hacer referencia al artefacto. Observabilidad de la integraci\u00f3n Los cambios de estado aplicados a la compilaci\u00f3n principal deben estar disponibles y ser comunicados a todo el equipo. La centralizaci\u00f3n de los logs y el estado de los fallos es esencial para los desarrolladores que investigan las compilaciones falladas. Recomendamos integrar Teams o Slack con las ejecuciones CI/CD, lo que ayuda a mantener al equipo continuamente conectado a los fallos y al estado de las compilaciones. Dashboard de alto nivel de integraci\u00f3n continua Los proveedores de integraci\u00f3n continua modernos tienen la capacidad de consolidar e informar del estado de la compilaci\u00f3n en un dashboard determinado. Tu dashboard de integraci\u00f3n continua deber\u00eda ser capaz de correlacionar un fallo de compilaci\u00f3n con un commit de git. Badge del estado de compilaci\u00f3n en el readme del proyecto Deber\u00eda haber una badge del estado de la compilaci\u00f3n incluida en el README ra\u00edz del proyecto. Notificaciones de compilaci\u00f3n Tu proceso de CI deber\u00eda estar configurado para enviar notificaciones a plataformas de mensajer\u00eda como Teams / Slack una vez que la compilaci\u00f3n se complete. Recomendamos crear un canal separado para ayudar a consolidar y aislar estas notificaciones. Recursos Mejores pr\u00e1cticas de integraci\u00f3n continua de Martin Fowler Pipelines multietapa de Azure DevOps Conceptos clave de Azure Pipeline Entornos de Azure Pipeline Artefactos en Azure Pipelines Permisos y roles de seguridad en Azure Pipeline Aprobaciones y comprobaciones del entorno de Azure Proveedor de Terraform Azure DevOps Gu\u00eda de inicio de Terraform con Azure Configuraci\u00f3n de Terraform Remote State Azure Terratest - Marco de infraestructura de unidades e integraci\u00f3n Documentaci\u00f3n Bicep Ejemplos de Bicep","title":"Continuous Integration"},{"location":"ci_cd/continuous-integration/#continuous-integration","text":"Alentamos a los equipos de ingenier\u00eda a realizar una inversi\u00f3n inicial durante el Sprint 0 de un proyecto para establecer una canalizaci\u00f3n automatizada y repetible que integre continuamente el c\u00f3digo y libere los ejecutables del sistema para los entornos de nube de destino. Cada integraci\u00f3n debe ser verificada por un proceso de compilaci\u00f3n automatizado que asegure que pasa un conjunto de tests de validaci\u00f3n y detecte cualquier error. Estos principios mapean directamente las pr\u00e1cticas \u00e1giles del ciclo de vida del desarrollo de software.","title":"Continuous Integration"},{"location":"ci_cd/continuous-integration/#metas","text":"La automatizaci\u00f3n de integraci\u00f3n continua es una parte integral del ciclo de vida de desarrollo de software destinado a reducir los errores de integraci\u00f3n de compilaci\u00f3n y maximizar la velocidad en un equipo de desarrollo. Una s\u00f3lida canalizaci\u00f3n de automatizaci\u00f3n de compilaci\u00f3n: Acelera la velocidad del equipo Previene problemas de integraci\u00f3n Evita el caos de \u00faltima hora durante las fechas de lanzamiento Proporciona un ciclo r\u00e1pido de retroalimentaci\u00f3n para el impacto de los cambios locales en todo el sistema Separa etapas de compilaci\u00f3n e implementaci\u00f3n Mide e informa m\u00e9tricas sobre fallas/\u00e9xitos de compilaci\u00f3n Aumenta la visibilidad en todo el equipo permitiendo una comunicaci\u00f3n m\u00e1s estrecha Reduce los errores humanos, que es probablemente la parte m\u00e1s importante de la automatizaci\u00f3n de las compilaciones.","title":"Metas"},{"location":"ci_cd/continuous-integration/#definicion-de-compilacion-administrada-en-git","text":"","title":"Definici\u00f3n de compilaci\u00f3n administrada en Git"},{"location":"ci_cd/continuous-integration/#los-artefactos-de-codigomanifiesto-requeridos-para-construir-su-proyecto-deben-mantenerse-dentro-de-sus-repositorios-de-git-de-sus-proyectos","text":"Las definiciones de canalizaci\u00f3n de compilaci\u00f3n espec\u00edficas del proveedor de CI deben residir dentro de su(s) repositorio(s) de git de proyecto(s).","title":"Los artefactos de c\u00f3digo/manifiesto requeridos para construir su proyecto deben mantenerse dentro de su(s) repositorio(s) de git de su(s) proyecto(s)"},{"location":"ci_cd/continuous-integration/#automatizacion-de-compilacion","text":"Una compilaci\u00f3n automatizada debe abarcar los siguientes principios:","title":"Automatizaci\u00f3n de compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#compilacion","text":"Un solo paso dentro de su canalizaci\u00f3n de compilaci\u00f3n que compila su proyecto de c\u00f3digo en un solo artefacto de compilaci\u00f3n.","title":"Compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#unit-testing","text":"Su definici\u00f3n de compilaci\u00f3n incluye pasos de validaci\u00f3n para ejecutar un conjunto de tests unitarios automatizados para garantizar que los componentes de la aplicaci\u00f3n cumplan con su dise\u00f1o y se comporten seg\u00fan lo previsto.","title":"Unit Testing"},{"location":"ci_cd/continuous-integration/#comprobaciones-de-estilo-de-codigo","text":"El c\u00f3digo debe formatearse seg\u00fan los est\u00e1ndares de codificaci\u00f3n acordados. Dichos est\u00e1ndares mantienen el c\u00f3digo consistente y, lo que es m\u00e1s importante, f\u00e1cil de leer y refactorizar para el equipo. La consistencia en el estilo del c\u00f3digo fomenta la propiedad colectiva de los equipos Scrum del proyecto. Hay varias herramientas de validaci\u00f3n de estilo de c\u00f3digo abierto disponibles para elegir ( code style checks , StyleCop ). La secci\u00f3n Code Reviews tiene sugerencias para linters y estilos preferidos para varios lenguajes. Recomendamos incorporar herramientas de an\u00e1lisis de seguridad dentro de la etapa de compilaci\u00f3n de su canalizaci\u00f3n, como: esc\u00e1ner de credenciales, detecci\u00f3n de riesgos de seguridad, an\u00e1lisis est\u00e1tico, etc. Los est\u00e1ndares de c\u00f3digo se mantienen dentro de un \u00fanico archivo de configuraci\u00f3n. Debe haber un paso en la canalizaci\u00f3n de compilaci\u00f3n que afirme que el c\u00f3digo en el \u00faltimo commit se ajusta a la definici\u00f3n de estilo conocida.","title":"Comprobaciones de estilo de c\u00f3digo"},{"location":"ci_cd/continuous-integration/#script-de-compilacion","text":"Un solo comando debe tener la capacidad de compilar el sistema. Esto tambi\u00e9n es cierto para las compilaciones que se ejecutan en un servidor CI o en una m\u00e1quina local de desarrolladores.","title":"Script de compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#sin-dependencias-ide","text":"Es esencial tener una compilaci\u00f3n que se pueda ejecutar a trav\u00e9s de scripts independientes y que no dependa de un IDE en particular. Los destinos de canalizaci\u00f3n de compilaci\u00f3n se pueden activar localmente en sus escritorios a trav\u00e9s del IDE de su elecci\u00f3n. El proceso de compilaci\u00f3n tambi\u00e9n debe mantener la flexibilidad suficiente para ejecutarse dentro de un servidor de CI.","title":"Sin dependencias IDE"},{"location":"ci_cd/continuous-integration/#comprobaciones-de-seguridad-de-devops","text":"Introduzca seguridad a su proyecto en las primeras etapas. Siga la secci\u00f3n DevSecOps para introducir pr\u00e1cticas de seguridad, automatizaci\u00f3n, herramientas y frameworks como parte de la CI.","title":"Comprobaciones de seguridad de DevOps"},{"location":"ci_cd/continuous-integration/#dependencias-del-entorno-de-compilacion","text":"","title":"Dependencias del entorno de compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#configuracion-del-entorno-local-automatizado","text":"Alentamos a mantener una experiencia de desarrollador consistente para todos los miembros del equipo. Debe haber un manifiesto/proceso automatizado central que agilice la instalaci\u00f3n y configuraci\u00f3n de cualquier dependencia de software. De esta forma, los desarrolladores pueden replicar localmente el mismo entorno de compilaci\u00f3n que el que se ejecuta en un servidor de CI. Los scripts de automatizaci\u00f3n de compilaci\u00f3n a menudo requieren paquetes de software espec\u00edficos y una versi\u00f3n preinstalada dentro del entorno de tiempo de ejecuci\u00f3n del sistema operativo. Todos los desarrolladores del equipo deber\u00edan poder emular el entorno de compilaci\u00f3n desde su escritorio local, independientemente de su sistema operativo. Para los proyectos que usan VS Code, aprovechar Dev Containers realmente puede ayudar a estandarizar la experiencia del desarrollador local en todo el equipo. Se deben considerar herramientas de empaquetado de software bien establecidas como Docker, Maven, npm, etc. al dise\u00f1ar su cadena de herramientas de automatizaci\u00f3n de compilaci\u00f3n.","title":"Configuraci\u00f3n del entorno local automatizado"},{"location":"ci_cd/continuous-integration/#documentacion-de-la-configuracion-local","text":"El proceso de configuraci\u00f3n para un entorno de compilaci\u00f3n local debe estar bien documentado y ser f\u00e1cil de seguir para los desarrolladores.","title":"Documentaci\u00f3n de la configuraci\u00f3n local"},{"location":"ci_cd/continuous-integration/#infrastructure-as-code","text":"Administre la mayor cantidad posible de lo siguiente, como c\u00f3digo: Archivos de configuraci\u00f3n Gesti\u00f3n de configuraci\u00f3n (es decir, automatizaci\u00f3n de variables de entorno) Gesti\u00f3n de secretos Aprovisionamiento de recursos en la nube Asignaciones de roles Escenarios de prueba de carga Reglas y condiciones de monitoreo/alertas de disponibilidad Desvincular la infraestructura del c\u00f3digo base de la aplicaci\u00f3n simplifica el paso de los equipos de ingenier\u00eda a las aplicaciones nativas de la nube.","title":"Infrastructure as Code"},{"location":"ci_cd/continuous-integration/#por-que","text":"Los cambios repetibles y auditables en la infraestructura facilitan la reversi\u00f3n a buenas configuraciones conocidas y la r\u00e1pida expansi\u00f3n sin tener que conectar manualmente los recursos de la nube. Los proyectos de referencia de IAC probados permiten que m\u00e1s equipos de ingenier\u00eda implementen soluciones seguras y escalables a un ritmo mucho m\u00e1s r\u00e1pido Permite simplificar los escenarios de \"lift and shift\" abstrayendo las complejidades de la computaci\u00f3n nativa en la nube lejos de los equipos de desarrolladores de aplicaciones.","title":"Por qu\u00e9"},{"location":"ci_cd/continuous-integration/#iac-devops-operaciones-por-pull-request","text":"El proceso de implementaci\u00f3n de la infraestructura se basa en un repositorio que contiene el estado esperado actual del sistema/entorno de Azure. Los cambios operativos se realizan en el sistema en ejecuci\u00f3n al realizar confirmaciones en este repositorio. Git tambi\u00e9n proporciona un modelo simple para auditar implementaciones y retroceder a un estado anterior.","title":"IAC DevOPS: operaciones por Pull Request"},{"location":"ci_cd/continuous-integration/#patrones-recomendados","text":"Usted define la infraestructura como c\u00f3digo en las plantillas de Terraform/ARM/Ansible Las plantillas son pilas de recursos en la nube repetibles que se centran en conjuntos de configuraci\u00f3n alineados con las necesidades de escalado y rendimiento de la aplicaci\u00f3n.","title":"Patrones recomendados"},{"location":"ci_cd/continuous-integration/#principios-de-la-iac","text":"","title":"Principios de la IAC"},{"location":"ci_cd/continuous-integration/#automatice-el-entorno-de-azure","text":"Todos los recursos de la nube se aprovisionan a trav\u00e9s de un conjunto de infraestructura como plantillas de c\u00f3digo. Esto tambi\u00e9n incluye secretos, ajustes de configuraci\u00f3n de servicios, asignaciones de roles y condiciones de monitoreo. Azure Portal debe proporcionar una vista de solo lectura de los recursos del entorno. Cualquier cambio aplicado al entorno debe realizarse \u00fanicamente a trav\u00e9s de la cadena de herramientas IAC CI. El aprovisionamiento de entornos en la nube debe ser un proceso repetible que se basa en los artefactos del c\u00f3digo de infraestructura registrados en nuestro repositorio de git.","title":"Automatice el entorno de Azure"},{"location":"ci_cd/continuous-integration/#flujo-de-trabajo-de-ci-de-iac","text":"Cuando los archivos de plantilla de IAC cambian a trav\u00e9s de un flujo de trabajo basado en Git, una canalizaci\u00f3n de compilaci\u00f3n de CI crea, valida y concilia el estado actual del entorno de infraestructura de destino con el estado esperado. El plan de ejecuci\u00f3n de infraestructura candidato para estos entornos fijos es revisado por un administrador como verificaci\u00f3n de entrada antes de la etapa de implementaci\u00f3n de la canalizaci\u00f3n que aplica el plan de ejecuci\u00f3n.","title":"Flujo de trabajo de CI de IAC"},{"location":"ci_cd/continuous-integration/#acceso-de-solo-lectura-del-desarrollador-a-los-recursos-de-la-nube","text":"Las cuentas de desarrollador en Azure Portal deben tener acceso de solo lectura a los recursos del entorno de IAC en Azure.","title":"Acceso de solo lectura del desarrollador a los recursos de la nube"},{"location":"ci_cd/continuous-integration/#automatizacion-de-secretos","text":"Las plantillas de IAC se implementan a trav\u00e9s de un sistema CI/CD que tiene integrada la automatizaci\u00f3n de secretos. Evite aplicar cambios a secretos y/o certificados directamente en Azure Portal.","title":"Automatizaci\u00f3n de secretos"},{"location":"ci_cd/continuous-integration/#automatizacion-de-tests-de-integracion-de-infraestructura","text":"Los tests de integraci\u00f3n de un extremo a otro se ejecutan como parte de su proceso de IAC CI para inspeccionar y validar que un entorno est\u00e9 listo para usar.","title":"Automatizaci\u00f3n de tests de integraci\u00f3n de infraestructura"},{"location":"ci_cd/continuous-integration/#documentacion-de-infraestructura","text":"La implementaci\u00f3n y la topolog\u00eda de la plantilla de recursos en la nube deben documentarse y comprenderse bien con el README del repositorio git de IAC. Se deben documentar los pasos de configuraci\u00f3n del entorno local y del flujo de trabajo de CI.","title":"Documentaci\u00f3n de Infraestructura"},{"location":"ci_cd/continuous-integration/#validacion-de-la-configuracion","text":"Las aplicaciones utilizan la configuraci\u00f3n para permitir diferentes comportamientos en tiempo de ejecuci\u00f3n y es bastante com\u00fan utilizar archivos para esto. Como desarrolladores, podemos introducir errores al editar estos archivos, lo que causar\u00eda problemas para que la aplicaci\u00f3n se inicie y/o se ejecute correctamente. Aplicando t\u00e9cnicas de validaci\u00f3n tanto en la sintaxis como en la sem\u00e1ntica de nuestra configuraci\u00f3n, podemos detectar errores antes de que la aplicaci\u00f3n se despliegue y ejecute, mejorando la experiencia del desarrollador.","title":"Validaci\u00f3n de la configuraci\u00f3n"},{"location":"ci_cd/continuous-integration/#ejemplos-de-archivos-de-configuracion-de-aplicaciones","text":"JSON, con soporte para tipos de datos y estructuras de datos complejas YAML, un superconjunto de JSON con soporte para tipos de datos y estructuras complejas TOML, un superconjunto de JSON y un formato de archivo de configuraci\u00f3n formalmente especificado","title":"Ejemplos de archivos de configuraci\u00f3n de aplicaciones"},{"location":"ci_cd/continuous-integration/#por-que-validar-la-configuracion-de-la-aplicacion-como-un-paso-separado","text":"Depuraci\u00f3n m\u00e1s f\u00e1cil y ahorro de tiempo: Con un paso de validaci\u00f3n de la configuraci\u00f3n en nuestro pipeline, podemos evitar ejecutar la aplicaci\u00f3n s\u00f3lo para descubrir que falla. Se ahorra tiempo en tener que desplegar y ejecutar, esperar y luego darse cuenta de que algo est\u00e1 mal en la configuraci\u00f3n. Adem\u00e1s, tambi\u00e9n ahorra tiempo en revisar los logs para averiguar qu\u00e9 fall\u00f3 y por qu\u00e9. Mejor experiencia del usuario/desarrollador: Un simple recordatorio al usuario de que algo en la configuraci\u00f3n no est\u00e1 en el formato correcto puede marcar la diferencia entre un proceso de despliegue exitoso y la frustraci\u00f3n de tener que adivinar lo que sali\u00f3 mal. Evitar la corrupci\u00f3n de datos y las brechas de seguridad: Dado que los datos llegan desde una fuente no confiable, como un usuario o un servicio web externo, es particularmente importante validar la entrada.","title":"\u00bfPor qu\u00e9 validar la configuraci\u00f3n de la aplicaci\u00f3n como un paso separado?"},{"location":"ci_cd/continuous-integration/#que-es-el-esquema-json","text":"JSON-Schema es el est\u00e1ndar de los documentos JSON que describe la estructura y los requisitos de sus datos JSON. Aunque se llama JSON-Schema, tambi\u00e9n es com\u00fan utilizar este m\u00e9todo para los YAML, ya que es un superconjunto de JSON. El esquema es muy sencillo; se\u00f1alar qu\u00e9 campos pueden existir, cu\u00e1les son obligatorios u opcionales, qu\u00e9 formato de datos utilizan. Sobre esa premisa b\u00e1sica se pueden a\u00f1adir otras reglas de validaci\u00f3n, junto con informaci\u00f3n legible para el ser humano. Los metadatos viven en los esquemas, que tambi\u00e9n son archivos .json.","title":"\u00bfQu\u00e9 es el esquema Json?"},{"location":"ci_cd/continuous-integration/#como-implementar-la-validacion-de-esquemas","text":"La implementaci\u00f3n de la validaci\u00f3n de esquemas se divide en dos: la generaci\u00f3n de los esquemas y la validaci\u00f3n de los archivos yaml/json con esos esquemas.","title":"\u00bfC\u00f3mo implementar la validaci\u00f3n de esquemas?"},{"location":"ci_cd/continuous-integration/#generacion","text":"Hay dos opciones para generar un esquema: Desde el c\u00f3digo : podemos aprovechar los modelos y objetos existentes en el c\u00f3digo y generar un esquema personalizado. Desde los datos : podemos tomar muestros yaml/json que reflejen la configuraci\u00f3n en general y utilizar las distintas herramientas online para generar un esquema.","title":"Generaci\u00f3n"},{"location":"ci_cd/continuous-integration/#validacion","text":"El esquema tiene m\u00e1s de 30 validadores para diferentes lenguajes, por lo que no es necesario que lo codifiques t\u00fa mismo.","title":"Validaci\u00f3n"},{"location":"ci_cd/continuous-integration/#validacion-de-la-integracion","text":"Una manera eficaz de identificar los errores en su compilaci\u00f3n a un ritmo r\u00e1pido es invertir temprano en un conjunto fiable de tests automatizados que validan la funcionalidad de base del sistema:","title":"Validaci\u00f3n de la integraci\u00f3n"},{"location":"ci_cd/continuous-integration/#tests-de-integracion-de-extremo-a-extremo","text":"Incluya pruebas en su proceso para validar que la versi\u00f3n candidata se ajusta a las afirmaciones de funcionalidad empresarial automatizada. Cualquier error debe ser reportado en los resultados de los tests, incluyendo la prueba fallida y el seguimiento de la pila correspondiente. Todas los tests deben ser invocadas a trav\u00e9s de un \u00fanico comando. Mantenga la compilaci\u00f3n r\u00e1pida. Tenga en cuenta el tiempo de ejecuci\u00f3n de los tests automatizados cuando decida introducir dependencias como bases de datos, servicios externos y carga de datos simulados. Considere la posibilidad de a\u00f1adir l\u00edmites m\u00e1ximos de tiempo de espera para las validaciones largas para fallar r\u00e1pidamente y mantener una alta velocidad en todo el equipo.","title":"Tests de integraci\u00f3n de extremo a extremo"},{"location":"ci_cd/continuous-integration/#evitar-el-checkin-de-compilaciones-falladas","text":"Las comprobaciones automatizadas de las compilaciones, los tests, las ejecuciones de lint, etc. deber\u00edan validarse localmente antes de confirmar los cambios en el repositorio.","title":"Evitar el checkin de compilaciones falladas"},{"location":"ci_cd/continuous-integration/#informar-de-los-fallos-de-compilacion","text":"Si el paso de compilaci\u00f3n falla, el estado de ejecuci\u00f3n de la cadena de compilaci\u00f3n debe ser reportado como fallido, incluyendo los logs relevantes y las trazas de pila.","title":"Informar de los fallos de compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#dependencias-de-datos-de-automatizacion-de-tests","text":"Cualquier conjunto de datos simulado que se utilice para los tests unitarios y de integraci\u00f3n debe ser chequeado en el repositorio principal. Minimice cualquier dependencia de datos externos con su proceso de compilaci\u00f3n.","title":"Dependencias de datos de automatizaci\u00f3n de tests"},{"location":"ci_cd/continuous-integration/#comprobacion-de-la-cobertura-del-codigo","text":"Recomendamos integrar las herramientas de cobertura del c\u00f3digo en la fase de compilaci\u00f3n. La mayor\u00eda de las herramientas de cobertura suspenden las compilaciones cuando la cobertura de los tests cae por debajo de un umbral m\u00ednimo. El informe de cobertura deber\u00eda publicarse en su sistema CI para hacer un seguimiento de una serie de variaciones en el tiempo.","title":"Comprobaci\u00f3n de la cobertura del c\u00f3digo"},{"location":"ci_cd/continuous-integration/#flujo-de-trabajo-basado-en-git","text":"","title":"Flujo de trabajo basado en Git"},{"location":"ci_cd/continuous-integration/#compilar-en-el-momento-del-commit","text":"Cada commit en el repositorio base debe activar el canal de CI para crear un nuevo candidato a la compilaci\u00f3n. Los artefactos de compilaci\u00f3n se construyen, empaquetan, validan y despliegan continuamente en un entorno de no producci\u00f3n por cada commit. Cada commit contra el repositorio resulta en una ejecuci\u00f3n de CI que comprueba las fuentes en la m\u00e1quina de integraci\u00f3n, inicia una compilaci\u00f3n y notifica el resultado de la compilaci\u00f3n.","title":"Compilar en el momento del commit"},{"location":"ci_cd/continuous-integration/#evitar-comentar-los-tests-que-fallan","text":"Evita comentar los tests en la rama principal. Al comentar los tests, obtenemos una indicaci\u00f3n incorrecta del estado de la compilaci\u00f3n.","title":"Evitar comentar los tests que fallan"},{"location":"ci_cd/continuous-integration/#aplicacion-de-la-politica-de-rama","text":"Las pol\u00edticas de rama protegida deben ser configuradas en la rama principal para asegurar que las etapas de CI han pasado antes de comenzar una revisi\u00f3n de c\u00f3digo. Los aprobadores de la revisi\u00f3n del c\u00f3digo s\u00f3lo comenzar\u00e1n a revisar un PR una vez que la ejecuci\u00f3n de la canalizaci\u00f3n de CI haya pasado. Las compilaciones rotas deber\u00edan bloquear las revisiones de los PRs. Evita que los commits vayan directamente a la rama principal.","title":"Aplicaci\u00f3n de la pol\u00edtica de rama"},{"location":"ci_cd/continuous-integration/#estrategia-de-las-ramas","text":"Las ramas de release deber\u00edan activar autom\u00e1ticamente el despliegue de un artefacto de compilaci\u00f3n en su entorno de nube de destino. Puedes encontrar una gu\u00eda en el sitio de documentaci\u00f3n de Azure DevOps en la secci\u00f3n Manage deployments .","title":"Estrategia de las ramas"},{"location":"ci_cd/continuous-integration/#entrega-rapida-y-diaria","text":"En aras de la transparencia y de la comunicaci\u00f3n frecuente entre el equipo de desarrollo, animamos a los desarrolladores a que env\u00eden el c\u00f3digo a diario. Este enfoque proporciona visibilidad y acelera la programaci\u00f3n por pares en todo el equipo. Estos son algunos principios a tener en cuenta:","title":"Entrega r\u00e1pida y diaria"},{"location":"ci_cd/continuous-integration/#todos-comitean-al-repositorio-cada-dia","text":"El c\u00f3digo registrado al final del d\u00eda debe contener pruebas unitarias como m\u00ednimo. Ejecuta la compilaci\u00f3n localmente antes de hacer el check-in para evitar la saturaci\u00f3n de fallos de la canalizaci\u00f3n CI. Deber\u00edas verificar qu\u00e9 caus\u00f3 el error, y tratar de resolverlo tan pronto como sea posible. Animamos a los desarrolladores a seguir los principios lean de SDLC . A\u00edsle el trabajo en peque\u00f1as partes que se relacionen directamente con el valor del negocio y refactorice de forma incremental.","title":"Todos comitean al repositorio cada d\u00eda"},{"location":"ci_cd/continuous-integration/#entornos-aislados","text":"Uno de los objetivos clave de la validaci\u00f3n de la compilaci\u00f3n es aislar e identificar los fallos en los entornos de test y minimizar cualquier interrupci\u00f3n de producci\u00f3n. Las pruebas automatizadas E2E deben ejecutarse en un entorno que imite el entorno de producci\u00f3n (en la medida de lo posible).","title":"Entornos aislados"},{"location":"ci_cd/continuous-integration/#test-en-un-clon-de-produccion","text":"El entorno de producci\u00f3n debe duplicarse en un entorno de test (QA y/o Pre-Prod) como m\u00ednimo.","title":"Test en un clon de producci\u00f3n"},{"location":"ci_cd/continuous-integration/#las-actualizaciones-pr-desencadenan-releases-escalonados","text":"Los nuevos commits relacionados con un pull request deben desencadenar una compilaci\u00f3n / release en un entorno de integraci\u00f3n. El entorno de producci\u00f3n debe estar totalmente aislado de este proceso.","title":"Las actualizaciones PR desencadenan releases escalonados"},{"location":"ci_cd/continuous-integration/#promover-los-cambios-de-infraestructura-en-entornos-fijos","text":"Los cambios en la infraestructura como c\u00f3digo deben probarse en un entorno de integraci\u00f3n y promoverse a todos los entornos fijos, para luego migrar a producci\u00f3n sin que haya tiempo de inactividad para los usuarios del sistema.","title":"Promover los cambios de infraestructura en entornos fijos"},{"location":"ci_cd/continuous-integration/#tests-en-produccion","text":"Existen varios enfoques para llevar a cabo de forma segura las pruebas automatizadas para los despliegues de producci\u00f3n. Algunos de ellos pueden ser: Feature flagging A/B testing Traffic shifting","title":"Tests en producci\u00f3n"},{"location":"ci_cd/continuous-integration/#acceso-de-los-desarrolladores-a-los-ultimos-artefactos-de-la-version","text":"Nuestro flujo de trabajo de desarrollo debe permitir a los desarrolladores obtener, instalar y ejecutar el \u00faltimo ejecutable del sistema. Los ejecutables de la versi\u00f3n deben ser generados autom\u00e1ticamente como parte de nuestros procesos CI/CD.","title":"Acceso de los desarrolladores a los \u00faltimos artefactos de la versi\u00f3n"},{"location":"ci_cd/continuous-integration/#los-desarrolladores-pueden-acceder-al-ultimo-ejecutable","text":"El \u00faltimo ejecutable del sistema est\u00e1 disponible para todos los desarrolladores del equipo. Debe haber un lugar bien conocido donde los desarrolladores puedan hacer referencia al artefacto.","title":"Los desarrolladores pueden acceder al \u00faltimo ejecutable"},{"location":"ci_cd/continuous-integration/#observabilidad-de-la-integracion","text":"Los cambios de estado aplicados a la compilaci\u00f3n principal deben estar disponibles y ser comunicados a todo el equipo. La centralizaci\u00f3n de los logs y el estado de los fallos es esencial para los desarrolladores que investigan las compilaciones falladas. Recomendamos integrar Teams o Slack con las ejecuciones CI/CD, lo que ayuda a mantener al equipo continuamente conectado a los fallos y al estado de las compilaciones.","title":"Observabilidad de la integraci\u00f3n"},{"location":"ci_cd/continuous-integration/#dashboard-de-alto-nivel-de-integracion-continua","text":"Los proveedores de integraci\u00f3n continua modernos tienen la capacidad de consolidar e informar del estado de la compilaci\u00f3n en un dashboard determinado. Tu dashboard de integraci\u00f3n continua deber\u00eda ser capaz de correlacionar un fallo de compilaci\u00f3n con un commit de git.","title":"Dashboard de alto nivel de integraci\u00f3n continua"},{"location":"ci_cd/continuous-integration/#badge-del-estado-de-compilacion-en-el-readme-del-proyecto","text":"Deber\u00eda haber una badge del estado de la compilaci\u00f3n incluida en el README ra\u00edz del proyecto.","title":"Badge del estado de compilaci\u00f3n en el readme del proyecto"},{"location":"ci_cd/continuous-integration/#notificaciones-de-compilacion","text":"Tu proceso de CI deber\u00eda estar configurado para enviar notificaciones a plataformas de mensajer\u00eda como Teams / Slack una vez que la compilaci\u00f3n se complete. Recomendamos crear un canal separado para ayudar a consolidar y aislar estas notificaciones.","title":"Notificaciones de compilaci\u00f3n"},{"location":"ci_cd/continuous-integration/#recursos","text":"Mejores pr\u00e1cticas de integraci\u00f3n continua de Martin Fowler Pipelines multietapa de Azure DevOps Conceptos clave de Azure Pipeline Entornos de Azure Pipeline Artefactos en Azure Pipelines Permisos y roles de seguridad en Azure Pipeline Aprobaciones y comprobaciones del entorno de Azure Proveedor de Terraform Azure DevOps Gu\u00eda de inicio de Terraform con Azure Configuraci\u00f3n de Terraform Remote State Azure Terratest - Marco de infraestructura de unidades e integraci\u00f3n Documentaci\u00f3n Bicep Ejemplos de Bicep","title":"Recursos"},{"location":"ci_cd/dev-sec-ops/","text":"DevSecOps El concepto de DevSecOps DevSecOps o DevOps seguro trata de introducir la seguridad antes en el ciclo de vida del desarrollo de aplicaciones, minimizando as\u00ed el impacto de las vulnerabilidades y acercando la seguridad al equipo de desarrollo. Por qu\u00e9 Al adoptar la mentalidad de \"cambio a la izquierda\", DevSecOps alienta a las organizaciones a cerrar la brecha que a menudo existe entre los equipos de desarrollo y seguridad hasta el punto en que muchos de los procesos de seguridad est\u00e1n automatizados y son manejados de manera efectiva por el equipo de desarrollo. Pr\u00e1cticas de DevSecOps Esta secci\u00f3n cubre diferentes herramientas, frameworks y recursos que permiten la introducci\u00f3n de las mejores pr\u00e1cticas de DevSecOps a su proyecto en las primeras etapas de desarrollo. T\u00f3picos cubiertos: Escaneo de credenciales : inspecci\u00f3n autom\u00e1tica de un proyecto para garantizar que no se incluyan secretos en el c\u00f3digo fuente del proyecto. Rotaci\u00f3n de secretos : proceso automatizado mediante el cual el secreto, utilizado por la aplicaci\u00f3n, se actualiza y se reemplaza por un nuevo secreto. An\u00e1lisis de c\u00f3digo est\u00e1tico : analice el c\u00f3digo fuente o las versiones compiladas del c\u00f3digo para ayudar a encontrar fallas de seguridad. Pruebas de penetraci\u00f3n : un ataque simulado contra su aplicaci\u00f3n para verificar vulnerabilidades explotables. Escaneo de dependencias de contenedores : busca vulnerabilidades en sistemas operativos de contenedores, paquetes de lenguajes y dependencias de aplicaciones.","title":"DevSecOps"},{"location":"ci_cd/dev-sec-ops/#devsecops","text":"","title":"DevSecOps"},{"location":"ci_cd/dev-sec-ops/#el-concepto-de-devsecops","text":"DevSecOps o DevOps seguro trata de introducir la seguridad antes en el ciclo de vida del desarrollo de aplicaciones, minimizando as\u00ed el impacto de las vulnerabilidades y acercando la seguridad al equipo de desarrollo.","title":"El concepto de DevSecOps"},{"location":"ci_cd/dev-sec-ops/#por-que","text":"Al adoptar la mentalidad de \"cambio a la izquierda\", DevSecOps alienta a las organizaciones a cerrar la brecha que a menudo existe entre los equipos de desarrollo y seguridad hasta el punto en que muchos de los procesos de seguridad est\u00e1n automatizados y son manejados de manera efectiva por el equipo de desarrollo.","title":"Por qu\u00e9"},{"location":"ci_cd/dev-sec-ops/#practicas-de-devsecops","text":"Esta secci\u00f3n cubre diferentes herramientas, frameworks y recursos que permiten la introducci\u00f3n de las mejores pr\u00e1cticas de DevSecOps a su proyecto en las primeras etapas de desarrollo. T\u00f3picos cubiertos: Escaneo de credenciales : inspecci\u00f3n autom\u00e1tica de un proyecto para garantizar que no se incluyan secretos en el c\u00f3digo fuente del proyecto. Rotaci\u00f3n de secretos : proceso automatizado mediante el cual el secreto, utilizado por la aplicaci\u00f3n, se actualiza y se reemplaza por un nuevo secreto. An\u00e1lisis de c\u00f3digo est\u00e1tico : analice el c\u00f3digo fuente o las versiones compiladas del c\u00f3digo para ayudar a encontrar fallas de seguridad. Pruebas de penetraci\u00f3n : un ataque simulado contra su aplicaci\u00f3n para verificar vulnerabilidades explotables. Escaneo de dependencias de contenedores : busca vulnerabilidades en sistemas operativos de contenedores, paquetes de lenguajes y dependencias de aplicaciones.","title":"Pr\u00e1cticas de DevSecOps"},{"location":"ci_cd/dev-sec-ops/dependency_container_scanning/","text":"","title":"Dependency container scanning"},{"location":"ci_cd/dev-sec-ops/penetration_testing/","text":"","title":"Penetration testing"},{"location":"ci_cd/dev-sec-ops/static_code_analysis/","text":"","title":"Static code analysis"},{"location":"ci_cd/dev-sec-ops/gesti%C3%B3n%20de%20secretos/credential_scanning/","text":"","title":"Credential scanning"},{"location":"ci_cd/dev-sec-ops/gesti%C3%B3n%20de%20secretos/secrets_rotation/","text":"","title":"Secrets rotation"},{"location":"control%20de%20codigo%20fuente/","text":"","title":"Index"},{"location":"desarrollo%20%C3%A1gil/fundamentos/","text":"Fundamentos del desarrollo \u00e1gil Si usted es nuevo en el desarrollo \u00e1gil o si usted est\u00e1 buscando un repaso, esta secci\u00f3n proporciona enlaces a la informaci\u00f3n sobre las mejores pr\u00e1cticas para la gesti\u00f3n de backlog, ceremonias \u00e1giles, los roles dentro de Agile y sprints \u00e1giles. Qu\u00e9 es Agile Qu\u00e9 es el desarrollo \u00e1gil Gesti\u00f3n de Backlogs Ceremonias Roles Sprints","title":"Fundamentos del desarrollo \u00e1gil"},{"location":"desarrollo%20%C3%A1gil/fundamentos/#fundamentos-del-desarrollo-agil","text":"Si usted es nuevo en el desarrollo \u00e1gil o si usted est\u00e1 buscando un repaso, esta secci\u00f3n proporciona enlaces a la informaci\u00f3n sobre las mejores pr\u00e1cticas para la gesti\u00f3n de backlog, ceremonias \u00e1giles, los roles dentro de Agile y sprints \u00e1giles. Qu\u00e9 es Agile Qu\u00e9 es el desarrollo \u00e1gil Gesti\u00f3n de Backlogs Ceremonias Roles Sprints","title":"Fundamentos del desarrollo \u00e1gil"},{"location":"desarrollo%20%C3%A1gil/fundamentos/backlog_management/","text":"Conceptos b\u00e1sicos de gesti\u00f3n de backlogs de Producto y Sprint Esta secci\u00f3n tiene enlaces que le dirigen a las mejores pr\u00e1cticas para la gesti\u00f3n de los backlogs de producto y de sprint. Backlog del producto Sprint Backlog Criterios de aceptaci\u00f3n Definici\u00f3n de Hecho Definici\u00f3n de Listo Fundamentos de la estimaci\u00f3n en Agile","title":"Conceptos b\u00e1sicos de gesti\u00f3n de backlogs de Producto y Sprint"},{"location":"desarrollo%20%C3%A1gil/fundamentos/backlog_management/#conceptos-basicos-de-gestion-de-backlogs-de-producto-y-sprint","text":"Esta secci\u00f3n tiene enlaces que le dirigen a las mejores pr\u00e1cticas para la gesti\u00f3n de los backlogs de producto y de sprint. Backlog del producto Sprint Backlog Criterios de aceptaci\u00f3n Definici\u00f3n de Hecho Definici\u00f3n de Listo Fundamentos de la estimaci\u00f3n en Agile","title":"Conceptos b\u00e1sicos de gesti\u00f3n de backlogs de Producto y Sprint"},{"location":"desarrollo%20%C3%A1gil/fundamentos/ceremonies/","text":"Fundamentos de las Ceremonias \u00c1giles Esta secci\u00f3n tiene enlaces que lo dirigen a las mejores pr\u00e1cticas para llevar a cabo las ceremonias \u00e1giles. Planning Refinamiento Retrospectiva Sprint Review/Demo Daily Scrum","title":"Fundamentos de las Ceremonias \u00c1giles"},{"location":"desarrollo%20%C3%A1gil/fundamentos/ceremonies/#fundamentos-de-las-ceremonias-agiles","text":"Esta secci\u00f3n tiene enlaces que lo dirigen a las mejores pr\u00e1cticas para llevar a cabo las ceremonias \u00e1giles. Planning Refinamiento Retrospectiva Sprint Review/Demo Daily Scrum","title":"Fundamentos de las Ceremonias \u00c1giles"},{"location":"desarrollo%20%C3%A1gil/fundamentos/roles/","text":"Roles Agile/Scrum Esta secci\u00f3n tiene enlaces que dirigen a las definiciones de los roles tradicionales dentro de Agile/Scrum. Product Owner Scrum Master Equipo de desarrollo","title":"Roles Agile/Scrum"},{"location":"desarrollo%20%C3%A1gil/fundamentos/roles/#roles-agilescrum","text":"Esta secci\u00f3n tiene enlaces que dirigen a las definiciones de los roles tradicionales dentro de Agile/Scrum. Product Owner Scrum Master Equipo de desarrollo","title":"Roles Agile/Scrum"},{"location":"desarrollo%20%C3%A1gil/fundamentos/sprint/","text":"Sprint Esta secci\u00f3n tiene enlaces que le dirigen a las mejores pr\u00e1cticas en lo que respecta a lo que es un sprint dentro de agile y las pr\u00e1cticas en torno al sprint. Planificaci\u00f3n del Sprint y el Sprint Backlog Ejecuci\u00f3n del Sprint y la Daily Revisi\u00f3n del Sprint y Retrospectiva del Sprint Incremento","title":"Sprint"},{"location":"desarrollo%20%C3%A1gil/fundamentos/sprint/#sprint","text":"Esta secci\u00f3n tiene enlaces que le dirigen a las mejores pr\u00e1cticas en lo que respecta a lo que es un sprint dentro de agile y las pr\u00e1cticas en torno al sprint. Planificaci\u00f3n del Sprint y el Sprint Backlog Ejecuci\u00f3n del Sprint y la Daily Revisi\u00f3n del Sprint y Retrospectiva del Sprint Incremento","title":"Sprint"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/","text":"Temas avanzados del desarrollo \u00e1gil Documentaci\u00f3n que le ayudar\u00e1 a ir m\u00e1s all\u00e1 de los fundamentos y las expectativas b\u00e1sicas. Gesti\u00f3n de Backlogs Colaboraci\u00f3n Organizaci\u00f3n efectiva Acuerdos del equipo","title":"Temas avanzados del desarrollo \u00e1gil"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/#temas-avanzados-del-desarrollo-agil","text":"Documentaci\u00f3n que le ayudar\u00e1 a ir m\u00e1s all\u00e1 de los fundamentos y las expectativas b\u00e1sicas. Gesti\u00f3n de Backlogs Colaboraci\u00f3n Organizaci\u00f3n efectiva Acuerdos del equipo","title":"Temas avanzados del desarrollo \u00e1gil"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/","text":"Acuerdos de equipo Definici\u00f3n de Hecho Definici\u00f3n de Listo Acuerdos de Trabajo Manifiesto del equipo","title":"Acuerdos de equipo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/#acuerdos-de-equipo","text":"Definici\u00f3n de Hecho Definici\u00f3n de Listo Acuerdos de Trabajo Manifiesto del equipo","title":"Acuerdos de equipo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-done/","text":"Definici\u00f3n de Hecho Para cerrar una historia de usuario, un sprint o un hito es importante verificar que las tareas est\u00e1n completas. El equipo de desarrollo debe decidir conjuntamente cu\u00e1l es su definici\u00f3n de Hecho y documentarla en el proyecto. A continuaci\u00f3n se presentan algunos ejemplos de comprobaciones para verificar que la historia de usuario, el sprint o la tarea se han completado. Feature/ Historia del usuario Se cumplen los criterios de aceptaci\u00f3n Se ha completado la refactorizaci\u00f3n El c\u00f3digo se construye sin errores Las pruebas unitarias se escriben y pasan Las pruebas unitarias existentes se superan Se registran suficientes diagn\u00f3sticos/telemetr\u00eda Se ha completado la revisi\u00f3n del c\u00f3digo Se actualiza la documentaci\u00f3n El feature se fusiona con la rama de desarrollo El feature es aprobado por el PO Objetivo del sprint Se cumple la definici\u00f3n de Hecho para todas las historias de usuario incluidas en el sprint Se actualiza el backlog del producto Se superan las pruebas funcionales y de integraci\u00f3n Pruebas de rendimiento superadas Las pruebas de extremo a extremo se superan Se corrigen todos los errores Release/hito C\u00f3digo completo (se cumplen los objetivos de los sprints) El PO marca la versi\u00f3n como lista para el despliegue en producci\u00f3n","title":"Definici\u00f3n de Hecho"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-done/#definicion-de-hecho","text":"Para cerrar una historia de usuario, un sprint o un hito es importante verificar que las tareas est\u00e1n completas. El equipo de desarrollo debe decidir conjuntamente cu\u00e1l es su definici\u00f3n de Hecho y documentarla en el proyecto. A continuaci\u00f3n se presentan algunos ejemplos de comprobaciones para verificar que la historia de usuario, el sprint o la tarea se han completado.","title":"Definici\u00f3n de Hecho"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-done/#feature-historia-del-usuario","text":"Se cumplen los criterios de aceptaci\u00f3n Se ha completado la refactorizaci\u00f3n El c\u00f3digo se construye sin errores Las pruebas unitarias se escriben y pasan Las pruebas unitarias existentes se superan Se registran suficientes diagn\u00f3sticos/telemetr\u00eda Se ha completado la revisi\u00f3n del c\u00f3digo Se actualiza la documentaci\u00f3n El feature se fusiona con la rama de desarrollo El feature es aprobado por el PO","title":"Feature/ Historia del usuario"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-done/#objetivo-del-sprint","text":"Se cumple la definici\u00f3n de Hecho para todas las historias de usuario incluidas en el sprint Se actualiza el backlog del producto Se superan las pruebas funcionales y de integraci\u00f3n Pruebas de rendimiento superadas Las pruebas de extremo a extremo se superan Se corrigen todos los errores","title":"Objetivo del sprint"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-done/#releasehito","text":"C\u00f3digo completo (se cumplen los objetivos de los sprints) El PO marca la versi\u00f3n como lista para el despliegue en producci\u00f3n","title":"Release/hito"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/","text":"Definici\u00f3n de Listo Cuando el equipo de desarrollo elige una historia de usuario de la parte superior del backlog, la historia debe tener suficiente detalle para estimar el trabajo necesario para completarla dentro del sprint. Si tiene suficiente detalle para estimar, est\u00e1 lista para ser desarrollada. Qu\u00e9 es La definici\u00f3n de Listo es el acuerdo realizado por el equipo de scrum en torno a cu\u00e1n completa debe estar una historia de usuario para ser seleccionada como candidata a ser estimada en la planificaci\u00f3n del sprint. Se puede codificar como una lista de comprobaci\u00f3n en las historias de usuario utilizando las plantillas de temas de GitHub o las plantillas de elementos de trabajo de Azure DevOps . Puede entenderse como una lista de comprobaci\u00f3n que ayuda al Product Owner a asegurarse de que la historia de usuario que ha escrito contiene todos los detalles necesarios para que el equipo de scrum entienda el trabajo que hay que hacer. Ejemplos: \u00bfTiene la descripci\u00f3n los detalles, incluidos los valores de entrada necesarios para implementar la historia de usuario? \u00bfTiene la historia de usuario criterios de aceptaci\u00f3n claros y completos? \u00bfLa historia de usuario responde a la necesidad de la empresa? \u00bfPodemos medir los criterios de aceptaci\u00f3n? \u00bfEs la historia de usuario lo suficientemente peque\u00f1a como para ser implementada en poco tiempo, pero lo suficientemente grande como para proporcionar valor al cliente? \u00bfEst\u00e1 bloqueada la historia de usuario? Por ejemplo, \u00bfdepende de algo de lo siguiente? La finalizaci\u00f3n de un trabajo pendiente Un entregable proporcionado por otro equipo Qui\u00e9n la escribe La lista de comprobaci\u00f3n de la disponibilidad puede ser redactada por un Product Owner de acuerdo con el equipo de desarrollo. Cu\u00e1ndo debe actualizarse una definici\u00f3n de listo Actualice o cambie la definici\u00f3n de listo cada vez que el equipo de scrum observe que falta informaci\u00f3n en las historias de usuario que impacta recurrentemente en la planificaci\u00f3n. Qu\u00e9 debe evitarse La lista de verificaci\u00f3n de listo debe contener elementos que se apliquen ampliamente. No incluya elementos o detalles que s\u00f3lo se apliquen a una o dos historias de usuario. Esto puede convertirse en una sobrecarga al escribir las historias de usuario. C\u00f3mo preparar las historias En el caso de que el trabajo m\u00e1s prioritario a\u00fan no est\u00e9 listo, todav\u00eda puede ser posible avanzar. He aqu\u00ed algunas estrategias que pueden ayudar: Las sesiones de refinamiento del backlog son un buen momento para validar que las historias de usuario de alta prioridad tengan una descripci\u00f3n clara, criterios de aceptaci\u00f3n y un valor de negocio demostrable. Tambi\u00e9n es un buen momento para desglosar las historias grandes que probablemente no se puedan completar en un solo sprint. Las sesiones de priorizaci\u00f3n son un buen momento para priorizar las historias de usuario que desbloquean otro trabajo de alta prioridad bloqueado. Las historias de usuario bloqueadas a menudo se pueden desglosar de manera que se desbloquee una parte del alcance de las historias originales. Esta es una buena manera de avanzar incluso cuando parte del trabajo est\u00e1 bloqueado.","title":"Definici\u00f3n de Listo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#definicion-de-listo","text":"Cuando el equipo de desarrollo elige una historia de usuario de la parte superior del backlog, la historia debe tener suficiente detalle para estimar el trabajo necesario para completarla dentro del sprint. Si tiene suficiente detalle para estimar, est\u00e1 lista para ser desarrollada.","title":"Definici\u00f3n de Listo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#que-es","text":"La definici\u00f3n de Listo es el acuerdo realizado por el equipo de scrum en torno a cu\u00e1n completa debe estar una historia de usuario para ser seleccionada como candidata a ser estimada en la planificaci\u00f3n del sprint. Se puede codificar como una lista de comprobaci\u00f3n en las historias de usuario utilizando las plantillas de temas de GitHub o las plantillas de elementos de trabajo de Azure DevOps . Puede entenderse como una lista de comprobaci\u00f3n que ayuda al Product Owner a asegurarse de que la historia de usuario que ha escrito contiene todos los detalles necesarios para que el equipo de scrum entienda el trabajo que hay que hacer. Ejemplos: \u00bfTiene la descripci\u00f3n los detalles, incluidos los valores de entrada necesarios para implementar la historia de usuario? \u00bfTiene la historia de usuario criterios de aceptaci\u00f3n claros y completos? \u00bfLa historia de usuario responde a la necesidad de la empresa? \u00bfPodemos medir los criterios de aceptaci\u00f3n? \u00bfEs la historia de usuario lo suficientemente peque\u00f1a como para ser implementada en poco tiempo, pero lo suficientemente grande como para proporcionar valor al cliente? \u00bfEst\u00e1 bloqueada la historia de usuario? Por ejemplo, \u00bfdepende de algo de lo siguiente? La finalizaci\u00f3n de un trabajo pendiente Un entregable proporcionado por otro equipo","title":"Qu\u00e9 es"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#quien-la-escribe","text":"La lista de comprobaci\u00f3n de la disponibilidad puede ser redactada por un Product Owner de acuerdo con el equipo de desarrollo.","title":"Qui\u00e9n la escribe"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#cuando-debe-actualizarse-una-definicion-de-listo","text":"Actualice o cambie la definici\u00f3n de listo cada vez que el equipo de scrum observe que falta informaci\u00f3n en las historias de usuario que impacta recurrentemente en la planificaci\u00f3n.","title":"Cu\u00e1ndo debe actualizarse una definici\u00f3n de listo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#que-debe-evitarse","text":"La lista de verificaci\u00f3n de listo debe contener elementos que se apliquen ampliamente. No incluya elementos o detalles que s\u00f3lo se apliquen a una o dos historias de usuario. Esto puede convertirse en una sobrecarga al escribir las historias de usuario.","title":"Qu\u00e9 debe evitarse"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/definition-of-ready/#como-preparar-las-historias","text":"En el caso de que el trabajo m\u00e1s prioritario a\u00fan no est\u00e9 listo, todav\u00eda puede ser posible avanzar. He aqu\u00ed algunas estrategias que pueden ayudar: Las sesiones de refinamiento del backlog son un buen momento para validar que las historias de usuario de alta prioridad tengan una descripci\u00f3n clara, criterios de aceptaci\u00f3n y un valor de negocio demostrable. Tambi\u00e9n es un buen momento para desglosar las historias grandes que probablemente no se puedan completar en un solo sprint. Las sesiones de priorizaci\u00f3n son un buen momento para priorizar las historias de usuario que desbloquean otro trabajo de alta prioridad bloqueado. Las historias de usuario bloqueadas a menudo se pueden desglosar de manera que se desbloquee una parte del alcance de las historias originales. Esta es una buena manera de avanzar incluso cuando parte del trabajo est\u00e1 bloqueado.","title":"C\u00f3mo preparar las historias"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/","text":"Manifiesto del equipo Introducci\u00f3n Cada nuevo miembro del equipo requiere una fase de introducci\u00f3n y transferencia de conocimientos antes de comenzar un proyecto. Completar esta fase sobre las normas lleva tiempo, pero es necesario para empezar a aumentar la curva de aprendizaje de cada nuevo miembro. Un manifiesto del equipo es un documento \u00e1gil de una p\u00e1gina entre los miembros del equipo que resume los principios y valores b\u00e1sicos del equipo y cuyo objetivo es proporcionar un consenso sobre las expectativas t\u00e9cnicas de cada miembro del equipo con el fin de ofrecer un resultado de alta calidad al final de cada proyecto. Su objetivo es reducir el tiempo para establecer las expectativas correctas sin necesidad de organizar largas reuniones y proporcionar un consenso entre los miembros del equipo para responder a la pregunta: \"\u00bfC\u00f3mo desarrolla el nuevo equipo el software?\" - cubriendo todos los fundamentos de la ingenier\u00eda y los temas de excelencia, como el proceso de lanzamiento, la codificaci\u00f3n limpia y las pruebas. C\u00f3mo construir un manifiesto de equipo Se recomienda que el manifiesto del equipo sea lo m\u00e1s sencillo posible, por lo que es preferible un documento sencillo de una p\u00e1gina que no incluya referencias ni enlaces. Si es necesario proporcionar conocimientos sobre determinados temas, la forma de hacerlo es impartir almuerzos de trabajo, katas t\u00e9cnicas, pr\u00e1cticas de equipo, documentaciones y otros m\u00e1s adelante. Algunos puntos importantes sobre el manifiesto del equipo: El manifiesto del equipo lo construye el propio equipo de desarrollo Debe cubrir todos los puntos de ingenier\u00eda t\u00e9cnica necesarios para la excelencia, as\u00ed como los elementos de la mentalidad de agilidad del comportamiento que el equipo considere relevantes Su objetivo es dar un entendimiento com\u00fan sobre la experiencia, las pr\u00e1cticas y/o la mentalidad deseadas dentro del equipo En funci\u00f3n de las necesidades del equipo y de los resultados retrospectivos, puede modificarse a lo largo del tiempo. Nuestro objetivo es la calidad por encima de la cantidad, y un software bien elaborado, as\u00ed como un entorno c\u00f3modo/transparente en el que cada miembro del equipo pueda alcanzar su m\u00e1ximo potencial. La diferencia entre el manifiesto del equipo y otros documentos del equipo es que se utiliza para dar un breve resumen de las expectativas en torno a la forma de trabajo t\u00e9cnico y la mentalidad apoyada en el equipo, antes de que comience el c\u00f3digo con los sprints. A continuaci\u00f3n, puede encontrar algunos de los temas, entre otros, que muchos equipos tocan durante los proyectos: Propiedad colectiva: \u00bfEl equipo es due\u00f1o del c\u00f3digo y no los individuos? \u00bfCu\u00e1l es la expectativa? Colaboraci\u00f3n: Cualquier afirmaci\u00f3n preferida sobre c\u00f3mo quiere colaborar el equipo Transparencia: Una simple declaraci\u00f3n de que es un valor \"imprescindible\" para el equipo y, si se prefiere, c\u00f3mo lo proporciona el equipo: reuniones, retrospectiva, mecanismos de retroalimentaci\u00f3n, etc. Herramientas: \u00bfQu\u00e9 herramientas como Git, VS Code LiveShare, etc. se est\u00e1n utilizando? \u00bfCu\u00e1l es la definici\u00f3n del mejor uso que se espera de ellas? Dimensionamiento de los PRs: \u00bfQu\u00e9 prefiere el equipo en los PR? Branching: Estrategia y normas de branching del equipo Est\u00e1ndares de commit: Formato preferido en los mensajes de commit, reglas y m\u00e1s C\u00f3digo limpio: \u00bfSigue el equipo los principios de c\u00f3digo limpio? Programaci\u00f3n por parejas/enjambre: \u00bfEl equipo aplica la programaci\u00f3n por parejas/enjambre? En caso afirmativo, \u00bfqu\u00e9 estilos de programaci\u00f3n son adecuados para el equipo? Proceso de release: Principios sobre el proceso de release, como patrones de calidad, proceso de revisi\u00f3n, etc. Revisi\u00f3n del c\u00f3digo: Cualquier regla para la revisi\u00f3n del c\u00f3digo, como el n\u00famero m\u00ednimo de revisores, las reglas del equipo, etc. Preparaci\u00f3n: \u00bfC\u00f3mo se refinar\u00e1 el backlog? \u00bfC\u00f3mo garantizamos una definici\u00f3n clara de lo hecho y de los criterios de aceptaci\u00f3n? Cobertura de las pruebas: \u00bfHay alg\u00fan n\u00famero, porcentaje o medida esperada? Dimensiones de las pruebas: Pruebas necesarias para un software de alta calidad, por ejemplo: unitarias, integraci\u00f3n, funcional, rendimiento, regresi\u00f3n, aceptaci\u00f3n Proceso de compilaci\u00f3n: Declaraci\u00f3n clara de donde el c\u00f3digo y bajo qu\u00e9 condiciones el c\u00f3digo debe trabajar. Por ejemplo: OS, DevOps, dependencia de la herramienta Correcci\u00f3n de errores: Las reglas de correcci\u00f3n de errores en el equipo. Ejemplo: personas de contacto, adjuntar PR, etc. Deuda t\u00e9cnica: \u00bfC\u00f3mo la gestiona el equipo? Refactorizaci\u00f3n: \u00bfC\u00f3mo lo gestiona el equipo? Documentaci\u00f3n \u00e1gil: \u00bfEl equipo quiere utilizar m\u00e1s diagramas y tablas que art\u00edculos detallados de la KB? Documentaci\u00f3n eficiente: \u00bfCu\u00e1ndo es necesaria? \u00bfEs un prerrequisito para completar las tareas/PRs, etc.? Herramientas Generalmente las sesiones de equipo son suficientes para construir un manifiesto y tener un consenso en torno a \u00e9l, y si hay necesidad de mejorarlo de forma estructurada, se puede utilizar el Manifiesto de Equipo o cualquier herramienta de retrospectiva. Recursos Construyendo un Manifiesto de Equipo Agilidad t\u00e9cnica","title":"Manifiesto del equipo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/#manifiesto-del-equipo","text":"","title":"Manifiesto del equipo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/#introduccion","text":"Cada nuevo miembro del equipo requiere una fase de introducci\u00f3n y transferencia de conocimientos antes de comenzar un proyecto. Completar esta fase sobre las normas lleva tiempo, pero es necesario para empezar a aumentar la curva de aprendizaje de cada nuevo miembro. Un manifiesto del equipo es un documento \u00e1gil de una p\u00e1gina entre los miembros del equipo que resume los principios y valores b\u00e1sicos del equipo y cuyo objetivo es proporcionar un consenso sobre las expectativas t\u00e9cnicas de cada miembro del equipo con el fin de ofrecer un resultado de alta calidad al final de cada proyecto. Su objetivo es reducir el tiempo para establecer las expectativas correctas sin necesidad de organizar largas reuniones y proporcionar un consenso entre los miembros del equipo para responder a la pregunta: \"\u00bfC\u00f3mo desarrolla el nuevo equipo el software?\" - cubriendo todos los fundamentos de la ingenier\u00eda y los temas de excelencia, como el proceso de lanzamiento, la codificaci\u00f3n limpia y las pruebas.","title":"Introducci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/#como-construir-un-manifiesto-de-equipo","text":"Se recomienda que el manifiesto del equipo sea lo m\u00e1s sencillo posible, por lo que es preferible un documento sencillo de una p\u00e1gina que no incluya referencias ni enlaces. Si es necesario proporcionar conocimientos sobre determinados temas, la forma de hacerlo es impartir almuerzos de trabajo, katas t\u00e9cnicas, pr\u00e1cticas de equipo, documentaciones y otros m\u00e1s adelante. Algunos puntos importantes sobre el manifiesto del equipo: El manifiesto del equipo lo construye el propio equipo de desarrollo Debe cubrir todos los puntos de ingenier\u00eda t\u00e9cnica necesarios para la excelencia, as\u00ed como los elementos de la mentalidad de agilidad del comportamiento que el equipo considere relevantes Su objetivo es dar un entendimiento com\u00fan sobre la experiencia, las pr\u00e1cticas y/o la mentalidad deseadas dentro del equipo En funci\u00f3n de las necesidades del equipo y de los resultados retrospectivos, puede modificarse a lo largo del tiempo. Nuestro objetivo es la calidad por encima de la cantidad, y un software bien elaborado, as\u00ed como un entorno c\u00f3modo/transparente en el que cada miembro del equipo pueda alcanzar su m\u00e1ximo potencial. La diferencia entre el manifiesto del equipo y otros documentos del equipo es que se utiliza para dar un breve resumen de las expectativas en torno a la forma de trabajo t\u00e9cnico y la mentalidad apoyada en el equipo, antes de que comience el c\u00f3digo con los sprints. A continuaci\u00f3n, puede encontrar algunos de los temas, entre otros, que muchos equipos tocan durante los proyectos: Propiedad colectiva: \u00bfEl equipo es due\u00f1o del c\u00f3digo y no los individuos? \u00bfCu\u00e1l es la expectativa? Colaboraci\u00f3n: Cualquier afirmaci\u00f3n preferida sobre c\u00f3mo quiere colaborar el equipo Transparencia: Una simple declaraci\u00f3n de que es un valor \"imprescindible\" para el equipo y, si se prefiere, c\u00f3mo lo proporciona el equipo: reuniones, retrospectiva, mecanismos de retroalimentaci\u00f3n, etc. Herramientas: \u00bfQu\u00e9 herramientas como Git, VS Code LiveShare, etc. se est\u00e1n utilizando? \u00bfCu\u00e1l es la definici\u00f3n del mejor uso que se espera de ellas? Dimensionamiento de los PRs: \u00bfQu\u00e9 prefiere el equipo en los PR? Branching: Estrategia y normas de branching del equipo Est\u00e1ndares de commit: Formato preferido en los mensajes de commit, reglas y m\u00e1s C\u00f3digo limpio: \u00bfSigue el equipo los principios de c\u00f3digo limpio? Programaci\u00f3n por parejas/enjambre: \u00bfEl equipo aplica la programaci\u00f3n por parejas/enjambre? En caso afirmativo, \u00bfqu\u00e9 estilos de programaci\u00f3n son adecuados para el equipo? Proceso de release: Principios sobre el proceso de release, como patrones de calidad, proceso de revisi\u00f3n, etc. Revisi\u00f3n del c\u00f3digo: Cualquier regla para la revisi\u00f3n del c\u00f3digo, como el n\u00famero m\u00ednimo de revisores, las reglas del equipo, etc. Preparaci\u00f3n: \u00bfC\u00f3mo se refinar\u00e1 el backlog? \u00bfC\u00f3mo garantizamos una definici\u00f3n clara de lo hecho y de los criterios de aceptaci\u00f3n? Cobertura de las pruebas: \u00bfHay alg\u00fan n\u00famero, porcentaje o medida esperada? Dimensiones de las pruebas: Pruebas necesarias para un software de alta calidad, por ejemplo: unitarias, integraci\u00f3n, funcional, rendimiento, regresi\u00f3n, aceptaci\u00f3n Proceso de compilaci\u00f3n: Declaraci\u00f3n clara de donde el c\u00f3digo y bajo qu\u00e9 condiciones el c\u00f3digo debe trabajar. Por ejemplo: OS, DevOps, dependencia de la herramienta Correcci\u00f3n de errores: Las reglas de correcci\u00f3n de errores en el equipo. Ejemplo: personas de contacto, adjuntar PR, etc. Deuda t\u00e9cnica: \u00bfC\u00f3mo la gestiona el equipo? Refactorizaci\u00f3n: \u00bfC\u00f3mo lo gestiona el equipo? Documentaci\u00f3n \u00e1gil: \u00bfEl equipo quiere utilizar m\u00e1s diagramas y tablas que art\u00edculos detallados de la KB? Documentaci\u00f3n eficiente: \u00bfCu\u00e1ndo es necesaria? \u00bfEs un prerrequisito para completar las tareas/PRs, etc.?","title":"C\u00f3mo construir un manifiesto de equipo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/#herramientas","text":"Generalmente las sesiones de equipo son suficientes para construir un manifiesto y tener un consenso en torno a \u00e9l, y si hay necesidad de mejorarlo de forma estructurada, se puede utilizar el Manifiesto de Equipo o cualquier herramienta de retrospectiva.","title":"Herramientas"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/team-manifesto/#recursos","text":"Construyendo un Manifiesto de Equipo Agilidad t\u00e9cnica","title":"Recursos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/","text":"Acuerdos de trabajo Un acuerdo de trabajo es un documento, o un conjunto de documentos que describen c\u00f3mo trabajamos juntos como equipo y cu\u00e1les son nuestras expectativas y principios. El acuerdo de trabajo lo crea el equipo al principio del proyecto y se guarda en el repositorio para que est\u00e9 disponible para todos los que trabajan en el proyecto. Los siguientes son ejemplos de secciones y puntos que pueden formar parte de un acuerdo de trabajo, pero cada equipo debe componer el suyo propio y ajustar los tiempos, los canales de comunicaci\u00f3n, las pol\u00edticas de nomenclatura de las ramas, etc., a las necesidades de su equipo. General Trabajamos como un solo equipo hacia un objetivo com\u00fan y un alcance claro Nos aseguramos de que la voz de todos sea escuchada y atendida Mostramos a todos los miembros del equipo el mismo respeto Trabajamos como un equipo para tener expectativas comunes de entrega t\u00e9cnica que se documentan en un Manifiesto del Equipo . Nos aseguramos de repartir nuestra experiencia y habilidades en el equipo, de modo que no se dependa de una sola persona para una sola habilidad Comunicaci\u00f3n Comunicamos toda la informaci\u00f3n relevante para el equipo a trav\u00e9s del canal de Teams del proyecto A\u00f1adimos todos los spikes t\u00e9cnicos, estudios comerciales y otra documentaci\u00f3n t\u00e9cnica al repositorio del proyecto a trav\u00e9s de revisiones de dise\u00f1o as\u00edncronas en los PRs Calidad y no cantidad Acordamos una Definici\u00f3n de Hecho para nuestras historias de usuario y sprints y nos regimos por ella. Seguimos las mejores pr\u00e1cticas de ingenier\u00eda, como el CoE Engineering Playbook Ritmo Scrum Actividad Cu\u00e1ndo Duraci\u00f3n Qui\u00e9n Responsable Objetivo Daily Mar-Vie 9:30AM 15 min Todos Scrum Master Lo que se ha logrado, los pr\u00f3ximos pasos, los bloqueos Demo Lunes 9:30AM 1 hora Todos L\u00edder del desarrollo Presentar el trabajo realizado y dar por finalizada de la historia de usuario Retro Lunes 10:30AM 1 hora Todos Scrum Master Equipos de Desarrollo comparten aprendizajes y lo que se puede mejorar Planning Lunes 11:30AM 1 hora Todos PO Dimensionar y planificar las historias de usuario para el sprint Creaci\u00f3n de tareas despu\u00e9s de la planning - Todos Equipo de desarrollo Crea tareas para aclarar y determinar la velocidad Refinamiento del backlog Mi\u00e9rcoles 2PM 1 hora L\u00edder del desarrollo, PO PO Preparar el siguiente sprint y asegurar que las historias est\u00e9n listas para el siguiente sprint Scrum Master / L\u00edder de proceso El L\u00edder de Proceso es responsable de liderar cualquier pr\u00e1ctica de scrum o \u00e1gil para permitir que el proyecto avance. Facilitar las dailys y responsabilizar al equipo de su asistencia y participaci\u00f3n. Mantener la reuni\u00f3n en movimiento como se describe en la p\u00e1gina de Standup del proyecto. Asegurar de que todos los elementos est\u00e9n documentados y de que cada uno tenga un propietario y una fecha de vencimiento y haga un seguimiento de las cuestiones abiertas. Anotar lo que sea necesario despu\u00e9s de la planificaci\u00f3n/reuni\u00f3n. Asegurar de que los elementos se trasladan al parking lot y asegurar el seguimiento posterior. Mantener una ubicaci\u00f3n que muestre el trabajo y el estado del equipo y eliminar los impedimentos que lo bloquean. Hacer que el equipo se responsabilice de los resultados de forma solidaria. Asegurar de que la documentaci\u00f3n del proyecto est\u00e1 actualizada. Garantizar el seguimiento de los elementos de las retros y de las reuniones diarias. Facilitar la retrospectiva del sprint. Entrenar al Product Owner y al equipo en el proceso, seg\u00fan sea necesario. Gesti\u00f3n del Backlog Trabajamos juntos en una Definici\u00f3n de Listo y todas las historias de usuario asignadas a un sprint tienen que seguir esto Comunicamos en qu\u00e9 estamos trabajando a trav\u00e9s del tablero Nos asignamos una tarea cuando estamos listos para trabajar en ella (no antes) y la pasamos a activa Capturamos cualquier trabajo que hagamos relacionado con el proyecto en una historia de usuario/tarea Cerramos nuestras tareas/historias de usuario s\u00f3lo cuando est\u00e1n hechas (como se describe en la Definici\u00f3n de Hecho ) Trabajamos con el PM si queremos a\u00f1adir una nueva historia de usuario al sprint Si a\u00f1adimos nuevas tareas al tablero, nos aseguramos de que coinciden con los criterios de aceptaci\u00f3n de la historia de usuario. Si no coincide con los criterios de aceptaci\u00f3n, debemos discutir con el PM para ver si necesitamos una nueva historia de usuario para la tarea o si debemos ajustar los criterios de aceptaci\u00f3n. Gesti\u00f3n del c\u00f3digo Seguimos la convenci\u00f3n de nomenclatura de ramas de git flow para las ramas e identificamos el n\u00famero de la tarea, por ejemplo, feature/123-add-working-agreement Fusionamos todo el c\u00f3digo en las ramas principales a trav\u00e9s de PRs Todos los PR son revisados por lo menos por una persona Siempre revisamos los PRs existentes antes de empezar a trabajar en una nueva tarea Revisamos los PRs abiertos al final del stand-up para asegurarnos de que todos los PRs tienen revisores. Tratamos la documentaci\u00f3n como c\u00f3digo y aplicamos los mismos est\u00e1ndares a Markdown que al c\u00f3digo","title":"Acuerdos de trabajo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#acuerdos-de-trabajo","text":"Un acuerdo de trabajo es un documento, o un conjunto de documentos que describen c\u00f3mo trabajamos juntos como equipo y cu\u00e1les son nuestras expectativas y principios. El acuerdo de trabajo lo crea el equipo al principio del proyecto y se guarda en el repositorio para que est\u00e9 disponible para todos los que trabajan en el proyecto. Los siguientes son ejemplos de secciones y puntos que pueden formar parte de un acuerdo de trabajo, pero cada equipo debe componer el suyo propio y ajustar los tiempos, los canales de comunicaci\u00f3n, las pol\u00edticas de nomenclatura de las ramas, etc., a las necesidades de su equipo.","title":"Acuerdos de trabajo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#general","text":"Trabajamos como un solo equipo hacia un objetivo com\u00fan y un alcance claro Nos aseguramos de que la voz de todos sea escuchada y atendida Mostramos a todos los miembros del equipo el mismo respeto Trabajamos como un equipo para tener expectativas comunes de entrega t\u00e9cnica que se documentan en un Manifiesto del Equipo . Nos aseguramos de repartir nuestra experiencia y habilidades en el equipo, de modo que no se dependa de una sola persona para una sola habilidad","title":"General"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#comunicacion","text":"Comunicamos toda la informaci\u00f3n relevante para el equipo a trav\u00e9s del canal de Teams del proyecto A\u00f1adimos todos los spikes t\u00e9cnicos, estudios comerciales y otra documentaci\u00f3n t\u00e9cnica al repositorio del proyecto a trav\u00e9s de revisiones de dise\u00f1o as\u00edncronas en los PRs","title":"Comunicaci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#calidad-y-no-cantidad","text":"Acordamos una Definici\u00f3n de Hecho para nuestras historias de usuario y sprints y nos regimos por ella. Seguimos las mejores pr\u00e1cticas de ingenier\u00eda, como el CoE Engineering Playbook","title":"Calidad y no cantidad"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#ritmo-scrum","text":"Actividad Cu\u00e1ndo Duraci\u00f3n Qui\u00e9n Responsable Objetivo Daily Mar-Vie 9:30AM 15 min Todos Scrum Master Lo que se ha logrado, los pr\u00f3ximos pasos, los bloqueos Demo Lunes 9:30AM 1 hora Todos L\u00edder del desarrollo Presentar el trabajo realizado y dar por finalizada de la historia de usuario Retro Lunes 10:30AM 1 hora Todos Scrum Master Equipos de Desarrollo comparten aprendizajes y lo que se puede mejorar Planning Lunes 11:30AM 1 hora Todos PO Dimensionar y planificar las historias de usuario para el sprint Creaci\u00f3n de tareas despu\u00e9s de la planning - Todos Equipo de desarrollo Crea tareas para aclarar y determinar la velocidad Refinamiento del backlog Mi\u00e9rcoles 2PM 1 hora L\u00edder del desarrollo, PO PO Preparar el siguiente sprint y asegurar que las historias est\u00e9n listas para el siguiente sprint","title":"Ritmo Scrum"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#scrum-master-lider-de-proceso","text":"El L\u00edder de Proceso es responsable de liderar cualquier pr\u00e1ctica de scrum o \u00e1gil para permitir que el proyecto avance. Facilitar las dailys y responsabilizar al equipo de su asistencia y participaci\u00f3n. Mantener la reuni\u00f3n en movimiento como se describe en la p\u00e1gina de Standup del proyecto. Asegurar de que todos los elementos est\u00e9n documentados y de que cada uno tenga un propietario y una fecha de vencimiento y haga un seguimiento de las cuestiones abiertas. Anotar lo que sea necesario despu\u00e9s de la planificaci\u00f3n/reuni\u00f3n. Asegurar de que los elementos se trasladan al parking lot y asegurar el seguimiento posterior. Mantener una ubicaci\u00f3n que muestre el trabajo y el estado del equipo y eliminar los impedimentos que lo bloquean. Hacer que el equipo se responsabilice de los resultados de forma solidaria. Asegurar de que la documentaci\u00f3n del proyecto est\u00e1 actualizada. Garantizar el seguimiento de los elementos de las retros y de las reuniones diarias. Facilitar la retrospectiva del sprint. Entrenar al Product Owner y al equipo en el proceso, seg\u00fan sea necesario.","title":"Scrum Master / L\u00edder de proceso"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#gestion-del-backlog","text":"Trabajamos juntos en una Definici\u00f3n de Listo y todas las historias de usuario asignadas a un sprint tienen que seguir esto Comunicamos en qu\u00e9 estamos trabajando a trav\u00e9s del tablero Nos asignamos una tarea cuando estamos listos para trabajar en ella (no antes) y la pasamos a activa Capturamos cualquier trabajo que hagamos relacionado con el proyecto en una historia de usuario/tarea Cerramos nuestras tareas/historias de usuario s\u00f3lo cuando est\u00e1n hechas (como se describe en la Definici\u00f3n de Hecho ) Trabajamos con el PM si queremos a\u00f1adir una nueva historia de usuario al sprint Si a\u00f1adimos nuevas tareas al tablero, nos aseguramos de que coinciden con los criterios de aceptaci\u00f3n de la historia de usuario. Si no coincide con los criterios de aceptaci\u00f3n, debemos discutir con el PM para ver si necesitamos una nueva historia de usuario para la tarea o si debemos ajustar los criterios de aceptaci\u00f3n.","title":"Gesti\u00f3n del Backlog"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/acuerdos%20de%20equipo/working-agreements/#gestion-del-codigo","text":"Seguimos la convenci\u00f3n de nomenclatura de ramas de git flow para las ramas e identificamos el n\u00famero de la tarea, por ejemplo, feature/123-add-working-agreement Fusionamos todo el c\u00f3digo en las ramas principales a trav\u00e9s de PRs Todos los PR son revisados por lo menos por una persona Siempre revisamos los PRs existentes antes de empezar a trabajar en una nueva tarea Revisamos los PRs abiertos al final del stand-up para asegurarnos de que todos los PRs tienen revisores. Tratamos la documentaci\u00f3n como c\u00f3digo y aplicamos los mismos est\u00e1ndares a Markdown que al c\u00f3digo","title":"Gesti\u00f3n del c\u00f3digo"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/","text":"Recomendaciones avanzadas para la colaboraci\u00f3n Por qu\u00e9 colaboraci\u00f3n C\u00f3mo agregar un campo personalizado de emparejamiento en historias de usuario de Azure DevOps Desarrollo del equipo de colaboraci\u00f3n Colaboraci\u00f3n virtual y programaci\u00f3n en pareja","title":"Recomendaciones avanzadas para la colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/#recomendaciones-avanzadas-para-la-colaboracion","text":"Por qu\u00e9 colaboraci\u00f3n C\u00f3mo agregar un campo personalizado de emparejamiento en historias de usuario de Azure DevOps Desarrollo del equipo de colaboraci\u00f3n Colaboraci\u00f3n virtual y programaci\u00f3n en pareja","title":"Recomendaciones avanzadas para la colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/","text":"C\u00f3mo a\u00f1adir un campo personalizado de emparejamiento en Azure DevOps User Stories Este documento describe los beneficios de a\u00f1adir un campo personalizado de tipo Identidad en las historias de usuario de Azure DevOps, los requisitos previos y una gu\u00eda paso a paso. Beneficios de a\u00f1adir un campo personalizado Tener los nombres de los dos individuos que se emparejan en una historia visibles en las tarjetas de Azure DevOps puede ser \u00fatil durante las ceremonias de sprint y conducir a una mayor responsabilidad por parte del asignado de emparejamiento. Durante la daily tambi\u00e9n puede ayudar al l\u00edder del proceso a filtrar las historias asignadas al individuo (tanto como propietario o como asignado al emparejamiento) y mostrarlas en el tablero. Adem\u00e1s, el campo de emparejamiento puede proporcionar un punto de datos adicional para los informes y las tasas de burndown. Requisitos previos Antes de personalizar Azure DevOps, revisa Configurar y personalizar Azure Boards . Para a\u00f1adir un campo personalizado a las historias de usuario en Azure DevOps, los cambios deben realizarse como una configuraci\u00f3n organizativa. Cambiar la configuraci\u00f3n de la organizaci\u00f3n Duplique el proceso actualmente en uso. Para eso vaya a Vaya a Organization Settings . Seleccione Process , haga clic en el icono con tres puntos ... y haga clic en Create inherited process . Tipee 'Pairing' como nombre y luego haga clic en Create process . Haga clic en el proceso heredado reci\u00e9n creado. Haga clic en el tipo de elemento de trabajo User History. Haga clic en New field. D\u00e9le un nombre y seleccione Identity en Tipo. Haga clic en Add Field . Modificar la configuraci\u00f3n del proyecto Vaya al proyecto que va a modificar, seleccione Project Settings . Seleccione Project configuration y luego en process customization page . Haga clic en Projects y luego en Change process . Cambie el proceso de destino a Pairing y luego haga clic en Save . Vaya a Boards y haga clic en el icono del engranaje para abrir la configuraci\u00f3n. A\u00f1ada el campo a la tarjeta. Haga clic en el icono + para a\u00f1adir el campo Emparejamiento. Marque la casilla para que se muestren los campos, aunque est\u00e9n vac\u00edos. Save and close . Ahora se puede asignar a la Historia un Propietario y un Asignado de emparejamiento.","title":"C\u00f3mo a\u00f1adir un campo personalizado de emparejamiento en Azure DevOps User Stories"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/#como-anadir-un-campo-personalizado-de-emparejamiento-en-azure-devops-user-stories","text":"Este documento describe los beneficios de a\u00f1adir un campo personalizado de tipo Identidad en las historias de usuario de Azure DevOps, los requisitos previos y una gu\u00eda paso a paso.","title":"C\u00f3mo a\u00f1adir un campo personalizado de emparejamiento en Azure DevOps User Stories"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/#beneficios-de-anadir-un-campo-personalizado","text":"Tener los nombres de los dos individuos que se emparejan en una historia visibles en las tarjetas de Azure DevOps puede ser \u00fatil durante las ceremonias de sprint y conducir a una mayor responsabilidad por parte del asignado de emparejamiento. Durante la daily tambi\u00e9n puede ayudar al l\u00edder del proceso a filtrar las historias asignadas al individuo (tanto como propietario o como asignado al emparejamiento) y mostrarlas en el tablero. Adem\u00e1s, el campo de emparejamiento puede proporcionar un punto de datos adicional para los informes y las tasas de burndown.","title":"Beneficios de a\u00f1adir un campo personalizado"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/#requisitos-previos","text":"Antes de personalizar Azure DevOps, revisa Configurar y personalizar Azure Boards . Para a\u00f1adir un campo personalizado a las historias de usuario en Azure DevOps, los cambios deben realizarse como una configuraci\u00f3n organizativa.","title":"Requisitos previos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/#cambiar-la-configuracion-de-la-organizacion","text":"Duplique el proceso actualmente en uso. Para eso vaya a Vaya a Organization Settings . Seleccione Process , haga clic en el icono con tres puntos ... y haga clic en Create inherited process . Tipee 'Pairing' como nombre y luego haga clic en Create process . Haga clic en el proceso heredado reci\u00e9n creado. Haga clic en el tipo de elemento de trabajo User History. Haga clic en New field. D\u00e9le un nombre y seleccione Identity en Tipo. Haga clic en Add Field .","title":"Cambiar la configuraci\u00f3n de la organizaci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/add-pairing-field-azure-devops-cards/#modificar-la-configuracion-del-proyecto","text":"Vaya al proyecto que va a modificar, seleccione Project Settings . Seleccione Project configuration y luego en process customization page . Haga clic en Projects y luego en Change process . Cambie el proceso de destino a Pairing y luego haga clic en Save . Vaya a Boards y haga clic en el icono del engranaje para abrir la configuraci\u00f3n. A\u00f1ada el campo a la tarjeta. Haga clic en el icono + para a\u00f1adir el campo Emparejamiento. Marque la casilla para que se muestren los campos, aunque est\u00e9n vac\u00edos. Save and close . Ahora se puede asignar a la Historia un Propietario y un Asignado de emparejamiento.","title":"Modificar la configuraci\u00f3n del proyecto"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/teaming-up/","text":"Desarrollo de Equipos de Colaboraci\u00f3n Esta documentaci\u00f3n ofrece una plantilla de alto nivel con algunas sugerencias con el objetivo de acelerar la fase de armado del equipo para lograr una agilidad de alta velocidad, sin embargo, no tiene la intenci\u00f3n de proporcionar una lista de elementos \"imprescindibles\". Identificaci\u00f3n Como se indica en las fases del equipo de Tuckman, el desarrollo tradicional del equipo tiene varias fases. Sin embargo, esas fases pueden ser extremadamente r\u00e1pidas o a veces no coincidir en los equipos debido a factores externos. Para minimizar el riesgo y establecer las excepciones en el camino correcto para todas las partes, es importante una fase de identificaci\u00f3n para entenderse. Algunos pasos posibles en esta fase pueden ser los siguientes: Acuerdo de trabajo Identificaci\u00f3n de los estilos/preferencias en la comunicaci\u00f3n, el intercambio, el aprendizaje y la toma de decisiones de cada miembro del equipo Hablar de la necesidad de la programaci\u00f3n en parejas Decisiones sobre la gesti\u00f3n del backlog y reuniones de refinamiento, sesiones de dise\u00f1o semanales, sesiones de tiempo social...etc. M\u00e9todos de comunicaci\u00f3n Sync/Async, horarios de trabajo/horas flexibles Decisiones e identificaciones de gr\u00e1ficos que ser\u00e1n \u00fatiles para proporcionar informaci\u00f3n transparente y verdadera a todos Identificaci\u00f3n de las \u00e1reas de \"Herramientas de Software\", lo que significa que las herramientas y los m\u00e9todos se utilizar\u00e1n ampliamente durante el proyecto y la adopci\u00f3n de las medidas necesarias en el lado de la formaci\u00f3n del equipo si es necesario. GitHub, VSCode LiveShare, AzDevOps, herramientas y bibliotecas de desarrollo necesarias... m\u00e1s. Si es necesario mejorar la capacitaci\u00f3n en ciertos temas, identificar las \u00e1reas y organizar capacitaciones para aumentar el conocimiento del equipo en el tema en cuesti\u00f3n. Identificaci\u00f3n de los canales de comunicaci\u00f3n, los bucles de retroalimentaci\u00f3n y las franjas de llamadas recurrentes del equipo fuera de las reuniones regulares del sprint. Introducci\u00f3n al Manifiesto del Equipo de Agilidad T\u00e9cnica y planificaci\u00f3n de la entrega t\u00e9cnica con el objetivo de mantener el riesgo de deuda t\u00e9cnica al m\u00ednimo. Seguimiento del plan y depuraci\u00f3n \u00e1gil La fase de identificaci\u00f3n acelera el proceso de construcci\u00f3n de un entorno seguro para cada individuo del equipo, m\u00e1s tarde el equipo tiene los activos necesarios para seguir el plan. Y es responsabilidad del propio equipo depurar su nivel de agilidad. En todos los equipos la estabilizaci\u00f3n lleva tiempo y la depuraci\u00f3n \u00e1gil proactiva es el mejor acelerador para disminuir la distracci\u00f3n del objetivo del sprint. El equipo tambi\u00e9n es responsable de mantener el plan actualizado en funci\u00f3n de los cambios/necesidades del equipo y de los resultados de la depuraci\u00f3n. S\u00f3lo como ejemplo, las actividades de depuraci\u00f3n de agilidad pueden incluir: Dashboards relacionados con el \"Objetivo\", tales como burndown/burnout, Item/PR Aging, Mood Chart, etc., son accesibles para el equipo y el equipo est\u00e1 siempre actualizado Reuniones de refinamiento del backlog Tama\u00f1o de las historias \u00bfSon claras las \"Historias de Usuario\" y las \"Tareas\"? \u00bfSon los criterios de aceptaci\u00f3n suficientes y correctos? \u00bfEst\u00e1 todo el mundo listo para arrancar despu\u00e9s de tomar la Historia de Usuario/Tarea? Ejecutar Retrospectivas Eficientes \u00bfEst\u00e1 claro el Objetivo del Sprint en cada iteraci\u00f3n? \u00bfEst\u00e1 el proceso de estimaci\u00f3n en el equipo mejorando con el tiempo o cumple con la predicci\u00f3n de entrega/carga de trabajo? Por favor, compruebe los valores de Scrum para tener una mejor comprensi\u00f3n para mejorar el compromiso del equipo. Recursos Etapas de desarrollo del grupo de Tuckman Valores de Scrum","title":"Desarrollo de Equipos de Colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/teaming-up/#desarrollo-de-equipos-de-colaboracion","text":"Esta documentaci\u00f3n ofrece una plantilla de alto nivel con algunas sugerencias con el objetivo de acelerar la fase de armado del equipo para lograr una agilidad de alta velocidad, sin embargo, no tiene la intenci\u00f3n de proporcionar una lista de elementos \"imprescindibles\".","title":"Desarrollo de Equipos de Colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/teaming-up/#identificacion","text":"Como se indica en las fases del equipo de Tuckman, el desarrollo tradicional del equipo tiene varias fases. Sin embargo, esas fases pueden ser extremadamente r\u00e1pidas o a veces no coincidir en los equipos debido a factores externos. Para minimizar el riesgo y establecer las excepciones en el camino correcto para todas las partes, es importante una fase de identificaci\u00f3n para entenderse. Algunos pasos posibles en esta fase pueden ser los siguientes: Acuerdo de trabajo Identificaci\u00f3n de los estilos/preferencias en la comunicaci\u00f3n, el intercambio, el aprendizaje y la toma de decisiones de cada miembro del equipo Hablar de la necesidad de la programaci\u00f3n en parejas Decisiones sobre la gesti\u00f3n del backlog y reuniones de refinamiento, sesiones de dise\u00f1o semanales, sesiones de tiempo social...etc. M\u00e9todos de comunicaci\u00f3n Sync/Async, horarios de trabajo/horas flexibles Decisiones e identificaciones de gr\u00e1ficos que ser\u00e1n \u00fatiles para proporcionar informaci\u00f3n transparente y verdadera a todos Identificaci\u00f3n de las \u00e1reas de \"Herramientas de Software\", lo que significa que las herramientas y los m\u00e9todos se utilizar\u00e1n ampliamente durante el proyecto y la adopci\u00f3n de las medidas necesarias en el lado de la formaci\u00f3n del equipo si es necesario. GitHub, VSCode LiveShare, AzDevOps, herramientas y bibliotecas de desarrollo necesarias... m\u00e1s. Si es necesario mejorar la capacitaci\u00f3n en ciertos temas, identificar las \u00e1reas y organizar capacitaciones para aumentar el conocimiento del equipo en el tema en cuesti\u00f3n. Identificaci\u00f3n de los canales de comunicaci\u00f3n, los bucles de retroalimentaci\u00f3n y las franjas de llamadas recurrentes del equipo fuera de las reuniones regulares del sprint. Introducci\u00f3n al Manifiesto del Equipo de Agilidad T\u00e9cnica y planificaci\u00f3n de la entrega t\u00e9cnica con el objetivo de mantener el riesgo de deuda t\u00e9cnica al m\u00ednimo.","title":"Identificaci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/teaming-up/#seguimiento-del-plan-y-depuracion-agil","text":"La fase de identificaci\u00f3n acelera el proceso de construcci\u00f3n de un entorno seguro para cada individuo del equipo, m\u00e1s tarde el equipo tiene los activos necesarios para seguir el plan. Y es responsabilidad del propio equipo depurar su nivel de agilidad. En todos los equipos la estabilizaci\u00f3n lleva tiempo y la depuraci\u00f3n \u00e1gil proactiva es el mejor acelerador para disminuir la distracci\u00f3n del objetivo del sprint. El equipo tambi\u00e9n es responsable de mantener el plan actualizado en funci\u00f3n de los cambios/necesidades del equipo y de los resultados de la depuraci\u00f3n. S\u00f3lo como ejemplo, las actividades de depuraci\u00f3n de agilidad pueden incluir: Dashboards relacionados con el \"Objetivo\", tales como burndown/burnout, Item/PR Aging, Mood Chart, etc., son accesibles para el equipo y el equipo est\u00e1 siempre actualizado Reuniones de refinamiento del backlog Tama\u00f1o de las historias \u00bfSon claras las \"Historias de Usuario\" y las \"Tareas\"? \u00bfSon los criterios de aceptaci\u00f3n suficientes y correctos? \u00bfEst\u00e1 todo el mundo listo para arrancar despu\u00e9s de tomar la Historia de Usuario/Tarea? Ejecutar Retrospectivas Eficientes \u00bfEst\u00e1 claro el Objetivo del Sprint en cada iteraci\u00f3n? \u00bfEst\u00e1 el proceso de estimaci\u00f3n en el equipo mejorando con el tiempo o cumple con la predicci\u00f3n de entrega/carga de trabajo? Por favor, compruebe los valores de Scrum para tener una mejor comprensi\u00f3n para mejorar el compromiso del equipo.","title":"Seguimiento del plan y depuraci\u00f3n \u00e1gil"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/teaming-up/#recursos","text":"Etapas de desarrollo del grupo de Tuckman Valores de Scrum","title":"Recursos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/","text":"Colaboraci\u00f3n Virtual y Pair Programming La programaci\u00f3n en parejas es el m\u00e9todo de trabajo de facto que utilizan la mayor\u00eda de las grandes organizaciones de ingenier\u00eda. Dos desarrolladores, que trabajan de forma sincronizada, miran la misma pantalla e intentan codificar y dise\u00f1ar juntos, lo que a menudo da como resultado un c\u00f3digo mejor y m\u00e1s claro que el que cualquiera de ellos podr\u00eda producir individualmente. La programaci\u00f3n en pareja funciona bien en las circunstancias adecuadas, pero pierde parte de su encanto cuando se ejecuta en un entorno completamente virtual. La configuraci\u00f3n virtual sigue implicando que dos desarrolladores miren a la misma pantalla y hablen de sus dise\u00f1os, pero a menudo hay problemas log\u00edsticos con los que hay que lidiar. Los modelos de trabajo virtual son diferentes de los modelos presenciales a los que estamos acostumbrados. La programaci\u00f3n en parejas, en su esencia, se basa en los siguientes principios: Generar claridad a trav\u00e9s de la comunicaci\u00f3n Producir una mayor calidad a trav\u00e9s de la colaboraci\u00f3n Crear propiedad a trav\u00e9s de la contribuci\u00f3n equitativa El Red Team Testing (RTT) es un m\u00e9todo de programaci\u00f3n alternativo que utiliza los mismos principios pero con algunas de las ventajas que ofrecen los m\u00e9todos de trabajo virtual. Red Team Testing El Red Team Testing toma prestado su nombre del paradigma \"Red Team\" y \"Blue Team\" de las pruebas de penetraci\u00f3n, y es una forma colaborativa y paralela de trabajar virtualmente. En el Red Team Testing, dos desarrolladores deciden conjuntamente la interfaz, la arquitectura y el dise\u00f1o del programa, y luego se separan para la fase de implementaci\u00f3n. Un desarrollador escribe las pruebas utilizando la interfaz p\u00fablica, intentando realizar pruebas de casos l\u00edmite, validaci\u00f3n de entradas y otras pruebas de estr\u00e9s de la interfaz. El segundo desarrollador escribe simult\u00e1neamente la implementaci\u00f3n que finalmente se probar\u00e1. Cu\u00e1ndo seguir la estrategia RTT La RTT funciona bien en determinadas circunstancias. Si la colaboraci\u00f3n tiene que ser virtual y toda la comunicaci\u00f3n es virtual, la RTT reduce la necesidad de una comunicaci\u00f3n constante y mantiene las ventajas de una sesi\u00f3n de dise\u00f1o conjunta. Esto tiene en cuenta el elemento humano: La comunicaci\u00f3n virtual es m\u00e1s agotadora que la comunicaci\u00f3n en persona. La RTT tambi\u00e9n funciona bien cuando hay un consenso total, o ninguno, sobre la finalidad del c\u00f3digo. Dado que la creaci\u00f3n del dise\u00f1o de forma conjunta y el acuerdo para implementarlo y probarlo forman parte del m\u00e9todo de la RTT, \u00e9sta crea forzosamente claridad a trav\u00e9s de la iteraci\u00f3n y la comunicaci\u00f3n. Beneficios El RTT tiene muchas de las mismas ventajas que el Pair Programming y el desarrollo orientado a pruebas, pero trata de actualizarlas para un entorno virtual. La implementaci\u00f3n y las pruebas del c\u00f3digo pueden realizarse en paralelo, a larga distancia o a trav\u00e9s de zonas horarias, lo que reduce el tiempo total que se tarda en terminar de escribir el c\u00f3digo. La RTT mantiene el paradigma de la programaci\u00f3n por parejas, pero reduce la necesidad de la comunicaci\u00f3n por v\u00eddeo o la comunicaci\u00f3n constante entre los desarrolladores. La RTT permite centrarse detalladamente en el dise\u00f1o y la alineaci\u00f3n de la ingenier\u00eda antes de implementar cualquier c\u00f3digo, lo que da lugar a interfaces m\u00e1s limpias y sencillas. RTT fomenta que las pruebas se prioricen junto a la implementaci\u00f3n, en lugar de que las pruebas sigan o se vean influenciadas por la implementaci\u00f3n del c\u00f3digo. La documentaci\u00f3n es una parte inherente de la RTT, ya que tanto el implementador como el probador necesitan una documentaci\u00f3n correcta y actualizada, en la fase de implementaci\u00f3n. Lo que se necesita para que la RTT funcione bien La exigencia de una comunicaci\u00f3n constante y un buen trabajo en equipo puede suponer un reto; las actualizaciones diarias entre los miembros del equipo son esenciales para mantener la alineaci\u00f3n en los distintos requisitos del c\u00f3digo. La claridad del dise\u00f1o del c\u00f3digo y la estrategia de pruebas debe establecerse de antemano y documentarse como referencia. La falta de un dise\u00f1o establecido provocar\u00e1 una desalineaci\u00f3n entre las dos piezas principales de trabajo y la necesidad de una refactorizaci\u00f3n que requerir\u00e1 mucho tiempo. La RTT no funciona bien si s\u00f3lo un desarrollador conoce el dise\u00f1o general. La comunicaci\u00f3n en equipo es fundamental para garantizar que todos los desarrolladores que participan en la RTT est\u00e1n en la misma p\u00e1gina.","title":"Colaboraci\u00f3n Virtual y Pair Programming"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/#colaboracion-virtual-y-pair-programming","text":"La programaci\u00f3n en parejas es el m\u00e9todo de trabajo de facto que utilizan la mayor\u00eda de las grandes organizaciones de ingenier\u00eda. Dos desarrolladores, que trabajan de forma sincronizada, miran la misma pantalla e intentan codificar y dise\u00f1ar juntos, lo que a menudo da como resultado un c\u00f3digo mejor y m\u00e1s claro que el que cualquiera de ellos podr\u00eda producir individualmente. La programaci\u00f3n en pareja funciona bien en las circunstancias adecuadas, pero pierde parte de su encanto cuando se ejecuta en un entorno completamente virtual. La configuraci\u00f3n virtual sigue implicando que dos desarrolladores miren a la misma pantalla y hablen de sus dise\u00f1os, pero a menudo hay problemas log\u00edsticos con los que hay que lidiar. Los modelos de trabajo virtual son diferentes de los modelos presenciales a los que estamos acostumbrados. La programaci\u00f3n en parejas, en su esencia, se basa en los siguientes principios: Generar claridad a trav\u00e9s de la comunicaci\u00f3n Producir una mayor calidad a trav\u00e9s de la colaboraci\u00f3n Crear propiedad a trav\u00e9s de la contribuci\u00f3n equitativa El Red Team Testing (RTT) es un m\u00e9todo de programaci\u00f3n alternativo que utiliza los mismos principios pero con algunas de las ventajas que ofrecen los m\u00e9todos de trabajo virtual.","title":"Colaboraci\u00f3n Virtual y Pair Programming"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/#red-team-testing","text":"El Red Team Testing toma prestado su nombre del paradigma \"Red Team\" y \"Blue Team\" de las pruebas de penetraci\u00f3n, y es una forma colaborativa y paralela de trabajar virtualmente. En el Red Team Testing, dos desarrolladores deciden conjuntamente la interfaz, la arquitectura y el dise\u00f1o del programa, y luego se separan para la fase de implementaci\u00f3n. Un desarrollador escribe las pruebas utilizando la interfaz p\u00fablica, intentando realizar pruebas de casos l\u00edmite, validaci\u00f3n de entradas y otras pruebas de estr\u00e9s de la interfaz. El segundo desarrollador escribe simult\u00e1neamente la implementaci\u00f3n que finalmente se probar\u00e1.","title":"Red Team Testing"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/#cuando-seguir-la-estrategia-rtt","text":"La RTT funciona bien en determinadas circunstancias. Si la colaboraci\u00f3n tiene que ser virtual y toda la comunicaci\u00f3n es virtual, la RTT reduce la necesidad de una comunicaci\u00f3n constante y mantiene las ventajas de una sesi\u00f3n de dise\u00f1o conjunta. Esto tiene en cuenta el elemento humano: La comunicaci\u00f3n virtual es m\u00e1s agotadora que la comunicaci\u00f3n en persona. La RTT tambi\u00e9n funciona bien cuando hay un consenso total, o ninguno, sobre la finalidad del c\u00f3digo. Dado que la creaci\u00f3n del dise\u00f1o de forma conjunta y el acuerdo para implementarlo y probarlo forman parte del m\u00e9todo de la RTT, \u00e9sta crea forzosamente claridad a trav\u00e9s de la iteraci\u00f3n y la comunicaci\u00f3n.","title":"Cu\u00e1ndo seguir la estrategia RTT"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/#beneficios","text":"El RTT tiene muchas de las mismas ventajas que el Pair Programming y el desarrollo orientado a pruebas, pero trata de actualizarlas para un entorno virtual. La implementaci\u00f3n y las pruebas del c\u00f3digo pueden realizarse en paralelo, a larga distancia o a trav\u00e9s de zonas horarias, lo que reduce el tiempo total que se tarda en terminar de escribir el c\u00f3digo. La RTT mantiene el paradigma de la programaci\u00f3n por parejas, pero reduce la necesidad de la comunicaci\u00f3n por v\u00eddeo o la comunicaci\u00f3n constante entre los desarrolladores. La RTT permite centrarse detalladamente en el dise\u00f1o y la alineaci\u00f3n de la ingenier\u00eda antes de implementar cualquier c\u00f3digo, lo que da lugar a interfaces m\u00e1s limpias y sencillas. RTT fomenta que las pruebas se prioricen junto a la implementaci\u00f3n, en lugar de que las pruebas sigan o se vean influenciadas por la implementaci\u00f3n del c\u00f3digo. La documentaci\u00f3n es una parte inherente de la RTT, ya que tanto el implementador como el probador necesitan una documentaci\u00f3n correcta y actualizada, en la fase de implementaci\u00f3n.","title":"Beneficios"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/virtual-collaboration/#lo-que-se-necesita-para-que-la-rtt-funcione-bien","text":"La exigencia de una comunicaci\u00f3n constante y un buen trabajo en equipo puede suponer un reto; las actualizaciones diarias entre los miembros del equipo son esenciales para mantener la alineaci\u00f3n en los distintos requisitos del c\u00f3digo. La claridad del dise\u00f1o del c\u00f3digo y la estrategia de pruebas debe establecerse de antemano y documentarse como referencia. La falta de un dise\u00f1o establecido provocar\u00e1 una desalineaci\u00f3n entre las dos piezas principales de trabajo y la necesidad de una refactorizaci\u00f3n que requerir\u00e1 mucho tiempo. La RTT no funciona bien si s\u00f3lo un desarrollador conoce el dise\u00f1o general. La comunicaci\u00f3n en equipo es fundamental para garantizar que todos los desarrolladores que participan en la RTT est\u00e1n en la misma p\u00e1gina.","title":"Lo que se necesita para que la RTT funcione bien"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/","text":"Por qu\u00e9 colaboraci\u00f3n Por qu\u00e9 es importante la colaboraci\u00f3n Nuestro objetivo es ser altamente colaborativo porque cuando codificamos juntos, tenemos un mejor rendimiento, una mayor velocidad de sprint y un mayor grado de intercambio de conocimientos en todo el equipo. Hay dos patrones comunes que utilizamos para la colaboraci\u00f3n: Programaci\u00f3n en parejas (\"pairing\"): dos ingenieros asignados a una historia compartida y trabajando en ella a la vez durante el sprint. Un ingeniero es el principal (propietario de la historia) y el otro es el secundario (asignado al emparejamiento). La definici\u00f3n coincide con la de la Agile Alliance. Programaci\u00f3n en enjambre (\"swarming\"): tres o m\u00e1s ingenieros colaboran en un elemento de alta prioridad para llevarlo a t\u00e9rmino. C\u00f3mo programar las parejas Como se ha mencionado, cada historia se asigna intencionadamente a una pareja. La persona asignada al emparejamiento puede estar en proceso de perfeccionamiento, sin embargo, son socios iguales en el esfuerzo de desarrollo. A continuaci\u00f3n se exponen algunas directrices generales para el emparejamiento: Tras la asignaci\u00f3n de la historia/elemento del backlog del producto (PBI), la pareja debe definir deliberadamente c\u00f3mo trabajar juntos y tener una definici\u00f3n firme del trabajo que debe completarse. Esta informaci\u00f3n debe expresarse claramente en la descripci\u00f3n de la historia y en los criterios de aceptaci\u00f3n. Las expectativas al respecto deben ser comunicadas y acordadas por ambos ingenieros y deben hacerse antes de cualquier sesi\u00f3n de trabajo real. El propietario de la historia y su par asignado no se limitan a dividir el trabajo y a sincronizarlo regularmente: trabajan activamente juntos en las mismas tareas y pueden compartir sus pantallas a trav\u00e9s de una sesi\u00f3n en l\u00ednea de Teams. Las herramientas de colaboraci\u00f3n como VS Live Share pueden ser preferibles a compartir pantallas. No es necesario que toda la colaboraci\u00f3n se base en compartir pantallas. Durante las sesiones de colaboraci\u00f3n, un ingeniero proporciona el entorno de desarrollo mientras el otro ve y comenta activamente de forma verbal. Los ingenieros se intercambian a menudo de una sesi\u00f3n a otra para que todos tengan tiempo de controlar el teclado. Los ingenieros aprovechan las ramas de features para la colaboraci\u00f3n durante el desarrollo de cada historia para tener peque\u00f1os Pull Requests al final del sprint. El c\u00f3digo se comitea en el repositorio por ambos miembros del par asignado donde y cuando tiene sentido a medida que se completan las tareas. El emparejamiento asignado es la voz que representa a ambos durante la daily mientras es apoyado por el propietario de la historia. Tener los nombres de ambos visibles en el PBI puede ser \u00fatil durante las ceremonias del sprint y conducir a una mayor responsabilidad por parte del par asignado. Un ejemplo de esto usando las tarjetas Azure DevOps se puede encontrar aqu\u00ed. Por qu\u00e9 la programaci\u00f3n por parejas ayuda a la colaboraci\u00f3n La programaci\u00f3n en parejas ayuda a la colaboraci\u00f3n porque ambos ingenieros comparten la misma responsabilidad de llevar la historia a t\u00e9rmino. Se trata de un ejercicio mutuamente beneficioso porque, mientras que el propietario de la historia suele tener m\u00e1s experiencia en la que apoyarse, el asignado al emparejamiento aporta un punto de vista nuevo que no se ve enturbiado por la repetici\u00f3n. Otros beneficios son: Menos defectos y mayor responsabilidad. El hecho de contar con dos pares de ojos permite a los ingenieros tener m\u00e1s oportunidades de detectar errores y recordar tareas que a menudo se pasan por alto, como la escritura de pruebas unitarias y de integraci\u00f3n. El emparejamiento permite a los ingenieros con diferente experiencia y conocimientos aprender unos de otros colaborando y recibiendo comentarios en tiempo real. Incluso algo tan sencillo como describir el problema en voz alta puede ayudar a descubrir problemas o errores en el c\u00f3digo. El emparejamiento puede ayudar a la lluvia de ideas, as\u00ed como a validar detalles como la coherencia de los nombres de las variables. Cu\u00e1ndo se debe programar el enjambre Es importante saber que no todos los PBI necesitan utilizar el enjambre. Algunos sprints pueden incluso no justificar el enjambre en absoluto. Utilice enjambre cuando: El trabajo es lo suficientemente complejo como para tener mentes colectivas colaborando. La tarea en la que trabaja el enjambre se ha convertido en un bloqueador de otras historias. Se descubre una inc\u00f3gnita que necesita un esfuerzo de colaboraci\u00f3n para formar una decisi\u00f3n sobre c\u00f3mo avanzar. El conocimiento y la experiencia colectivos ayudan a hacer avanzar la historia m\u00e1s r\u00e1pidamente y, en \u00faltima instancia, producen un c\u00f3digo de mejor calidad. Surge un conflicto o una diferencia de opini\u00f3n no resuelta durante una sesi\u00f3n de emparejamiento. Promueva que el trabajo se convierta en una sesi\u00f3n enjambre para ayudar a resolver el conflicto. C\u00f3mo programar el enjambre Tan pronto como la pareja se entera de que el PBI va a justificar el enjambre, lo pone en conocimiento del resto del equipo. Los miembros del equipo aceptan o se ofrecen como voluntarios para ayudar. El propietario de la historia (o la persona asignada al emparejamiento) env\u00eda a los interesados una invitaci\u00f3n a la convocatoria de equipos. Esto permite que el enjambre tenga un tiempo de concentraci\u00f3n dedicado al bloquear el tiempo en los calendarios. Durante una sesi\u00f3n de enjambre, un ingeniero puede desviarse si hay algo que necesita ser manejado mientras el enjambre aborda el problema principal en cuesti\u00f3n, y luego vuelve a conectarse e informa. Esto permite al enjambre centrarse en un aspecto central y estar todos en la misma p\u00e1gina. La llamada a los equipos se repite hasta que se encuentra una soluci\u00f3n o se formula un camino alternativo. Por qu\u00e9 la programaci\u00f3n en enjambre ayuda a la colaboraci\u00f3n La programaci\u00f3n en enjambre permite que el conocimiento y la experiencia colectiva del equipo se re\u00fanan de forma enfocada y unificada. El enjambre no s\u00f3lo ayuda a cerrar el item m\u00e1s r\u00e1pidamente, sino que tambi\u00e9n ayuda al equipo a comprender los puntos fuertes y d\u00e9biles de cada uno. Permite al equipo construir un mayor nivel de confianza y trabajar como una unidad cohesionada. Cu\u00e1ndo decidir enjambrar, emparejar y/o dividir Aunque se puede dedicar mucho tiempo a la programaci\u00f3n en parejas, tiene sentido dividir el trabajo cuando la gente entiende c\u00f3mo se va a llevar a cabo y el trabajo a realizar es en gran medida prescriptivo. Una vez que la historia ha sido asignada conjuntamente por ambos ingenieros, \u00e9stos pueden optar por abordar algunas tareas por separado y luego combinar el trabajo al final. La programaci\u00f3n en parejas es m\u00e1s \u00fatil cuando los ingenieros no tienen perfectamente claro lo que hay que hacer o c\u00f3mo se puede hacer. El enjambre se lleva a cabo cuando los dos ingenieros asignados a la historia necesitan experiencia que podr\u00edan aportar otros miembros del equipo. Beneficios de una mayor colaboraci\u00f3n Compartir el conocimiento y reunir a los ingenieros es un aspecto importante de los compromisos de trabajo. Somos responsables de demostrar los fundamentos de la ingenier\u00eda y dejar al cliente en un lugar mejor despu\u00e9s de que nos desvinculemos. Esto s\u00f3lo puede suceder si colaboramos y nos comprometemos juntos como un equipo. Adem\u00e1s de mejorar la calidad del software, esto tambi\u00e9n a\u00f1ade un aspecto social beneficioso a los proyectos. Recursos C\u00f3mo a\u00f1adir un campo personalizado de emparejamiento en Azure DevOps User Stories : a\u00f1adir un campo personalizado de tipo Identidad en Azure DevOps para el emparejamiento Sobre Pair Programming - Martin Fowler Lecciones pr\u00e1cticas de Pair Programming : se pueden utilizar (y adaptar) para apoyar la introducci\u00f3n de la programaci\u00f3n por pares en su equipo.","title":"Por qu\u00e9 colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#por-que-colaboracion","text":"","title":"Por qu\u00e9 colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#por-que-es-importante-la-colaboracion","text":"Nuestro objetivo es ser altamente colaborativo porque cuando codificamos juntos, tenemos un mejor rendimiento, una mayor velocidad de sprint y un mayor grado de intercambio de conocimientos en todo el equipo. Hay dos patrones comunes que utilizamos para la colaboraci\u00f3n: Programaci\u00f3n en parejas (\"pairing\"): dos ingenieros asignados a una historia compartida y trabajando en ella a la vez durante el sprint. Un ingeniero es el principal (propietario de la historia) y el otro es el secundario (asignado al emparejamiento). La definici\u00f3n coincide con la de la Agile Alliance. Programaci\u00f3n en enjambre (\"swarming\"): tres o m\u00e1s ingenieros colaboran en un elemento de alta prioridad para llevarlo a t\u00e9rmino.","title":"Por qu\u00e9 es importante la colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#como-programar-las-parejas","text":"Como se ha mencionado, cada historia se asigna intencionadamente a una pareja. La persona asignada al emparejamiento puede estar en proceso de perfeccionamiento, sin embargo, son socios iguales en el esfuerzo de desarrollo. A continuaci\u00f3n se exponen algunas directrices generales para el emparejamiento: Tras la asignaci\u00f3n de la historia/elemento del backlog del producto (PBI), la pareja debe definir deliberadamente c\u00f3mo trabajar juntos y tener una definici\u00f3n firme del trabajo que debe completarse. Esta informaci\u00f3n debe expresarse claramente en la descripci\u00f3n de la historia y en los criterios de aceptaci\u00f3n. Las expectativas al respecto deben ser comunicadas y acordadas por ambos ingenieros y deben hacerse antes de cualquier sesi\u00f3n de trabajo real. El propietario de la historia y su par asignado no se limitan a dividir el trabajo y a sincronizarlo regularmente: trabajan activamente juntos en las mismas tareas y pueden compartir sus pantallas a trav\u00e9s de una sesi\u00f3n en l\u00ednea de Teams. Las herramientas de colaboraci\u00f3n como VS Live Share pueden ser preferibles a compartir pantallas. No es necesario que toda la colaboraci\u00f3n se base en compartir pantallas. Durante las sesiones de colaboraci\u00f3n, un ingeniero proporciona el entorno de desarrollo mientras el otro ve y comenta activamente de forma verbal. Los ingenieros se intercambian a menudo de una sesi\u00f3n a otra para que todos tengan tiempo de controlar el teclado. Los ingenieros aprovechan las ramas de features para la colaboraci\u00f3n durante el desarrollo de cada historia para tener peque\u00f1os Pull Requests al final del sprint. El c\u00f3digo se comitea en el repositorio por ambos miembros del par asignado donde y cuando tiene sentido a medida que se completan las tareas. El emparejamiento asignado es la voz que representa a ambos durante la daily mientras es apoyado por el propietario de la historia. Tener los nombres de ambos visibles en el PBI puede ser \u00fatil durante las ceremonias del sprint y conducir a una mayor responsabilidad por parte del par asignado. Un ejemplo de esto usando las tarjetas Azure DevOps se puede encontrar aqu\u00ed.","title":"C\u00f3mo programar las parejas"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#por-que-la-programacion-por-parejas-ayuda-a-la-colaboracion","text":"La programaci\u00f3n en parejas ayuda a la colaboraci\u00f3n porque ambos ingenieros comparten la misma responsabilidad de llevar la historia a t\u00e9rmino. Se trata de un ejercicio mutuamente beneficioso porque, mientras que el propietario de la historia suele tener m\u00e1s experiencia en la que apoyarse, el asignado al emparejamiento aporta un punto de vista nuevo que no se ve enturbiado por la repetici\u00f3n. Otros beneficios son: Menos defectos y mayor responsabilidad. El hecho de contar con dos pares de ojos permite a los ingenieros tener m\u00e1s oportunidades de detectar errores y recordar tareas que a menudo se pasan por alto, como la escritura de pruebas unitarias y de integraci\u00f3n. El emparejamiento permite a los ingenieros con diferente experiencia y conocimientos aprender unos de otros colaborando y recibiendo comentarios en tiempo real. Incluso algo tan sencillo como describir el problema en voz alta puede ayudar a descubrir problemas o errores en el c\u00f3digo. El emparejamiento puede ayudar a la lluvia de ideas, as\u00ed como a validar detalles como la coherencia de los nombres de las variables.","title":"Por qu\u00e9 la programaci\u00f3n por parejas ayuda a la colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#cuando-se-debe-programar-el-enjambre","text":"Es importante saber que no todos los PBI necesitan utilizar el enjambre. Algunos sprints pueden incluso no justificar el enjambre en absoluto. Utilice enjambre cuando: El trabajo es lo suficientemente complejo como para tener mentes colectivas colaborando. La tarea en la que trabaja el enjambre se ha convertido en un bloqueador de otras historias. Se descubre una inc\u00f3gnita que necesita un esfuerzo de colaboraci\u00f3n para formar una decisi\u00f3n sobre c\u00f3mo avanzar. El conocimiento y la experiencia colectivos ayudan a hacer avanzar la historia m\u00e1s r\u00e1pidamente y, en \u00faltima instancia, producen un c\u00f3digo de mejor calidad. Surge un conflicto o una diferencia de opini\u00f3n no resuelta durante una sesi\u00f3n de emparejamiento. Promueva que el trabajo se convierta en una sesi\u00f3n enjambre para ayudar a resolver el conflicto.","title":"Cu\u00e1ndo se debe programar el enjambre"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#como-programar-el-enjambre","text":"Tan pronto como la pareja se entera de que el PBI va a justificar el enjambre, lo pone en conocimiento del resto del equipo. Los miembros del equipo aceptan o se ofrecen como voluntarios para ayudar. El propietario de la historia (o la persona asignada al emparejamiento) env\u00eda a los interesados una invitaci\u00f3n a la convocatoria de equipos. Esto permite que el enjambre tenga un tiempo de concentraci\u00f3n dedicado al bloquear el tiempo en los calendarios. Durante una sesi\u00f3n de enjambre, un ingeniero puede desviarse si hay algo que necesita ser manejado mientras el enjambre aborda el problema principal en cuesti\u00f3n, y luego vuelve a conectarse e informa. Esto permite al enjambre centrarse en un aspecto central y estar todos en la misma p\u00e1gina. La llamada a los equipos se repite hasta que se encuentra una soluci\u00f3n o se formula un camino alternativo.","title":"C\u00f3mo programar el enjambre"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#por-que-la-programacion-en-enjambre-ayuda-a-la-colaboracion","text":"La programaci\u00f3n en enjambre permite que el conocimiento y la experiencia colectiva del equipo se re\u00fanan de forma enfocada y unificada. El enjambre no s\u00f3lo ayuda a cerrar el item m\u00e1s r\u00e1pidamente, sino que tambi\u00e9n ayuda al equipo a comprender los puntos fuertes y d\u00e9biles de cada uno. Permite al equipo construir un mayor nivel de confianza y trabajar como una unidad cohesionada.","title":"Por qu\u00e9 la programaci\u00f3n en enjambre ayuda a la colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#cuando-decidir-enjambrar-emparejar-yo-dividir","text":"Aunque se puede dedicar mucho tiempo a la programaci\u00f3n en parejas, tiene sentido dividir el trabajo cuando la gente entiende c\u00f3mo se va a llevar a cabo y el trabajo a realizar es en gran medida prescriptivo. Una vez que la historia ha sido asignada conjuntamente por ambos ingenieros, \u00e9stos pueden optar por abordar algunas tareas por separado y luego combinar el trabajo al final. La programaci\u00f3n en parejas es m\u00e1s \u00fatil cuando los ingenieros no tienen perfectamente claro lo que hay que hacer o c\u00f3mo se puede hacer. El enjambre se lleva a cabo cuando los dos ingenieros asignados a la historia necesitan experiencia que podr\u00edan aportar otros miembros del equipo.","title":"Cu\u00e1ndo decidir enjambrar, emparejar y/o dividir"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#beneficios-de-una-mayor-colaboracion","text":"Compartir el conocimiento y reunir a los ingenieros es un aspecto importante de los compromisos de trabajo. Somos responsables de demostrar los fundamentos de la ingenier\u00eda y dejar al cliente en un lugar mejor despu\u00e9s de que nos desvinculemos. Esto s\u00f3lo puede suceder si colaboramos y nos comprometemos juntos como un equipo. Adem\u00e1s de mejorar la calidad del software, esto tambi\u00e9n a\u00f1ade un aspecto social beneficioso a los proyectos.","title":"Beneficios de una mayor colaboraci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/colaboraci%C3%B3n/why-collaboration/#recursos","text":"C\u00f3mo a\u00f1adir un campo personalizado de emparejamiento en Azure DevOps User Stories : a\u00f1adir un campo personalizado de tipo Identidad en Azure DevOps para el emparejamiento Sobre Pair Programming - Martin Fowler Lecciones pr\u00e1cticas de Pair Programming : se pueden utilizar (y adaptar) para apoyar la introducci\u00f3n de la programaci\u00f3n por pares en su equipo.","title":"Recursos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/","text":"Recomendaciones avanzadas para la gesti\u00f3n del Backlog Retroalimentaci\u00f3n externa Slices m\u00ednimos","title":"Recomendaciones avanzadas para la gesti\u00f3n del Backlog"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/#recomendaciones-avanzadas-para-la-gestion-del-backlog","text":"Retroalimentaci\u00f3n externa Slices m\u00ednimos","title":"Recomendaciones avanzadas para la gesti\u00f3n del Backlog"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/external-feedback/","text":"Retroalimentaci\u00f3n externa Diversos stakeholders pueden aportar comentarios al producto de trabajo durante un proyecto, m\u00e1s all\u00e1 de las sesiones formales de revisi\u00f3n y retroalimentaci\u00f3n exigidas por la organizaci\u00f3n. La frecuencia y el m\u00e9todo de recopilaci\u00f3n de comentarios a trav\u00e9s de las revisiones var\u00eda seg\u00fan el caso, pero algunas buenas pr\u00e1cticas son: Capturar cada revisi\u00f3n en el backlog como una historia de usuario independiente. Estandarizar las tareas que implementan esta historia de usuario. Planificar una historia de usuario de revisi\u00f3n por Epica / Feature en su backlog de forma proactiva.","title":"Retroalimentaci\u00f3n externa"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/external-feedback/#retroalimentacion-externa","text":"Diversos stakeholders pueden aportar comentarios al producto de trabajo durante un proyecto, m\u00e1s all\u00e1 de las sesiones formales de revisi\u00f3n y retroalimentaci\u00f3n exigidas por la organizaci\u00f3n. La frecuencia y el m\u00e9todo de recopilaci\u00f3n de comentarios a trav\u00e9s de las revisiones var\u00eda seg\u00fan el caso, pero algunas buenas pr\u00e1cticas son: Capturar cada revisi\u00f3n en el backlog como una historia de usuario independiente. Estandarizar las tareas que implementan esta historia de usuario. Planificar una historia de usuario de revisi\u00f3n por Epica / Feature en su backlog de forma proactiva.","title":"Retroalimentaci\u00f3n externa"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/minimal-slices/","text":"Slices m\u00ednimos Entregue siempre su trabajo utilizando slices m\u00ednimos de valor Divida su trabajo en peque\u00f1os slices que se a\u00f1aden en commits incrementales. Aporte sus slices con frecuencia. Siga un enfoque iterativo proporcionando regularmente actualizaciones y cambios al equipo. Esto permite una retroalimentaci\u00f3n instant\u00e1nea y la detecci\u00f3n temprana de problemas y asegura que se est\u00e1 desarrollando en la direcci\u00f3n correcta, tanto t\u00e9cnica como funcionalmente. NO trabaje de forma independiente en su tarea sin proporcionar ninguna actualizaci\u00f3n a su equipo. Recursos Reglas del minimalismo","title":"Slices m\u00ednimos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/minimal-slices/#slices-minimos","text":"","title":"Slices m\u00ednimos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/minimal-slices/#entregue-siempre-su-trabajo-utilizando-slices-minimos-de-valor","text":"Divida su trabajo en peque\u00f1os slices que se a\u00f1aden en commits incrementales. Aporte sus slices con frecuencia. Siga un enfoque iterativo proporcionando regularmente actualizaciones y cambios al equipo. Esto permite una retroalimentaci\u00f3n instant\u00e1nea y la detecci\u00f3n temprana de problemas y asegura que se est\u00e1 desarrollando en la direcci\u00f3n correcta, tanto t\u00e9cnica como funcionalmente. NO trabaje de forma independiente en su tarea sin proporcionar ninguna actualizaci\u00f3n a su equipo.","title":"Entregue siempre su trabajo utilizando slices m\u00ednimos de valor"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/gesti%C3%B3n%20de%20backlog/minimal-slices/#recursos","text":"Reglas del minimalismo","title":"Recursos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/","text":"Recomendaciones avanzadas para una organizaci\u00f3n m\u00e1s eficaz Plan de entrega/release Scrum de Scrums","title":"Recomendaciones avanzadas para una organizaci\u00f3n m\u00e1s eficaz"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/#recomendaciones-avanzadas-para-una-organizacion-mas-eficaz","text":"Plan de entrega/release Scrum de Scrums","title":"Recomendaciones avanzadas para una organizaci\u00f3n m\u00e1s eficaz"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/","text":"Plan de entrega/release Objetivos Aunque Scrum no requiere y desaconseja planificar m\u00e1s de un sprint a la vez, casi siempre dependemos de equipos externos. Una evaluaci\u00f3n aproximada del alcance del proyecto planificado es alcanzable dentro de un marco de tiempo y recursos razonables. El objetivo es tener un plan y una estimaci\u00f3n aproximados como punto de partida. Tenga en cuenta que esto es s\u00f3lo un punto de partida para permitir las discusiones de planificaci\u00f3n. Esperamos que el cronograma real evolucione y cambie con el tiempo y que usted actualice el alcance y el cronograma a medida que avanza. Los planes de entrega garantizan que sus equipos se alineen con sus objetivos organizativos. Beneficios A medida que vaya completando la evaluaci\u00f3n, podr\u00e1 modificar el alcance, el calendario o pedir m\u00e1s recursos. A medida que avanza en la entrega de su proyecto/producto, puede destacar los riesgos para el alcance, el calendario y los recursos. Enfoque Un enfoque que puedes adoptar para lograrlo es con pegatinas y una hoja de c\u00e1lculo. Paso 1: Clasifica los features en el backlog Caracter\u00edsticas funcionales Caracter\u00edsticas no funcionales Investigaci\u00f3n y dise\u00f1o de usuarios Pruebas Documentaci\u00f3n Transferencia de conocimientos/procesos de apoyo Paso 2: Mida (T-Shirt) los features en t\u00e9rminos de semanas de trabajo por persona. En algunos escenarios, usted no tiene idea de la complejidad del trabajo. Paso 3: Calcule la capacidad del equipo bas\u00e1ndose en el n\u00famero de semanas de la persona con su fecha de inicio y de finalizaci\u00f3n y menos los d\u00edas festivos, las vacaciones, las conferencias, la formaci\u00f3n y los d\u00edas de incorporaci\u00f3n. Adem\u00e1s, reste el tiempo si la persona tambi\u00e9n trabaja en defectos y soporte. Paso 4: En base a su capacidad, usted sabe que tiene las opciones Pedir m\u00e1s recursos. Precauci\u00f3n: la incorporaci\u00f3n de nuevos recursos lleva tiempo. Reducir el alcance a lo m\u00e1s MVP. Precauci\u00f3n: a medida que se recorta el alcance, podr\u00eda dejar de ser valioso para el cliente. Pide m\u00e1s tiempo. Por lo general, esto es lo m\u00e1s flexible. Herramientas Tambi\u00e9n puedes aprovechar una de estas herramientas creando tus \u00e9picas y features y a\u00f1adiendo las estimaciones. Plans (Preview) feature de Azure DevOps le ayudar\u00e1 a elaborar un plan. Los planes de entrega proporcionan un calendario de historias o features que su equipo planea entregar. Los planes de entrega muestran los elementos de trabajo programados por un sprint (ruta de iteraci\u00f3n) de los equipos seleccionados contra una vista de calendario. Confluence JIRA, Trello, Rally, Asana, Basecamp, y GitHub Issues son otras herramientas similares en el mercado que puedes aprovechar.","title":"Plan de entrega/release"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/#plan-de-entregarelease","text":"","title":"Plan de entrega/release"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/#objetivos","text":"Aunque Scrum no requiere y desaconseja planificar m\u00e1s de un sprint a la vez, casi siempre dependemos de equipos externos. Una evaluaci\u00f3n aproximada del alcance del proyecto planificado es alcanzable dentro de un marco de tiempo y recursos razonables. El objetivo es tener un plan y una estimaci\u00f3n aproximados como punto de partida. Tenga en cuenta que esto es s\u00f3lo un punto de partida para permitir las discusiones de planificaci\u00f3n. Esperamos que el cronograma real evolucione y cambie con el tiempo y que usted actualice el alcance y el cronograma a medida que avanza. Los planes de entrega garantizan que sus equipos se alineen con sus objetivos organizativos.","title":"Objetivos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/#beneficios","text":"A medida que vaya completando la evaluaci\u00f3n, podr\u00e1 modificar el alcance, el calendario o pedir m\u00e1s recursos. A medida que avanza en la entrega de su proyecto/producto, puede destacar los riesgos para el alcance, el calendario y los recursos.","title":"Beneficios"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/#enfoque","text":"Un enfoque que puedes adoptar para lograrlo es con pegatinas y una hoja de c\u00e1lculo. Paso 1: Clasifica los features en el backlog Caracter\u00edsticas funcionales Caracter\u00edsticas no funcionales Investigaci\u00f3n y dise\u00f1o de usuarios Pruebas Documentaci\u00f3n Transferencia de conocimientos/procesos de apoyo Paso 2: Mida (T-Shirt) los features en t\u00e9rminos de semanas de trabajo por persona. En algunos escenarios, usted no tiene idea de la complejidad del trabajo. Paso 3: Calcule la capacidad del equipo bas\u00e1ndose en el n\u00famero de semanas de la persona con su fecha de inicio y de finalizaci\u00f3n y menos los d\u00edas festivos, las vacaciones, las conferencias, la formaci\u00f3n y los d\u00edas de incorporaci\u00f3n. Adem\u00e1s, reste el tiempo si la persona tambi\u00e9n trabaja en defectos y soporte. Paso 4: En base a su capacidad, usted sabe que tiene las opciones Pedir m\u00e1s recursos. Precauci\u00f3n: la incorporaci\u00f3n de nuevos recursos lleva tiempo. Reducir el alcance a lo m\u00e1s MVP. Precauci\u00f3n: a medida que se recorta el alcance, podr\u00eda dejar de ser valioso para el cliente. Pide m\u00e1s tiempo. Por lo general, esto es lo m\u00e1s flexible.","title":"Enfoque"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/delivery-plan/#herramientas","text":"Tambi\u00e9n puedes aprovechar una de estas herramientas creando tus \u00e9picas y features y a\u00f1adiendo las estimaciones. Plans (Preview) feature de Azure DevOps le ayudar\u00e1 a elaborar un plan. Los planes de entrega proporcionan un calendario de historias o features que su equipo planea entregar. Los planes de entrega muestran los elementos de trabajo programados por un sprint (ruta de iteraci\u00f3n) de los equipos seleccionados contra una vista de calendario. Confluence JIRA, Trello, Rally, Asana, Basecamp, y GitHub Issues son otras herramientas similares en el mercado que puedes aprovechar.","title":"Herramientas"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/","text":"Scrum de Scrums Scrum de scrums es una t\u00e9cnica utilizada para escalar Scrum a un grupo m\u00e1s grande que trabaja hacia el mismo objetivo del proyecto. En Scrum, consideramos que un equipo es demasiado grande cuando supera los 10-12 individuos. Si el proyecto est\u00e1 configurado en m\u00faltiples flujos de trabajo que contienen un grupo fijo de personas y una reuni\u00f3n com\u00fan de stand-up est\u00e1 frenando la productividad se debe considerar el scrum de scrums. El equipo identificar\u00eda los diferentes subgrupos que actuar\u00edan como equipos de scrum separados con su propio backlog, dashboard y stand-up. Objetivos El objetivo de la ceremonia de scrum of scrums es dar a los subequipos la agilidad que necesitan sin perder la visibilidad y la coordinaci\u00f3n. Tambi\u00e9n ayuda a asegurar que los subequipos est\u00e1n logrando sus objetivos del sprint, y que van en la direcci\u00f3n correcta para lograr el objetivo general del proyecto. La ceremonia del scrum de los scrums tiene lugar todos los d\u00edas y puede considerarse como un stand-up regular: Lo que se hizo el d\u00eda anterior por el sub-equipo. Lo que har\u00e1 hoy el subequipo. Cu\u00e1les son los bloqueos u otros problemas para el sub-equipo. Cu\u00e1les son los bloqueos o problemas que pueden afectar a otros subequipos. El resultado de la reuni\u00f3n ser\u00e1 una lista de impedimentos relacionados con la coordinaci\u00f3n de todo el proyecto. Las soluciones podr\u00edan ser: acordar las interfaces entre equipos, discutir los cambios de arquitectura, evolucionar los l\u00edmites de responsabilidad, etc. Esta lista de impedimentos suele gestionarse en un backlog separado, pero no es necesario. Participaci\u00f3n La pauta com\u00fan es tener en promedio una persona por sub-equipo. En algunos casos, el representante del d\u00eda se selecciona al final de cada stand-up diario del sub-equipo y podr\u00eda cambiar cada d\u00eda. En la pr\u00e1ctica, tener un representante fijo tiende a ser m\u00e1s eficiente a largo plazo. Impacto Esta pr\u00e1ctica es \u00fatil en los casos de proyectos m\u00e1s largos y de mayor alcance, que requieren m\u00e1s personas. Cuando hay m\u00e1s personas, suele ser m\u00e1s f\u00e1cil dividir el proyecto en subequipos. Tener un scrum de scrums diario mejora la comunicaci\u00f3n, disminuye el riesgo de problemas de integraci\u00f3n y aumenta las posibilidades de \u00e9xito del proyecto. Cuando se opta por implementar Scrum of Scrums, hay que tener en cuenta que algunos miembros del equipo tendr\u00e1n reuniones adicionales que coordinar y en las que participar. Adem\u00e1s todos los miembros del equipo de cada sub-equipo deben ser actualizados sobre las decisiones en un momento posterior para asegurar un buen flujo de informaci\u00f3n. Medici\u00f3n La forma m\u00e1s sencilla de medir el impacto es haciendo un seguimiento del tiempo de resoluci\u00f3n de los problemas en el backlog del scrum de scrums. Tambi\u00e9n se puede hacer un seguimiento de las cuestiones comunicadas durante la retrospectiva relacionadas con la coordinaci\u00f3n global. Gu\u00eda de facilitaci\u00f3n Esto deber\u00eda facilitarse como un stand-up normal.","title":"Scrum de Scrums"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#scrum-de-scrums","text":"Scrum de scrums es una t\u00e9cnica utilizada para escalar Scrum a un grupo m\u00e1s grande que trabaja hacia el mismo objetivo del proyecto. En Scrum, consideramos que un equipo es demasiado grande cuando supera los 10-12 individuos. Si el proyecto est\u00e1 configurado en m\u00faltiples flujos de trabajo que contienen un grupo fijo de personas y una reuni\u00f3n com\u00fan de stand-up est\u00e1 frenando la productividad se debe considerar el scrum de scrums. El equipo identificar\u00eda los diferentes subgrupos que actuar\u00edan como equipos de scrum separados con su propio backlog, dashboard y stand-up.","title":"Scrum de Scrums"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#objetivos","text":"El objetivo de la ceremonia de scrum of scrums es dar a los subequipos la agilidad que necesitan sin perder la visibilidad y la coordinaci\u00f3n. Tambi\u00e9n ayuda a asegurar que los subequipos est\u00e1n logrando sus objetivos del sprint, y que van en la direcci\u00f3n correcta para lograr el objetivo general del proyecto. La ceremonia del scrum de los scrums tiene lugar todos los d\u00edas y puede considerarse como un stand-up regular: Lo que se hizo el d\u00eda anterior por el sub-equipo. Lo que har\u00e1 hoy el subequipo. Cu\u00e1les son los bloqueos u otros problemas para el sub-equipo. Cu\u00e1les son los bloqueos o problemas que pueden afectar a otros subequipos. El resultado de la reuni\u00f3n ser\u00e1 una lista de impedimentos relacionados con la coordinaci\u00f3n de todo el proyecto. Las soluciones podr\u00edan ser: acordar las interfaces entre equipos, discutir los cambios de arquitectura, evolucionar los l\u00edmites de responsabilidad, etc. Esta lista de impedimentos suele gestionarse en un backlog separado, pero no es necesario.","title":"Objetivos"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#participacion","text":"La pauta com\u00fan es tener en promedio una persona por sub-equipo. En algunos casos, el representante del d\u00eda se selecciona al final de cada stand-up diario del sub-equipo y podr\u00eda cambiar cada d\u00eda. En la pr\u00e1ctica, tener un representante fijo tiende a ser m\u00e1s eficiente a largo plazo.","title":"Participaci\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#impacto","text":"Esta pr\u00e1ctica es \u00fatil en los casos de proyectos m\u00e1s largos y de mayor alcance, que requieren m\u00e1s personas. Cuando hay m\u00e1s personas, suele ser m\u00e1s f\u00e1cil dividir el proyecto en subequipos. Tener un scrum de scrums diario mejora la comunicaci\u00f3n, disminuye el riesgo de problemas de integraci\u00f3n y aumenta las posibilidades de \u00e9xito del proyecto. Cuando se opta por implementar Scrum of Scrums, hay que tener en cuenta que algunos miembros del equipo tendr\u00e1n reuniones adicionales que coordinar y en las que participar. Adem\u00e1s todos los miembros del equipo de cada sub-equipo deben ser actualizados sobre las decisiones en un momento posterior para asegurar un buen flujo de informaci\u00f3n.","title":"Impacto"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#medicion","text":"La forma m\u00e1s sencilla de medir el impacto es haciendo un seguimiento del tiempo de resoluci\u00f3n de los problemas en el backlog del scrum de scrums. Tambi\u00e9n se puede hacer un seguimiento de las cuestiones comunicadas durante la retrospectiva relacionadas con la coordinaci\u00f3n global.","title":"Medici\u00f3n"},{"location":"desarrollo%20%C3%A1gil/temas%20avanzados/organizaci%C3%B3n%20eficaz/scrum-of-scrums/#guia-de-facilitacion","text":"Esto deber\u00eda facilitarse como un stand-up normal.","title":"Gu\u00eda de facilitaci\u00f3n"},{"location":"documentacion/","text":"Documentaci\u00f3n Todo proyecto de desarrollo de software requiere documentaci\u00f3n. El desarrollo \u00e1gil de software valora m\u00e1s el software en funcionamiento que la documentaci\u00f3n exhaustiva. Aun as\u00ed, los proyectos deben incluir la informaci\u00f3n clave necesaria para entender el desarrollo y el uso del software generado. La documentaci\u00f3n no deber\u00eda ser una idea de \u00faltima hora. Se deben crear diferentes documentos y materiales escritos durante todo el ciclo de vida del proyecto, seg\u00fan las necesidades del mismo. Objetivos Facilitar la incorporaci\u00f3n de los nuevos miembros del equipo. Mejorar la comunicaci\u00f3n y la colaboraci\u00f3n entre los equipos. Mejorar la transici\u00f3n del proyecto a otro equipo. Desaf\u00edos Cuando trabajamos en un proyecto de ingenier\u00eda, solemos encontrarnos con uno o varios de estos retos relacionados con la documentaci\u00f3n: Inexistente No hay documentaci\u00f3n de ingreso, por lo que se tarda mucho en configurar el entorno cuando te unes al proyecto. Ning\u00fan documento en la wiki que explique los repositorios existentes, por lo que no puedes saber cu\u00e1l de repositorios disponibles debes clonar. No hay un README principal, as\u00ed que no sabes por d\u00f3nde empezar cuando clonas un repositorio. No hay una secci\u00f3n de \"c\u00f3mo contribuir\", as\u00ed que no sabes cu\u00e1l es la pol\u00edtica de ramas, d\u00f3nde a\u00f1adir nuevos documentos, etc. No hay directrices de c\u00f3digo, por lo que todo el mundo sigue diferentes convenciones de nomenclatura, etc. Oculto Imposible encontrar documentaci\u00f3n \u00fatil ya que est\u00e1 dispersa. Los procesos \u00fatiles se explican fuera de la herramienta de gesti\u00f3n del backlog y no se vinculan en ning\u00fan sitio. Decisiones tomadas en canales diferentes a la herramienta de gesti\u00f3n de backlogs y no registradas en ninguna parte. Incompleto No hay una pol\u00edtica clara sobre las ramas, por lo que cada uno nombra sus ramas de forma diferente. Faltan ajustes en el documento \"c\u00f3mo ejecutar esto\" que son necesarios para ejecutar la aplicaci\u00f3n. Inexacto Documentos no actualizados junto con el c\u00f3digo, por lo que no mencionan las carpetas correctas, las configuraciones, etc. Obsoletos Documentos de dise\u00f1o que ya no se aplican, en el mismo lugar que los documentos v\u00e1lidos. \u00bfCu\u00e1l muestra las \u00faltimas decisiones? Desordenados (tema / fecha) Los documentos no est\u00e1n organizados por tema/trabajo, por lo que no es f\u00e1cil encontrar la informaci\u00f3n relevante cuando se cambia a un nuevo flujo de trabajo. Los logs de decisiones de dise\u00f1o est\u00e1n desordenados y sin una fecha que ayude a determinar cu\u00e1l es la decisi\u00f3n final sobre algo. Duplicado No hay un archivo de configuraci\u00f3n disponible en un lugar centralizado como \u00fanica fuente de verdad, por lo que los desarrolladores deben seguir compartiendo sus propias versiones, y terminamos con muchos archivos que podr\u00edan o no funcionar. Una idea tard\u00eda Documentos clave creados varias semanas despu\u00e9s de iniciado el proyecto: incorporaci\u00f3n, funcionamiento de la aplicaci\u00f3n, etc. Documentos creados en el \u00faltimo momento, justo antes de finalizar el proyecto, olvidando que tambi\u00e9n ayudan al equipo mientras trabaja en el proyecto. Qu\u00e9 documentaci\u00f3n debe existir Proyecto y repositorios Mensajes de commit Pull Requests C\u00f3digo Elementos de trabajo (Work Items) APIs REST Mejores pr\u00e1cticas Establecimiento y gesti\u00f3n de la documentaci\u00f3n Creaci\u00f3n de una buena documentaci\u00f3n Sustituci\u00f3n de la documentaci\u00f3n por la automatizaci\u00f3n Herramientas Wikis Lenguajes markdown mermaid C\u00f3mo automatizar comprobaciones sencillas Integraci\u00f3n con Teams/Slack Recetas Uso de DocFx y Companion Tools para generar un sitio web de documentaci\u00f3n Desplegar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente C\u00f3mo crear un sitio web est\u00e1tico para su documentaci\u00f3n basado en MkDocs y Material para MkDocs Recursos Tipos de documentaci\u00f3n de software y mejores pr\u00e1cticas \u00bfPor qu\u00e9 es importante la documentaci\u00f3n del proyecto?","title":"Documentaci\u00f3n"},{"location":"documentacion/#documentacion","text":"Todo proyecto de desarrollo de software requiere documentaci\u00f3n. El desarrollo \u00e1gil de software valora m\u00e1s el software en funcionamiento que la documentaci\u00f3n exhaustiva. Aun as\u00ed, los proyectos deben incluir la informaci\u00f3n clave necesaria para entender el desarrollo y el uso del software generado. La documentaci\u00f3n no deber\u00eda ser una idea de \u00faltima hora. Se deben crear diferentes documentos y materiales escritos durante todo el ciclo de vida del proyecto, seg\u00fan las necesidades del mismo.","title":"Documentaci\u00f3n"},{"location":"documentacion/#objetivos","text":"Facilitar la incorporaci\u00f3n de los nuevos miembros del equipo. Mejorar la comunicaci\u00f3n y la colaboraci\u00f3n entre los equipos. Mejorar la transici\u00f3n del proyecto a otro equipo.","title":"Objetivos"},{"location":"documentacion/#desafios","text":"Cuando trabajamos en un proyecto de ingenier\u00eda, solemos encontrarnos con uno o varios de estos retos relacionados con la documentaci\u00f3n: Inexistente No hay documentaci\u00f3n de ingreso, por lo que se tarda mucho en configurar el entorno cuando te unes al proyecto. Ning\u00fan documento en la wiki que explique los repositorios existentes, por lo que no puedes saber cu\u00e1l de repositorios disponibles debes clonar. No hay un README principal, as\u00ed que no sabes por d\u00f3nde empezar cuando clonas un repositorio. No hay una secci\u00f3n de \"c\u00f3mo contribuir\", as\u00ed que no sabes cu\u00e1l es la pol\u00edtica de ramas, d\u00f3nde a\u00f1adir nuevos documentos, etc. No hay directrices de c\u00f3digo, por lo que todo el mundo sigue diferentes convenciones de nomenclatura, etc. Oculto Imposible encontrar documentaci\u00f3n \u00fatil ya que est\u00e1 dispersa. Los procesos \u00fatiles se explican fuera de la herramienta de gesti\u00f3n del backlog y no se vinculan en ning\u00fan sitio. Decisiones tomadas en canales diferentes a la herramienta de gesti\u00f3n de backlogs y no registradas en ninguna parte. Incompleto No hay una pol\u00edtica clara sobre las ramas, por lo que cada uno nombra sus ramas de forma diferente. Faltan ajustes en el documento \"c\u00f3mo ejecutar esto\" que son necesarios para ejecutar la aplicaci\u00f3n. Inexacto Documentos no actualizados junto con el c\u00f3digo, por lo que no mencionan las carpetas correctas, las configuraciones, etc. Obsoletos Documentos de dise\u00f1o que ya no se aplican, en el mismo lugar que los documentos v\u00e1lidos. \u00bfCu\u00e1l muestra las \u00faltimas decisiones? Desordenados (tema / fecha) Los documentos no est\u00e1n organizados por tema/trabajo, por lo que no es f\u00e1cil encontrar la informaci\u00f3n relevante cuando se cambia a un nuevo flujo de trabajo. Los logs de decisiones de dise\u00f1o est\u00e1n desordenados y sin una fecha que ayude a determinar cu\u00e1l es la decisi\u00f3n final sobre algo. Duplicado No hay un archivo de configuraci\u00f3n disponible en un lugar centralizado como \u00fanica fuente de verdad, por lo que los desarrolladores deben seguir compartiendo sus propias versiones, y terminamos con muchos archivos que podr\u00edan o no funcionar. Una idea tard\u00eda Documentos clave creados varias semanas despu\u00e9s de iniciado el proyecto: incorporaci\u00f3n, funcionamiento de la aplicaci\u00f3n, etc. Documentos creados en el \u00faltimo momento, justo antes de finalizar el proyecto, olvidando que tambi\u00e9n ayudan al equipo mientras trabaja en el proyecto.","title":"Desaf\u00edos"},{"location":"documentacion/#que-documentacion-debe-existir","text":"Proyecto y repositorios Mensajes de commit Pull Requests C\u00f3digo Elementos de trabajo (Work Items) APIs REST","title":"Qu\u00e9 documentaci\u00f3n debe existir"},{"location":"documentacion/#mejores-practicas","text":"Establecimiento y gesti\u00f3n de la documentaci\u00f3n Creaci\u00f3n de una buena documentaci\u00f3n Sustituci\u00f3n de la documentaci\u00f3n por la automatizaci\u00f3n","title":"Mejores pr\u00e1cticas"},{"location":"documentacion/#herramientas","text":"Wikis Lenguajes markdown mermaid C\u00f3mo automatizar comprobaciones sencillas Integraci\u00f3n con Teams/Slack","title":"Herramientas"},{"location":"documentacion/#recetas","text":"Uso de DocFx y Companion Tools para generar un sitio web de documentaci\u00f3n Desplegar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente C\u00f3mo crear un sitio web est\u00e1tico para su documentaci\u00f3n basado en MkDocs y Material para MkDocs","title":"Recetas"},{"location":"documentacion/#recursos","text":"Tipos de documentaci\u00f3n de software y mejores pr\u00e1cticas \u00bfPor qu\u00e9 es importante la documentaci\u00f3n del proyecto?","title":"Recursos"},{"location":"documentacion/gu%C3%ADa/code/","text":"C\u00f3digo Puede que hayas o\u00eddo m\u00e1s de una vez que debes escribir c\u00f3digo autodocumentado. Esto no significa que nunca debas comentar tu c\u00f3digo. Hay dos tipos de comentarios en el c\u00f3digo, los comentarios de implementaci\u00f3n y los comentarios de documentaci\u00f3n. Comentarios de implementaci\u00f3n Se utilizan para la documentaci\u00f3n interna, y est\u00e1n destinados a cualquier persona que pueda necesitar mantener el c\u00f3digo en el futuro, incluido tu futuro yo. El uso de estos comentarios suele considerarse c\u00f3digo sucio. Si necesitas aclarar tu c\u00f3digo, eso puede significar que el c\u00f3digo es demasiado complejo. As\u00ed que deber\u00edas trabajar para eliminar la aclaraci\u00f3n haciendo el c\u00f3digo m\u00e1s simple, m\u00e1s f\u00e1cil de leer y entender. A\u00fan as\u00ed, estos comentarios pueden ser \u00fatiles para dar una visi\u00f3n general del c\u00f3digo, o proporcionar informaci\u00f3n adicional de contexto que no est\u00e1 disponible en el propio c\u00f3digo. Comentarios de documentaci\u00f3n Los comentarios de documentaci\u00f3n son un tipo especial de comentario, que se a\u00f1ade encima de la definici\u00f3n de cualquier tipo o miembro definido por el usuario, y est\u00e1n destinados a cualquiera que pueda necesitar utilizar esos tipos o miembros en su propio c\u00f3digo. Si, por ejemplo, est\u00e1s construyendo una biblioteca o un framework, los comentarios doc pueden utilizarse para generar su documentaci\u00f3n. Esta documentaci\u00f3n debe servir como especificaci\u00f3n de la API, y/o como gu\u00eda de programaci\u00f3n.","title":"C\u00f3digo"},{"location":"documentacion/gu%C3%ADa/code/#codigo","text":"Puede que hayas o\u00eddo m\u00e1s de una vez que debes escribir c\u00f3digo autodocumentado. Esto no significa que nunca debas comentar tu c\u00f3digo. Hay dos tipos de comentarios en el c\u00f3digo, los comentarios de implementaci\u00f3n y los comentarios de documentaci\u00f3n.","title":"C\u00f3digo"},{"location":"documentacion/gu%C3%ADa/code/#comentarios-de-implementacion","text":"Se utilizan para la documentaci\u00f3n interna, y est\u00e1n destinados a cualquier persona que pueda necesitar mantener el c\u00f3digo en el futuro, incluido tu futuro yo. El uso de estos comentarios suele considerarse c\u00f3digo sucio. Si necesitas aclarar tu c\u00f3digo, eso puede significar que el c\u00f3digo es demasiado complejo. As\u00ed que deber\u00edas trabajar para eliminar la aclaraci\u00f3n haciendo el c\u00f3digo m\u00e1s simple, m\u00e1s f\u00e1cil de leer y entender. A\u00fan as\u00ed, estos comentarios pueden ser \u00fatiles para dar una visi\u00f3n general del c\u00f3digo, o proporcionar informaci\u00f3n adicional de contexto que no est\u00e1 disponible en el propio c\u00f3digo.","title":"Comentarios de implementaci\u00f3n"},{"location":"documentacion/gu%C3%ADa/code/#comentarios-de-documentacion","text":"Los comentarios de documentaci\u00f3n son un tipo especial de comentario, que se a\u00f1ade encima de la definici\u00f3n de cualquier tipo o miembro definido por el usuario, y est\u00e1n destinados a cualquiera que pueda necesitar utilizar esos tipos o miembros en su propio c\u00f3digo. Si, por ejemplo, est\u00e1s construyendo una biblioteca o un framework, los comentarios doc pueden utilizarse para generar su documentaci\u00f3n. Esta documentaci\u00f3n debe servir como especificaci\u00f3n de la API, y/o como gu\u00eda de programaci\u00f3n.","title":"Comentarios de documentaci\u00f3n"},{"location":"documentacion/gu%C3%ADa/project-and-repositories/","text":"Proyectos y repositorios Cada repositorio de c\u00f3digo fuente deber\u00eda incluir documentaci\u00f3n espec\u00edfica para \u00e9l (por ejemplo, en un Wiki dentro del repositorio), mientras que el propio proyecto deber\u00eda incluir documentaci\u00f3n general com\u00fan a todos sus repositorios asociados (por ejemplo, en un Wiki dentro de la herramienta de gesti\u00f3n de backlogs). Documentaci\u00f3n espec\u00edfica de un repositorio Introducci\u00f3n C\u00f3mo empezar Onboarding Configuraci\u00f3n: lenguaje de programaci\u00f3n, frameworks, plataformas, herramientas, etc. Entorno Sandbox Acuerdo de trabajo Gu\u00eda de contribuci\u00f3n Estructura: carpetas, proyectos, etc. C\u00f3mo compilar, probar, desplegar la soluci\u00f3n/cada proyecto Diferentes versiones de SO L\u00ednea de comandos + editores/IDEs Logs de decisiones de dise\u00f1o Registro de decisiones de arquitectura (ADR) Estudios comerciales Algunas secciones de la documentaci\u00f3n del repositorio pueden apuntar a la documentaci\u00f3n del proyecto (por ejemplo, Onboarding, Working Agreement, Contributing Guide). Documentaci\u00f3n com\u00fan a todos los repositorios Introducci\u00f3n Proyecto Stakeholders Definiciones Requisitos Onboarding Gu\u00eda del repositorio Producci\u00f3n, Spikes Acuerdos del equipo Manifiesto del equipo Breve resumen de las expectativas en torno a la forma de trabajar t\u00e9cnicamente y la mentalidad apoyada en el equipo. Por ejemplo, propiedad, respeto, colaboraci\u00f3n, transparencia. Acuerdo de trabajo C\u00f3mo trabajamos juntos como equipo y cu\u00e1les son nuestras expectativas y principios. Por ejemplo, la comunicaci\u00f3n, el equilibrio entre la vida laboral y la personal, el ritmo de scrum, la gesti\u00f3n del trabajo pendiente, la gesti\u00f3n del c\u00f3digo. Definici\u00f3n de Hecho Lista de tareas que deben completarse para cerrar una historia de usuario, un sprint o un hito. Definici\u00f3n de Listo Cu\u00e1n completa debe estar una historia de usuario para ser seleccionada como candidata a la estimaci\u00f3n en la planificaci\u00f3n del sprint. Gu\u00eda de contribuci\u00f3n Estructura de Repo Documentos de dise\u00f1o Estrategia de ramificaci\u00f3n y nombre de rama Estrategia de fusi\u00f3n e historial de commits Pull Requests Proceso de revisi\u00f3n del c\u00f3digo Lista de comprobaci\u00f3n de la revisi\u00f3n del c\u00f3digo Listas de comprobaci\u00f3n espec\u00edficas para cada lenguaje Dise\u00f1o del proyecto Alto nivel / Plan de juego Revisi\u00f3n del dise\u00f1o de hitos / \u00e9pica Plantillas de revisi\u00f3n del dise\u00f1o Plantilla de revisi\u00f3n de dise\u00f1o de hitos / \u00e9pica Plantilla de revisi\u00f3n de dise\u00f1o de features / historias Plantilla de revisi\u00f3n de dise\u00f1o de tareas Plantilla de log de decisiones Plantilla de log de Decisiones de Arquitectura (ADR) (Ejemplo 1, Ejemplo 2) Plantilla de estudio comercial","title":"Proyectos y repositorios"},{"location":"documentacion/gu%C3%ADa/project-and-repositories/#proyectos-y-repositorios","text":"Cada repositorio de c\u00f3digo fuente deber\u00eda incluir documentaci\u00f3n espec\u00edfica para \u00e9l (por ejemplo, en un Wiki dentro del repositorio), mientras que el propio proyecto deber\u00eda incluir documentaci\u00f3n general com\u00fan a todos sus repositorios asociados (por ejemplo, en un Wiki dentro de la herramienta de gesti\u00f3n de backlogs).","title":"Proyectos y repositorios"},{"location":"documentacion/gu%C3%ADa/project-and-repositories/#documentacion-especifica-de-un-repositorio","text":"Introducci\u00f3n C\u00f3mo empezar Onboarding Configuraci\u00f3n: lenguaje de programaci\u00f3n, frameworks, plataformas, herramientas, etc. Entorno Sandbox Acuerdo de trabajo Gu\u00eda de contribuci\u00f3n Estructura: carpetas, proyectos, etc. C\u00f3mo compilar, probar, desplegar la soluci\u00f3n/cada proyecto Diferentes versiones de SO L\u00ednea de comandos + editores/IDEs Logs de decisiones de dise\u00f1o Registro de decisiones de arquitectura (ADR) Estudios comerciales Algunas secciones de la documentaci\u00f3n del repositorio pueden apuntar a la documentaci\u00f3n del proyecto (por ejemplo, Onboarding, Working Agreement, Contributing Guide).","title":"Documentaci\u00f3n espec\u00edfica de un repositorio"},{"location":"documentacion/gu%C3%ADa/project-and-repositories/#documentacion-comun-a-todos-los-repositorios","text":"Introducci\u00f3n Proyecto Stakeholders Definiciones Requisitos Onboarding Gu\u00eda del repositorio Producci\u00f3n, Spikes Acuerdos del equipo Manifiesto del equipo Breve resumen de las expectativas en torno a la forma de trabajar t\u00e9cnicamente y la mentalidad apoyada en el equipo. Por ejemplo, propiedad, respeto, colaboraci\u00f3n, transparencia. Acuerdo de trabajo C\u00f3mo trabajamos juntos como equipo y cu\u00e1les son nuestras expectativas y principios. Por ejemplo, la comunicaci\u00f3n, el equilibrio entre la vida laboral y la personal, el ritmo de scrum, la gesti\u00f3n del trabajo pendiente, la gesti\u00f3n del c\u00f3digo. Definici\u00f3n de Hecho Lista de tareas que deben completarse para cerrar una historia de usuario, un sprint o un hito. Definici\u00f3n de Listo Cu\u00e1n completa debe estar una historia de usuario para ser seleccionada como candidata a la estimaci\u00f3n en la planificaci\u00f3n del sprint. Gu\u00eda de contribuci\u00f3n Estructura de Repo Documentos de dise\u00f1o Estrategia de ramificaci\u00f3n y nombre de rama Estrategia de fusi\u00f3n e historial de commits Pull Requests Proceso de revisi\u00f3n del c\u00f3digo Lista de comprobaci\u00f3n de la revisi\u00f3n del c\u00f3digo Listas de comprobaci\u00f3n espec\u00edficas para cada lenguaje Dise\u00f1o del proyecto Alto nivel / Plan de juego Revisi\u00f3n del dise\u00f1o de hitos / \u00e9pica Plantillas de revisi\u00f3n del dise\u00f1o Plantilla de revisi\u00f3n de dise\u00f1o de hitos / \u00e9pica Plantilla de revisi\u00f3n de dise\u00f1o de features / historias Plantilla de revisi\u00f3n de dise\u00f1o de tareas Plantilla de log de decisiones Plantilla de log de Decisiones de Arquitectura (ADR) (Ejemplo 1, Ejemplo 2) Plantilla de estudio comercial","title":"Documentaci\u00f3n com\u00fan a todos los repositorios"},{"location":"documentacion/gu%C3%ADa/pull-requests/","text":"Pull Requests Cuando creamos Pull Requests, debemos asegurarnos de que est\u00e1n debidamente documentados: T\u00edtulo y Descripci\u00f3n Descripci\u00f3n del PR Plantilla del PR Elementos de trabajo vinculados Comentarios Como autor, dir\u00edjase a todos los comentarios Como revisor, haga que los comentarios sean claros","title":"Pull Requests"},{"location":"documentacion/gu%C3%ADa/pull-requests/#pull-requests","text":"Cuando creamos Pull Requests, debemos asegurarnos de que est\u00e1n debidamente documentados: T\u00edtulo y Descripci\u00f3n Descripci\u00f3n del PR Plantilla del PR Elementos de trabajo vinculados Comentarios Como autor, dir\u00edjase a todos los comentarios Como revisor, haga que los comentarios sean claros","title":"Pull Requests"},{"location":"documentacion/gu%C3%ADa/rest-apis/","text":"APIs REST Cuando se crean APIs REST , se puede aprovechar la Especificaci\u00f3n OpenAPI (OAI) para describirlas: La Especificaci\u00f3n OpenAPI (OAI) define una descripci\u00f3n de interfaz est\u00e1ndar, independiente del lenguaje de programaci\u00f3n, para las APIs HTTP, que permite tanto a los humanos como a los ordenadores descubrir y entender las capacidades de un servicio sin necesidad de acceder al c\u00f3digo fuente, a la documentaci\u00f3n adicional o a la inspecci\u00f3n del tr\u00e1fico de red. Cuando se define correctamente mediante OpenAPI, un consumidor puede entender e interactuar con el servicio remoto con una cantidad m\u00ednima de l\u00f3gica de implementaci\u00f3n. Los casos de uso de los documentos de definici\u00f3n de API legibles por m\u00e1quina incluyen, entre otros, los siguientes: documentaci\u00f3n interactiva; generaci\u00f3n de c\u00f3digo para la documentaci\u00f3n, los clientes y los servidores; y automatizaci\u00f3n de casos de prueba. Los documentos OpenAPI describen los servicios de una API y se representan en formato YAML o JSON. Estos documentos pueden producirse y servirse est\u00e1ticamente o generarse din\u00e1micamente desde una aplicaci\u00f3n. Hay implementaciones disponibles para muchos lenguajes, incluyendo herramientas de bajo nivel, editores, interfaces de usuario, generadores de c\u00f3digo, etc. Aqu\u00ed puede encontrar una lista de herramientas conocidas para los diferentes lenguajes: Implementaciones de OpenAPI .","title":"APIs REST"},{"location":"documentacion/gu%C3%ADa/rest-apis/#apis-rest","text":"Cuando se crean APIs REST , se puede aprovechar la Especificaci\u00f3n OpenAPI (OAI) para describirlas: La Especificaci\u00f3n OpenAPI (OAI) define una descripci\u00f3n de interfaz est\u00e1ndar, independiente del lenguaje de programaci\u00f3n, para las APIs HTTP, que permite tanto a los humanos como a los ordenadores descubrir y entender las capacidades de un servicio sin necesidad de acceder al c\u00f3digo fuente, a la documentaci\u00f3n adicional o a la inspecci\u00f3n del tr\u00e1fico de red. Cuando se define correctamente mediante OpenAPI, un consumidor puede entender e interactuar con el servicio remoto con una cantidad m\u00ednima de l\u00f3gica de implementaci\u00f3n. Los casos de uso de los documentos de definici\u00f3n de API legibles por m\u00e1quina incluyen, entre otros, los siguientes: documentaci\u00f3n interactiva; generaci\u00f3n de c\u00f3digo para la documentaci\u00f3n, los clientes y los servidores; y automatizaci\u00f3n de casos de prueba. Los documentos OpenAPI describen los servicios de una API y se representan en formato YAML o JSON. Estos documentos pueden producirse y servirse est\u00e1ticamente o generarse din\u00e1micamente desde una aplicaci\u00f3n. Hay implementaciones disponibles para muchos lenguajes, incluyendo herramientas de bajo nivel, editores, interfaces de usuario, generadores de c\u00f3digo, etc. Aqu\u00ed puede encontrar una lista de herramientas conocidas para los diferentes lenguajes: Implementaciones de OpenAPI .","title":"APIs REST"},{"location":"documentacion/gu%C3%ADa/work-items/","text":"Work Items Aunque muchos equipos pueden trabajar con una lista plana de elementos, a veces resulta \u00fatil agrupar los elementos relacionados en una estructura jer\u00e1rquica. Epicas y Features Las historias de usuario / Product Backlog Items se convierten en Features, que suelen representar un producto entregable que responde a una necesidad del cliente. Y los Features se convierten en Epicas, que representan una iniciativa de negocio que debe llevarse a cabo. Cada Feature o Epica debe incluir tantos detalles como el equipo necesite: Comprender el alcance. Estimar el trabajo necesario. Desarrollar pruebas. Asegurar de que el producto final cumple los criterios de aceptaci\u00f3n. Detalles que deben a\u00f1adirse: \u00c1rea de valor: Negocio (entrega directa de valor al cliente) vs. Arquitectura (servicios t\u00e9cnicos para implementar las caracter\u00edsticas del negocio). Esfuerzo / Puntos de Historia / Tama\u00f1o: Estimaci\u00f3n relativa de la cantidad de trabajo necesaria para completar el elemento. Valor comercial: Prioridad de un elemento en comparaci\u00f3n con otros elementos del mismo tipo. Criticidad del tiempo: Los valores m\u00e1s altos indican que un elemento es m\u00e1s cr\u00edtico de tiempo que los elementos con valores m\u00e1s bajos. Fecha objetivo: en la que debe implementarse el feature. Se pueden utilizar etiquetas de elementos de trabajo para apoyar las consultas y el filtrado. Historias de Usuario / Elementos del Backlog del Producto Cada Historia de Usuario / Elemento del Backlog del Producto debe tener un tama\u00f1o tal que pueda ser completado dentro de un sprint. Debe a\u00f1adir los siguientes detalles a los elementos: T\u00edtulo: Normalmente se expresa como \"Como [persona], quiero [realizar una acci\u00f3n], para que [pueda lograr un resultado final]\". Descripci\u00f3n: Proporcione suficientes detalles para crear una comprensi\u00f3n compartida del alcance y apoyar los esfuerzos de estimaci\u00f3n. C\u00e9ntrese en el usuario, en lo que quiere conseguir y en el motivo. No describa c\u00f3mo desarrollar el producto. Proporcione suficientes detalles para que el equipo pueda escribir tareas y casos de prueba para implementar el elemento. Incluya revisiones de dise\u00f1o. Criterios de aceptaci\u00f3n: Defina lo que significa \"Hecho\". Actividad: Despliegue, Dise\u00f1o, Desarrollo, Documentaci\u00f3n, Requisitos, Pruebas. Esfuerzo / Puntos de historia / Tama\u00f1o: Estimaci\u00f3n relativa de la cantidad de trabajo necesaria para completar el elemento. Valor comercial: Prioridad de un elemento en comparaci\u00f3n con otros elementos del mismo tipo. Estimaci\u00f3n original: La cantidad de trabajo estimada necesaria para completar una tarea. Recuerde utilizar la secci\u00f3n de discusi\u00f3n de los elementos para hacer un seguimiento de los comentarios relacionados, y mencionar a las personas, grupos, elementos de trabajo o PRs cuando sea necesario. Tareas Cada tarea debe tener un tama\u00f1o tal que pueda completarse en un d\u00eda. Debe a\u00f1adir al menos los siguientes detalles a los elementos: T\u00edtulo. Descripci\u00f3n: Proporcione suficientes detalles para crear una comprensi\u00f3n compartida del alcance. Cualquier desarrollador deber\u00eda ser capaz de tomar el elemento y saber lo que hay que implementar. Incluya revisiones de dise\u00f1o. Referencia a la rama de trabajo en el repositorio de c\u00f3digo relacionado. Recuerde utilizar la secci\u00f3n de discusi\u00f3n de las tareas para hacer un seguimiento de los comentarios relacionados. Bugs Deber\u00eda utilizar bugs para capturar tanto el problema inicial como los descubrimientos en curso. Deber\u00eda a\u00f1adir al menos los siguientes detalles a los elementos de los bugs: T\u00edtulo. Descripci\u00f3n. Pasos para reproducirlo. Informaci\u00f3n del sistema / Encontrado en la compilaci\u00f3n: Configuraci\u00f3n del software y del sistema que es relevante para el bug y las pruebas a aplicar. Criterios de aceptaci\u00f3n: Criterios que hay que cumplir para poder cerrar el bug. Integrado en la compilaci\u00f3n: Nombre de la compilaci\u00f3n que incorpora el c\u00f3digo que corrige el bug. Prioridad: 1: El producto no debe salir al mercado sin que se haya resuelto correctamente el elemento de trabajo. 2: El producto no deber\u00eda salir a la venta sin la resoluci\u00f3n satisfactoria del elemento de trabajo, pero no es necesario abordarlo inmediatamente. 3: La resoluci\u00f3n del elemento de trabajo es opcional en funci\u00f3n de los recursos, el tiempo y el riesgo. Gravedad: 1 - Cr\u00edtico: Debe solucionarse. No hay m\u00e9todos alternativos aceptables. 2 - Alta: Considere la posibilidad de solucionarlo. Existe un m\u00e9todo alternativo aceptable. 3 - Medio: (Por defecto). 4 - Bajo. Issues / Impedimentos Representan actividades no planificadas que pueden impedir que el trabajo se realice. Por ejemplo: ambig\u00fcedad del feature, problemas de personal o de recursos, problemas con los entornos u otros riesgos que afectan al alcance, la calidad o el calendario. En general, estos elementos se vinculan a las historias de usuario o a otros elementos de trabajo. Acciones de las retrospectivas Despu\u00e9s de una retrospectiva, cada acci\u00f3n que requiera trabajo debe ser rastreada con su propia Tarea o Issue / Impedimento. Estos elementos pueden estar sin parentesco (sin v\u00ednculo con el elemento de backlog principal o la historia de usuario). Informaci\u00f3n relacionada Mejores pr\u00e1cticas para la gesti\u00f3n \u00e1gil de proyectos - Azure Boards Definir features y epicas, organizar los elementos del backlog - Azure Boards Crear el backlog del producto - Azure Boards A\u00f1adir tareas para apoyar la planificaci\u00f3n de sprints - Azure Boards Definir, capturar, clasificar y gestionar bugs o defectos de c\u00f3digo - Azure Boards A\u00f1adir y gestionar problemas o impedimentos - Azure Boards","title":"Work Items"},{"location":"documentacion/gu%C3%ADa/work-items/#work-items","text":"Aunque muchos equipos pueden trabajar con una lista plana de elementos, a veces resulta \u00fatil agrupar los elementos relacionados en una estructura jer\u00e1rquica.","title":"Work Items"},{"location":"documentacion/gu%C3%ADa/work-items/#epicas-y-features","text":"Las historias de usuario / Product Backlog Items se convierten en Features, que suelen representar un producto entregable que responde a una necesidad del cliente. Y los Features se convierten en Epicas, que representan una iniciativa de negocio que debe llevarse a cabo. Cada Feature o Epica debe incluir tantos detalles como el equipo necesite: Comprender el alcance. Estimar el trabajo necesario. Desarrollar pruebas. Asegurar de que el producto final cumple los criterios de aceptaci\u00f3n. Detalles que deben a\u00f1adirse: \u00c1rea de valor: Negocio (entrega directa de valor al cliente) vs. Arquitectura (servicios t\u00e9cnicos para implementar las caracter\u00edsticas del negocio). Esfuerzo / Puntos de Historia / Tama\u00f1o: Estimaci\u00f3n relativa de la cantidad de trabajo necesaria para completar el elemento. Valor comercial: Prioridad de un elemento en comparaci\u00f3n con otros elementos del mismo tipo. Criticidad del tiempo: Los valores m\u00e1s altos indican que un elemento es m\u00e1s cr\u00edtico de tiempo que los elementos con valores m\u00e1s bajos. Fecha objetivo: en la que debe implementarse el feature. Se pueden utilizar etiquetas de elementos de trabajo para apoyar las consultas y el filtrado.","title":"Epicas y Features"},{"location":"documentacion/gu%C3%ADa/work-items/#historias-de-usuario-elementos-del-backlog-del-producto","text":"Cada Historia de Usuario / Elemento del Backlog del Producto debe tener un tama\u00f1o tal que pueda ser completado dentro de un sprint. Debe a\u00f1adir los siguientes detalles a los elementos: T\u00edtulo: Normalmente se expresa como \"Como [persona], quiero [realizar una acci\u00f3n], para que [pueda lograr un resultado final]\". Descripci\u00f3n: Proporcione suficientes detalles para crear una comprensi\u00f3n compartida del alcance y apoyar los esfuerzos de estimaci\u00f3n. C\u00e9ntrese en el usuario, en lo que quiere conseguir y en el motivo. No describa c\u00f3mo desarrollar el producto. Proporcione suficientes detalles para que el equipo pueda escribir tareas y casos de prueba para implementar el elemento. Incluya revisiones de dise\u00f1o. Criterios de aceptaci\u00f3n: Defina lo que significa \"Hecho\". Actividad: Despliegue, Dise\u00f1o, Desarrollo, Documentaci\u00f3n, Requisitos, Pruebas. Esfuerzo / Puntos de historia / Tama\u00f1o: Estimaci\u00f3n relativa de la cantidad de trabajo necesaria para completar el elemento. Valor comercial: Prioridad de un elemento en comparaci\u00f3n con otros elementos del mismo tipo. Estimaci\u00f3n original: La cantidad de trabajo estimada necesaria para completar una tarea. Recuerde utilizar la secci\u00f3n de discusi\u00f3n de los elementos para hacer un seguimiento de los comentarios relacionados, y mencionar a las personas, grupos, elementos de trabajo o PRs cuando sea necesario.","title":"Historias de Usuario / Elementos del Backlog del Producto"},{"location":"documentacion/gu%C3%ADa/work-items/#tareas","text":"Cada tarea debe tener un tama\u00f1o tal que pueda completarse en un d\u00eda. Debe a\u00f1adir al menos los siguientes detalles a los elementos: T\u00edtulo. Descripci\u00f3n: Proporcione suficientes detalles para crear una comprensi\u00f3n compartida del alcance. Cualquier desarrollador deber\u00eda ser capaz de tomar el elemento y saber lo que hay que implementar. Incluya revisiones de dise\u00f1o. Referencia a la rama de trabajo en el repositorio de c\u00f3digo relacionado. Recuerde utilizar la secci\u00f3n de discusi\u00f3n de las tareas para hacer un seguimiento de los comentarios relacionados.","title":"Tareas"},{"location":"documentacion/gu%C3%ADa/work-items/#bugs","text":"Deber\u00eda utilizar bugs para capturar tanto el problema inicial como los descubrimientos en curso. Deber\u00eda a\u00f1adir al menos los siguientes detalles a los elementos de los bugs: T\u00edtulo. Descripci\u00f3n. Pasos para reproducirlo. Informaci\u00f3n del sistema / Encontrado en la compilaci\u00f3n: Configuraci\u00f3n del software y del sistema que es relevante para el bug y las pruebas a aplicar. Criterios de aceptaci\u00f3n: Criterios que hay que cumplir para poder cerrar el bug. Integrado en la compilaci\u00f3n: Nombre de la compilaci\u00f3n que incorpora el c\u00f3digo que corrige el bug. Prioridad: 1: El producto no debe salir al mercado sin que se haya resuelto correctamente el elemento de trabajo. 2: El producto no deber\u00eda salir a la venta sin la resoluci\u00f3n satisfactoria del elemento de trabajo, pero no es necesario abordarlo inmediatamente. 3: La resoluci\u00f3n del elemento de trabajo es opcional en funci\u00f3n de los recursos, el tiempo y el riesgo. Gravedad: 1 - Cr\u00edtico: Debe solucionarse. No hay m\u00e9todos alternativos aceptables. 2 - Alta: Considere la posibilidad de solucionarlo. Existe un m\u00e9todo alternativo aceptable. 3 - Medio: (Por defecto). 4 - Bajo.","title":"Bugs"},{"location":"documentacion/gu%C3%ADa/work-items/#issues-impedimentos","text":"Representan actividades no planificadas que pueden impedir que el trabajo se realice. Por ejemplo: ambig\u00fcedad del feature, problemas de personal o de recursos, problemas con los entornos u otros riesgos que afectan al alcance, la calidad o el calendario. En general, estos elementos se vinculan a las historias de usuario o a otros elementos de trabajo.","title":"Issues / Impedimentos"},{"location":"documentacion/gu%C3%ADa/work-items/#acciones-de-las-retrospectivas","text":"Despu\u00e9s de una retrospectiva, cada acci\u00f3n que requiera trabajo debe ser rastreada con su propia Tarea o Issue / Impedimento. Estos elementos pueden estar sin parentesco (sin v\u00ednculo con el elemento de backlog principal o la historia de usuario).","title":"Acciones de las retrospectivas"},{"location":"documentacion/gu%C3%ADa/work-items/#informacion-relacionada","text":"Mejores pr\u00e1cticas para la gesti\u00f3n \u00e1gil de proyectos - Azure Boards Definir features y epicas, organizar los elementos del backlog - Azure Boards Crear el backlog del producto - Azure Boards A\u00f1adir tareas para apoyar la planificaci\u00f3n de sprints - Azure Boards Definir, capturar, clasificar y gestionar bugs o defectos de c\u00f3digo - Azure Boards A\u00f1adir y gestionar problemas o impedimentos - Azure Boards","title":"Informaci\u00f3n relacionada"},{"location":"documentacion/herramientas/automation/","text":"C\u00f3mo automatizar comprobaciones sencillas Si quieres automatizar algunas comprobaciones en tus documentos Markdown, hay varias herramientas que puedes aprovechar. Por ejemplo: An\u00e1lisis de c\u00f3digo / Linting markdownlint para verificar la sintaxis de Markdown y aplicar reglas que hagan el texto m\u00e1s legible. markdown-link-check para extraer enlaces de los textos Markdown y comprobar si cada enlace est\u00e1 vivo (200 OK) o muerto. proselint para revisar la jerga, los errores ortogr\u00e1ficos, la redundancia, el lenguaje corporativo y otros problemas relacionados con el lenguaje. Imagen Docker para node-markdown-spellcheck , una imagen docker ligera para revisar la ortograf\u00eda de los archivos markdown. Extensiones de VS Code markdownlint para examinar los documentos Markdown y obtener advertencias sobre las violaciones de las reglas durante la edici\u00f3n. Automatizaci\u00f3n pre-commit para usar scripts hook de Git para identificar problemas simples antes de enviar nuestro c\u00f3digo o documentaci\u00f3n para su revisi\u00f3n. Comprobar la validaci\u00f3n de la compilaci\u00f3n para automatizar el linting para PRs. Comprobar la canalizaci\u00f3n CI para una mejor documentaci\u00f3n de una canalizaci\u00f3n de ejemplo con markdownlint, markdown-link-check y write-good. Sobre las reglas de linting El equipo debe tener claro qu\u00e9 reglas de linting son necesarias y no deben ser anuladas con herramientas o comentarios. El equipo debe llegar a un consenso sobre cu\u00e1ndo anular las reglas de las herramientas.","title":"C\u00f3mo automatizar comprobaciones sencillas"},{"location":"documentacion/herramientas/automation/#como-automatizar-comprobaciones-sencillas","text":"Si quieres automatizar algunas comprobaciones en tus documentos Markdown, hay varias herramientas que puedes aprovechar. Por ejemplo: An\u00e1lisis de c\u00f3digo / Linting markdownlint para verificar la sintaxis de Markdown y aplicar reglas que hagan el texto m\u00e1s legible. markdown-link-check para extraer enlaces de los textos Markdown y comprobar si cada enlace est\u00e1 vivo (200 OK) o muerto. proselint para revisar la jerga, los errores ortogr\u00e1ficos, la redundancia, el lenguaje corporativo y otros problemas relacionados con el lenguaje. Imagen Docker para node-markdown-spellcheck , una imagen docker ligera para revisar la ortograf\u00eda de los archivos markdown. Extensiones de VS Code markdownlint para examinar los documentos Markdown y obtener advertencias sobre las violaciones de las reglas durante la edici\u00f3n. Automatizaci\u00f3n pre-commit para usar scripts hook de Git para identificar problemas simples antes de enviar nuestro c\u00f3digo o documentaci\u00f3n para su revisi\u00f3n. Comprobar la validaci\u00f3n de la compilaci\u00f3n para automatizar el linting para PRs. Comprobar la canalizaci\u00f3n CI para una mejor documentaci\u00f3n de una canalizaci\u00f3n de ejemplo con markdownlint, markdown-link-check y write-good.","title":"C\u00f3mo automatizar comprobaciones sencillas"},{"location":"documentacion/herramientas/automation/#sobre-las-reglas-de-linting","text":"El equipo debe tener claro qu\u00e9 reglas de linting son necesarias y no deben ser anuladas con herramientas o comentarios. El equipo debe llegar a un consenso sobre cu\u00e1ndo anular las reglas de las herramientas.","title":"Sobre las reglas de linting"},{"location":"documentacion/herramientas/integrations/","text":"Integraci\u00f3n con Teams/Slack Supervise sus repositorios de Azure y reciba notificaciones en su canal cada vez que el c\u00f3digo sea enviado/comprobado y cada vez que se cree un pull request (PR), se actualice o se intente una fusi\u00f3n. Azure Repos con Microsoft Teams Azure Repos con Slack","title":"Integraci\u00f3n con Teams/Slack"},{"location":"documentacion/herramientas/integrations/#integracion-con-teamsslack","text":"Supervise sus repositorios de Azure y reciba notificaciones en su canal cada vez que el c\u00f3digo sea enviado/comprobado y cada vez que se cree un pull request (PR), se actualice o se intente una fusi\u00f3n. Azure Repos con Microsoft Teams Azure Repos con Slack","title":"Integraci\u00f3n con Teams/Slack"},{"location":"documentacion/herramientas/languages/","text":"Lenguajes Markdown Markdown es uno de los lenguajes de marcado m\u00e1s populares para a\u00f1adir formato rico, tablas e im\u00e1genes a su documentaci\u00f3n utilizando documentos de texto plano. Los archivos Markdown (.md) pueden ser controlados en un repositorio junto con su c\u00f3digo. M\u00e1s informaci\u00f3n: Primeros pasos Cheat Sheet Sintaxis b\u00e1sica Sintaxis extendida Sintaxis Wiki Markdown Herramientas: Markdown y Visual Studio Code C\u00f3mo automatizar comprobaciones sencillas Mermaid Mermaid le permite crear diagramas utilizando definiciones de texto que luego pueden ser representados con una herramienta de diagramaci\u00f3n y gr\u00e1ficos. Los archivos de Mermaid (.mmd) pueden ser controlados en un repositorio junto con su c\u00f3digo. Tambi\u00e9n se recomienda incluir archivos de imagen (.png) con los diagramas renderizados bajo control de versiones. Sus archivos markdown deben enlazar los archivos de imagen, para que puedan ser le\u00eddos sin necesidad de una herramienta de renderizado Mermaid (por ejemplo, durante la revisi\u00f3n de Pull Request). M\u00e1s informaci\u00f3n: Acerca de Mermaid Sintaxis de los diagramas Herramientas: Mermaid Live Editor Vista previa de Markdown Soporte de Mermaid para Visual Studio Code","title":"Lenguajes"},{"location":"documentacion/herramientas/languages/#lenguajes","text":"","title":"Lenguajes"},{"location":"documentacion/herramientas/languages/#markdown","text":"Markdown es uno de los lenguajes de marcado m\u00e1s populares para a\u00f1adir formato rico, tablas e im\u00e1genes a su documentaci\u00f3n utilizando documentos de texto plano. Los archivos Markdown (.md) pueden ser controlados en un repositorio junto con su c\u00f3digo. M\u00e1s informaci\u00f3n: Primeros pasos Cheat Sheet Sintaxis b\u00e1sica Sintaxis extendida Sintaxis Wiki Markdown Herramientas: Markdown y Visual Studio Code C\u00f3mo automatizar comprobaciones sencillas","title":"Markdown"},{"location":"documentacion/herramientas/languages/#mermaid","text":"Mermaid le permite crear diagramas utilizando definiciones de texto que luego pueden ser representados con una herramienta de diagramaci\u00f3n y gr\u00e1ficos. Los archivos de Mermaid (.mmd) pueden ser controlados en un repositorio junto con su c\u00f3digo. Tambi\u00e9n se recomienda incluir archivos de imagen (.png) con los diagramas renderizados bajo control de versiones. Sus archivos markdown deben enlazar los archivos de imagen, para que puedan ser le\u00eddos sin necesidad de una herramienta de renderizado Mermaid (por ejemplo, durante la revisi\u00f3n de Pull Request). M\u00e1s informaci\u00f3n: Acerca de Mermaid Sintaxis de los diagramas Herramientas: Mermaid Live Editor Vista previa de Markdown Soporte de Mermaid para Visual Studio Code","title":"Mermaid"},{"location":"documentacion/herramientas/wikis/","text":"Wikis Utiliza una wiki de proyecto de equipo para compartir informaci\u00f3n con otros miembros del equipo. Cuando se aprovisiona una wiki desde cero, un nuevo repositorio Git almacena sus archivos Markdown, im\u00e1genes, archivos adjuntos y secuencia de p\u00e1ginas. Este wiki admite la edici\u00f3n colaborativa de su contenido y estructura. En Azure DevOps, tienes las siguientes opciones para mantener el contenido del wiki: Aprovisionar un wiki para su proyecto de equipo. Esta opci\u00f3n s\u00f3lo admite un wiki para el proyecto del equipo. Publicar archivos Markdown definidos en un repositorio Git en un wiki. Con esta opci\u00f3n, puedes mantener varios wikis versionados para dar soporte a tus necesidades de contenido. M\u00e1s informaci\u00f3n: Acerca de las wikis, READMEs y Markdown. Wikis versionadas vs. c\u00f3digo publicado como wiki. Crear una wiki para tu proyecto. Gestionar wikis. Wikis frente a notebooks digitales (por ejemplo, OneNote) Cuando trabajas en un proyecto, puedes decidir documentar los detalles relevantes o registrar las decisiones importantes sobre el proyecto en un notebook digital. Herramientas como OneNote te permiten organizar, navegar y buscar f\u00e1cilmente tus notas. Estas notas pueden compartirse y crearse f\u00e1cilmente con otras personas. Adem\u00e1s, los wikis facilitan enormemente el proceso de creaci\u00f3n y gesti\u00f3n de la documentaci\u00f3n, ya que nos permiten controlar el origen de la misma.","title":"Wikis"},{"location":"documentacion/herramientas/wikis/#wikis","text":"Utiliza una wiki de proyecto de equipo para compartir informaci\u00f3n con otros miembros del equipo. Cuando se aprovisiona una wiki desde cero, un nuevo repositorio Git almacena sus archivos Markdown, im\u00e1genes, archivos adjuntos y secuencia de p\u00e1ginas. Este wiki admite la edici\u00f3n colaborativa de su contenido y estructura. En Azure DevOps, tienes las siguientes opciones para mantener el contenido del wiki: Aprovisionar un wiki para su proyecto de equipo. Esta opci\u00f3n s\u00f3lo admite un wiki para el proyecto del equipo. Publicar archivos Markdown definidos en un repositorio Git en un wiki. Con esta opci\u00f3n, puedes mantener varios wikis versionados para dar soporte a tus necesidades de contenido. M\u00e1s informaci\u00f3n: Acerca de las wikis, READMEs y Markdown. Wikis versionadas vs. c\u00f3digo publicado como wiki. Crear una wiki para tu proyecto. Gestionar wikis.","title":"Wikis"},{"location":"documentacion/herramientas/wikis/#wikis-frente-a-notebooks-digitales-por-ejemplo-onenote","text":"Cuando trabajas en un proyecto, puedes decidir documentar los detalles relevantes o registrar las decisiones importantes sobre el proyecto en un notebook digital. Herramientas como OneNote te permiten organizar, navegar y buscar f\u00e1cilmente tus notas. Estas notas pueden compartirse y crearse f\u00e1cilmente con otras personas. Adem\u00e1s, los wikis facilitan enormemente el proceso de creaci\u00f3n y gesti\u00f3n de la documentaci\u00f3n, ya que nos permiten controlar el origen de la misma.","title":"Wikis frente a notebooks digitales (por ejemplo, OneNote)"},{"location":"documentacion/mejores%20pr%C3%A1cticas/automation/","text":"Sustituci\u00f3n de la documentaci\u00f3n por la automatizaci\u00f3n Puedes documentar c\u00f3mo configurar tu m\u00e1quina de desarrollo con la versi\u00f3n correcta del framework necesaria para ejecutar el c\u00f3digo, qu\u00e9 extensiones son \u00fatiles para desarrollar la aplicaci\u00f3n con tu editor, o c\u00f3mo configurar tu editor para lanzar y depurar la aplicaci\u00f3n. Si es posible, una mejor soluci\u00f3n es proporcionar los medios para automatizar la instalaci\u00f3n de herramientas, el inicio de la aplicaci\u00f3n, etc., en su lugar. A continuaci\u00f3n se ofrecen algunos ejemplos: Contenedores de desarrollo en Visual Studio Code La extensi\u00f3n Visual Studio Code Remote - Containers le permite utilizar un contenedor Docker como un entorno de desarrollo completo. Le permite abrir cualquier carpeta dentro de un contenedor (o montada en \u00e9l) y aprovechar todo el conjunto de funciones de Visual Studio Code. Informaci\u00f3n adicional: Desarrollando dentro de un contenedor . Lanzar configuraciones y tareas en Visual Studio Code Las configuraciones de lanzamiento permiten configurar y guardar los detalles de configuraci\u00f3n de la depuraci\u00f3n. Las tareas pueden configurarse para ejecutar scripts e iniciar procesos, de modo que muchas de estas herramientas existentes pueden utilizarse desde VS Code sin tener que introducir una l\u00ednea de comandos o escribir nuevo c\u00f3digo.","title":"Sustituci\u00f3n de la documentaci\u00f3n por la automatizaci\u00f3n"},{"location":"documentacion/mejores%20pr%C3%A1cticas/automation/#sustitucion-de-la-documentacion-por-la-automatizacion","text":"Puedes documentar c\u00f3mo configurar tu m\u00e1quina de desarrollo con la versi\u00f3n correcta del framework necesaria para ejecutar el c\u00f3digo, qu\u00e9 extensiones son \u00fatiles para desarrollar la aplicaci\u00f3n con tu editor, o c\u00f3mo configurar tu editor para lanzar y depurar la aplicaci\u00f3n. Si es posible, una mejor soluci\u00f3n es proporcionar los medios para automatizar la instalaci\u00f3n de herramientas, el inicio de la aplicaci\u00f3n, etc., en su lugar. A continuaci\u00f3n se ofrecen algunos ejemplos:","title":"Sustituci\u00f3n de la documentaci\u00f3n por la automatizaci\u00f3n"},{"location":"documentacion/mejores%20pr%C3%A1cticas/automation/#contenedores-de-desarrollo-en-visual-studio-code","text":"La extensi\u00f3n Visual Studio Code Remote - Containers le permite utilizar un contenedor Docker como un entorno de desarrollo completo. Le permite abrir cualquier carpeta dentro de un contenedor (o montada en \u00e9l) y aprovechar todo el conjunto de funciones de Visual Studio Code. Informaci\u00f3n adicional: Desarrollando dentro de un contenedor .","title":"Contenedores de desarrollo en Visual Studio Code"},{"location":"documentacion/mejores%20pr%C3%A1cticas/automation/#lanzar-configuraciones-y-tareas-en-visual-studio-code","text":"Las configuraciones de lanzamiento permiten configurar y guardar los detalles de configuraci\u00f3n de la depuraci\u00f3n. Las tareas pueden configurarse para ejecutar scripts e iniciar procesos, de modo que muchas de estas herramientas existentes pueden utilizarse desde VS Code sin tener que introducir una l\u00ednea de comandos o escribir nuevo c\u00f3digo.","title":"Lanzar configuraciones y tareas en Visual Studio Code"},{"location":"documentacion/mejores%20pr%C3%A1cticas/establish-and-manage/","text":"Establecimiento y gesti\u00f3n de la documentaci\u00f3n La documentaci\u00f3n debe estar controlada por el repositorio de c\u00f3digo. Los Pull Requests se pueden utilizar para informar a otros sobre los cambios, para que puedan ser revisados y discutidos. Por ejemplo, las revisiones de dise\u00f1o as\u00edncronas. Herramientas Wikis","title":"Establecimiento y gesti\u00f3n de la documentaci\u00f3n"},{"location":"documentacion/mejores%20pr%C3%A1cticas/establish-and-manage/#establecimiento-y-gestion-de-la-documentacion","text":"La documentaci\u00f3n debe estar controlada por el repositorio de c\u00f3digo. Los Pull Requests se pueden utilizar para informar a otros sobre los cambios, para que puedan ser revisados y discutidos. Por ejemplo, las revisiones de dise\u00f1o as\u00edncronas.","title":"Establecimiento y gesti\u00f3n de la documentaci\u00f3n"},{"location":"documentacion/mejores%20pr%C3%A1cticas/establish-and-manage/#herramientas","text":"Wikis","title":"Herramientas"},{"location":"documentacion/mejores%20pr%C3%A1cticas/good-documentation/","text":"Crear una buena documentaci\u00f3n Revise la Code Review Checklist para la documentaci\u00f3n para obtener consejos sobre c\u00f3mo escribir una buena documentaci\u00f3n. Una buena documentaci\u00f3n debe seguir las pautas de la buena escritura: Directrices de estilo de escritura .","title":"Crear una buena documentaci\u00f3n"},{"location":"documentacion/mejores%20pr%C3%A1cticas/good-documentation/#crear-una-buena-documentacion","text":"Revise la Code Review Checklist para la documentaci\u00f3n para obtener consejos sobre c\u00f3mo escribir una buena documentaci\u00f3n. Una buena documentaci\u00f3n debe seguir las pautas de la buena escritura: Directrices de estilo de escritura .","title":"Crear una buena documentaci\u00f3n"},{"location":"documentacion/recetas/deploy-docfx-azure-website/","text":"Implementar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente En el art\u00edculo Uso de DocFx y las herramientas complementarias para generar un sitio web de documentaci\u00f3n se describe el proceso para generar el contenido de un sitio web de documentaci\u00f3n utilizando DocFx. En este documento se describe c\u00f3mo configurar un sitio web de Azure para alojar el contenido y automatizar el despliegue en el mismo utilizando un pipeline en Azure DevOps. El ejemplo QuickStart que se proporciona para una configuraci\u00f3n r\u00e1pida de la generaci\u00f3n de DocFx tambi\u00e9n contiene los archivos explicados en este documento. Especialmente las carpetas .pipelines y de infraestructura. Si se utiliza la carpeta QuickStart se pueden seguir los siguientes pasos. En la carpeta de infraestructura se encuentran los archivos Terraform para crear el sitio web en un entorno Azure. De forma inmediata, el script crear\u00e1 un sitio web en el que se puede desplegar el contenido de la documentaci\u00f3n. Instalar Terraform Puede utilizar herramientas como Chocolatey para instalar Terraform: choco install terraform Establecer las variables adecuadas En el inicio r\u00e1pido, la autenticaci\u00f3n est\u00e1 deshabilitada. Si quieres habilitarla, aseg\u00farate de haber creado una aplicaci\u00f3n en Azure AD y tener el ID de cliente. Este ID de cliente debe ser establecido como el valor de la variable client_id en variables.tf. En el main.tf aseg\u00farese de descomentar la configuraci\u00f3n de autenticaci\u00f3n en el servicio de la aplicaci\u00f3n. Para m\u00e1s informaci\u00f3n consulte Configurar la autenticaci\u00f3n de Azure AD - Azure App Service . Si quieres establecer un dominio personalizado para tu sitio web de documentaci\u00f3n con un certificado SSL tienes que hacer algunos pasos adicionales. Tienes que crear un Key Vault y almacenar el certificado all\u00ed. El siguiente paso es descomentar y establecer los valores en variables.tf. Tambi\u00e9n tienes que descomentar los pasos necesarios en main.tf. Todo se indica mediante cuadros de comentarios. Para m\u00e1s informaci\u00f3n ver A\u00f1adir un certificado TLS/SSL en Azure App Service . En los siguientes p\u00e1rrafos encontrar\u00e1 informaci\u00f3n adicional sobre el certificado SSL, el dominio personalizado y Azure App Service. Si est\u00e1 familiarizado con ello o no lo necesita, contin\u00fae en Despliegue de los recursos de Azure desde su m\u00e1quina local . Certificado SSL Para asegurar un sitio web con un nombre de dominio personalizado y un certificado, puede encontrar los pasos a seguir en el art\u00edculo A\u00f1adir un certificado TLS/SSL en Azure App Service . Ese art\u00edculo tambi\u00e9n contiene una descripci\u00f3n de las formas de obtener un certificado y los requisitos para un certificado. Si quieres empezar con un certificado de desarrollo para probar el proceso, puedes crear uno t\u00fa mismo. Puedes hacerlo en PowerShell con el siguiente script. Reemplace: [SU DOMINIO] con el dominio que desea registrar [CONTRASE\u00d1A] con la contrase\u00f1a del certificado. [FILENAME] para el nombre del archivo de salida del certificado. Puedes almacenar este script en un archivo de script de PowerShell. $cert = New-SelfSignedCertificate -CertStoreLocation cert :\\ currentuser \\ my -Subject \"cn=[YOUR DOMAIN]\" -DnsName \"[YOUR DOMAIN]\" $pwd = ConvertTo-SecureString -String '[PASSWORD]' -Force -AsPlainText $path = 'cert:\\currentuser\\my\\' + $cert . thumbprint Export-PfxCertificate -cert $path -FilePath [FILENAME] . pfx -Password $pwd El certificado debe almacenarse en Key Vault. Vaya a Configuraci\u00f3n > Certificados en el men\u00fa de la izquierda del Key Vault y haga clic en Generar/Importar . Proporcione estos detalles: M\u00e9todo de creaci\u00f3n del certificado: Import Nombre del certificado: por ejemplo, ssl-certificate Cargar archivo de certificado: seleccione el archivo en disco para ello. Contrase\u00f1a: es la [CONTRASE\u00d1A] a la que nos referimos anteriormente. Registro de dominios personalizados Para utilizar un dominio personalizado hay que hacer algunas cosas. El proceso en el portal de Azure se describe en el art\u00edculo Tutorial: Asignar un nombre DNS personalizado existente a Azure App Service . Una parte importante se describe en el apartado Obtener un ID de verificaci\u00f3n del dominio . Este ID necesita ser registrado con la descripci\u00f3n DNS como un registro TXT. Es importante saber que este ID de verificaci\u00f3n de dominio personalizado es el mismo para todos los recursos web en la misma suscripci\u00f3n de Azure. Consulte este problema de StackOverflow . Esto significa que este ID debe ser registrado s\u00f3lo una vez para una suscripci\u00f3n Azure. Y esto permite la (re)creaci\u00f3n de un servicio de aplicaci\u00f3n con el dominio personalizado a trav\u00e9s del script. A\u00f1adir permisos Get para Microsoft Azure App Service Azure App Service necesita acceder a Key Vault para obtener el certificado. Esto es necesario para la primera ejecuci\u00f3n, pero tambi\u00e9n cuando se renueva el certificado en el Key Vault. Para ello, Azure App Service accede a Key Vault con la identidad proporcionada por el recurso App Service. Esta identidad se puede encontrar con el nombre principal del servicio abfa0a7c-a6b6-4736-8310-5855508787cd o Microsoft Azure App Service y es de tipo Application. Este ID es el mismo para todas las suscripciones de Azure. Debe tener permisos de obtenci\u00f3n de secretos y certificados. Para obtener m\u00e1s informaci\u00f3n, consulte este art\u00edculo Importar un certificado desde Key Vault . A\u00f1adir el dominio personalizado y el certificado SSL al servicio de la aplicaci\u00f3n Una vez que tenemos el certificado SSL y hay un registro de DNS completo como se ha descrito, podemos descomentar el c\u00f3digo en el script Terraform de la carpeta Quick Start para adjuntarlo al App Service. En este script es necesario referenciar el certificado en el Key Vault com\u00fan y utilizarlo en la vinculaci\u00f3n del nombre de host personalizado. El nombre de host personalizado se asigna tambi\u00e9n en el script. La configuraci\u00f3n ssl_state debe ser SniEnabled si est\u00e1 utilizando un certificado SSL. Ahora la creaci\u00f3n del sitio web autenticado con un dominio personalizado est\u00e1 automatizada. Despliegue de los recursos de Azure desde su m\u00e1quina local Abra un s\u00edmbolo del sistema. Para que los comandos se ejecuten, necesitas tener una conexi\u00f3n con tu suscripci\u00f3n de Azure. Esto se puede hacer usando Azure Cli. Escribe este comando: az login Esto utilizar\u00e1 el navegador web para conectarse a su cuenta. Puede comprobar la suscripci\u00f3n conectada con este comando: az account show Si tiene que cambiar a otra suscripci\u00f3n, utilice este comando donde sustituye [id] por el id de la suscripci\u00f3n a seleccionar: az account set --subscription [ id ] Una vez hecho esto, ejecute este comando para inicializar: terraform init Ahora puedes ejecutar el comando para planificar lo que har\u00e1 el script. Ejecuta este comando cada vez que se realicen cambios en los scripts de terraformaci\u00f3n: terraform plan Inspeccione el resultado mostrado. Si es lo que espera, aplique estos cambios con este comando: terraform apply Cuando se le pida la aprobaci\u00f3n, escriba \"s\u00ed\" y ENTER. Tambi\u00e9n puede a\u00f1adir el flag -auto-aprobaci\u00f3n al comando apply. Despliegue del sitio web desde un pipeline La mejor manera de crear los recursos y desplegarlos, es hacerlo autom\u00e1ticamente en un pipeline. Para ello se proporciona el pipeline .pipelines/documentation.yml. Cree un pipeline y haga referencia a este archivo YAML. IMPORTANTE: la carpeta Quick Start contiene un web.config que es necesario para el despliegue en IIS o Azure App Service. Esto permite el uso del archivo json para las solicitudes de b\u00fasqueda. Si no tienes esto en su lugar, la b\u00fasqueda de texto nunca devolver\u00e1 nada y resultar\u00e1 en 404. Usted tiene que crear una conexi\u00f3n de servicio en su entorno DevOps para conectarse a la suscripci\u00f3n de Azure que desea implementar. IMPORTANTE: establece las variables AzureConnectionName con el nombre de la Conexi\u00f3n de Servicio y AzureAppServiceName con el nombre que determinaste en el infrastructure/variables.tf.","title":"Implementar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#implementar-el-sitio-web-de-documentacion-de-docfx-en-un-sitio-web-de-azure-automaticamente","text":"En el art\u00edculo Uso de DocFx y las herramientas complementarias para generar un sitio web de documentaci\u00f3n se describe el proceso para generar el contenido de un sitio web de documentaci\u00f3n utilizando DocFx. En este documento se describe c\u00f3mo configurar un sitio web de Azure para alojar el contenido y automatizar el despliegue en el mismo utilizando un pipeline en Azure DevOps. El ejemplo QuickStart que se proporciona para una configuraci\u00f3n r\u00e1pida de la generaci\u00f3n de DocFx tambi\u00e9n contiene los archivos explicados en este documento. Especialmente las carpetas .pipelines y de infraestructura. Si se utiliza la carpeta QuickStart se pueden seguir los siguientes pasos. En la carpeta de infraestructura se encuentran los archivos Terraform para crear el sitio web en un entorno Azure. De forma inmediata, el script crear\u00e1 un sitio web en el que se puede desplegar el contenido de la documentaci\u00f3n.","title":"Implementar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#instalar-terraform","text":"Puede utilizar herramientas como Chocolatey para instalar Terraform: choco install terraform","title":"Instalar Terraform"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#establecer-las-variables-adecuadas","text":"En el inicio r\u00e1pido, la autenticaci\u00f3n est\u00e1 deshabilitada. Si quieres habilitarla, aseg\u00farate de haber creado una aplicaci\u00f3n en Azure AD y tener el ID de cliente. Este ID de cliente debe ser establecido como el valor de la variable client_id en variables.tf. En el main.tf aseg\u00farese de descomentar la configuraci\u00f3n de autenticaci\u00f3n en el servicio de la aplicaci\u00f3n. Para m\u00e1s informaci\u00f3n consulte Configurar la autenticaci\u00f3n de Azure AD - Azure App Service . Si quieres establecer un dominio personalizado para tu sitio web de documentaci\u00f3n con un certificado SSL tienes que hacer algunos pasos adicionales. Tienes que crear un Key Vault y almacenar el certificado all\u00ed. El siguiente paso es descomentar y establecer los valores en variables.tf. Tambi\u00e9n tienes que descomentar los pasos necesarios en main.tf. Todo se indica mediante cuadros de comentarios. Para m\u00e1s informaci\u00f3n ver A\u00f1adir un certificado TLS/SSL en Azure App Service . En los siguientes p\u00e1rrafos encontrar\u00e1 informaci\u00f3n adicional sobre el certificado SSL, el dominio personalizado y Azure App Service. Si est\u00e1 familiarizado con ello o no lo necesita, contin\u00fae en Despliegue de los recursos de Azure desde su m\u00e1quina local .","title":"Establecer las variables adecuadas"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#certificado-ssl","text":"Para asegurar un sitio web con un nombre de dominio personalizado y un certificado, puede encontrar los pasos a seguir en el art\u00edculo A\u00f1adir un certificado TLS/SSL en Azure App Service . Ese art\u00edculo tambi\u00e9n contiene una descripci\u00f3n de las formas de obtener un certificado y los requisitos para un certificado. Si quieres empezar con un certificado de desarrollo para probar el proceso, puedes crear uno t\u00fa mismo. Puedes hacerlo en PowerShell con el siguiente script. Reemplace: [SU DOMINIO] con el dominio que desea registrar [CONTRASE\u00d1A] con la contrase\u00f1a del certificado. [FILENAME] para el nombre del archivo de salida del certificado. Puedes almacenar este script en un archivo de script de PowerShell. $cert = New-SelfSignedCertificate -CertStoreLocation cert :\\ currentuser \\ my -Subject \"cn=[YOUR DOMAIN]\" -DnsName \"[YOUR DOMAIN]\" $pwd = ConvertTo-SecureString -String '[PASSWORD]' -Force -AsPlainText $path = 'cert:\\currentuser\\my\\' + $cert . thumbprint Export-PfxCertificate -cert $path -FilePath [FILENAME] . pfx -Password $pwd El certificado debe almacenarse en Key Vault. Vaya a Configuraci\u00f3n > Certificados en el men\u00fa de la izquierda del Key Vault y haga clic en Generar/Importar . Proporcione estos detalles: M\u00e9todo de creaci\u00f3n del certificado: Import Nombre del certificado: por ejemplo, ssl-certificate Cargar archivo de certificado: seleccione el archivo en disco para ello. Contrase\u00f1a: es la [CONTRASE\u00d1A] a la que nos referimos anteriormente.","title":"Certificado SSL"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#registro-de-dominios-personalizados","text":"Para utilizar un dominio personalizado hay que hacer algunas cosas. El proceso en el portal de Azure se describe en el art\u00edculo Tutorial: Asignar un nombre DNS personalizado existente a Azure App Service . Una parte importante se describe en el apartado Obtener un ID de verificaci\u00f3n del dominio . Este ID necesita ser registrado con la descripci\u00f3n DNS como un registro TXT. Es importante saber que este ID de verificaci\u00f3n de dominio personalizado es el mismo para todos los recursos web en la misma suscripci\u00f3n de Azure. Consulte este problema de StackOverflow . Esto significa que este ID debe ser registrado s\u00f3lo una vez para una suscripci\u00f3n Azure. Y esto permite la (re)creaci\u00f3n de un servicio de aplicaci\u00f3n con el dominio personalizado a trav\u00e9s del script.","title":"Registro de dominios personalizados"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#anadir-permisos-get-para-microsoft-azure-app-service","text":"Azure App Service necesita acceder a Key Vault para obtener el certificado. Esto es necesario para la primera ejecuci\u00f3n, pero tambi\u00e9n cuando se renueva el certificado en el Key Vault. Para ello, Azure App Service accede a Key Vault con la identidad proporcionada por el recurso App Service. Esta identidad se puede encontrar con el nombre principal del servicio abfa0a7c-a6b6-4736-8310-5855508787cd o Microsoft Azure App Service y es de tipo Application. Este ID es el mismo para todas las suscripciones de Azure. Debe tener permisos de obtenci\u00f3n de secretos y certificados. Para obtener m\u00e1s informaci\u00f3n, consulte este art\u00edculo Importar un certificado desde Key Vault .","title":"A\u00f1adir permisos Get para Microsoft Azure App Service"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#anadir-el-dominio-personalizado-y-el-certificado-ssl-al-servicio-de-la-aplicacion","text":"Una vez que tenemos el certificado SSL y hay un registro de DNS completo como se ha descrito, podemos descomentar el c\u00f3digo en el script Terraform de la carpeta Quick Start para adjuntarlo al App Service. En este script es necesario referenciar el certificado en el Key Vault com\u00fan y utilizarlo en la vinculaci\u00f3n del nombre de host personalizado. El nombre de host personalizado se asigna tambi\u00e9n en el script. La configuraci\u00f3n ssl_state debe ser SniEnabled si est\u00e1 utilizando un certificado SSL. Ahora la creaci\u00f3n del sitio web autenticado con un dominio personalizado est\u00e1 automatizada.","title":"A\u00f1adir el dominio personalizado y el certificado SSL al servicio de la aplicaci\u00f3n"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#despliegue-de-los-recursos-de-azure-desde-su-maquina-local","text":"Abra un s\u00edmbolo del sistema. Para que los comandos se ejecuten, necesitas tener una conexi\u00f3n con tu suscripci\u00f3n de Azure. Esto se puede hacer usando Azure Cli. Escribe este comando: az login Esto utilizar\u00e1 el navegador web para conectarse a su cuenta. Puede comprobar la suscripci\u00f3n conectada con este comando: az account show Si tiene que cambiar a otra suscripci\u00f3n, utilice este comando donde sustituye [id] por el id de la suscripci\u00f3n a seleccionar: az account set --subscription [ id ] Una vez hecho esto, ejecute este comando para inicializar: terraform init Ahora puedes ejecutar el comando para planificar lo que har\u00e1 el script. Ejecuta este comando cada vez que se realicen cambios en los scripts de terraformaci\u00f3n: terraform plan Inspeccione el resultado mostrado. Si es lo que espera, aplique estos cambios con este comando: terraform apply Cuando se le pida la aprobaci\u00f3n, escriba \"s\u00ed\" y ENTER. Tambi\u00e9n puede a\u00f1adir el flag -auto-aprobaci\u00f3n al comando apply.","title":"Despliegue de los recursos de Azure desde su m\u00e1quina local"},{"location":"documentacion/recetas/deploy-docfx-azure-website/#despliegue-del-sitio-web-desde-un-pipeline","text":"La mejor manera de crear los recursos y desplegarlos, es hacerlo autom\u00e1ticamente en un pipeline. Para ello se proporciona el pipeline .pipelines/documentation.yml. Cree un pipeline y haga referencia a este archivo YAML. IMPORTANTE: la carpeta Quick Start contiene un web.config que es necesario para el despliegue en IIS o Azure App Service. Esto permite el uso del archivo json para las solicitudes de b\u00fasqueda. Si no tienes esto en su lugar, la b\u00fasqueda de texto nunca devolver\u00e1 nada y resultar\u00e1 en 404. Usted tiene que crear una conexi\u00f3n de servicio en su entorno DevOps para conectarse a la suscripci\u00f3n de Azure que desea implementar. IMPORTANTE: establece las variables AzureConnectionName con el nombre de la Conexi\u00f3n de Servicio y AzureAppServiceName con el nombre que determinaste en el infrastructure/variables.tf.","title":"Despliegue del sitio web desde un pipeline"},{"location":"documentacion/recetas/static-website-with-mkdocs/","text":"C\u00f3mo crear un sitio web est\u00e1tico para su documentaci\u00f3n basado en mkdocs y mkdocs-material MkDocs es una herramienta creada para crear sitios web est\u00e1ticos a partir de archivos markdown. Otras alternativas son Sphinx y Jekyll . MkDocs es una buena opci\u00f3n ya que: Es f\u00e1cil de configurar y se ve muy bien. Funciona bien con markdown. Utiliza una pila de Python. A modo de comparaci\u00f3n, Sphinx genera principalmente documentos a partir del formato de texto reestructurado (rst), y Jekyll est\u00e1 escrito en Ruby. Para configurar un sitio web MkDocs, los principales activos necesarios son: Un archivo mkdocs.yaml . Este es el archivo de configuraci\u00f3n que define la apariencia del sitio web, la navegaci\u00f3n, los plugins utilizados y m\u00e1s. Una carpeta llamada docs que contiene los archivos fuente de la documentaci\u00f3n. Una acci\u00f3n de GitHub para generar autom\u00e1ticamente el sitio web (por ejemplo, en cada commit a main). Una lista de plugins utilizados durante la fase de compilaci\u00f3n del sitio web. La configuraci\u00f3n local es muy sencilla. Ver Introducci\u00f3n a MkDocs para m\u00e1s detalles. Para publicar el sitio web, hay una buena integraci\u00f3n con GitHub para almacenar el sitio web como una p\u00e1gina de GitHub . Enlaces adicionales Plugins de MkDocs Los mejores plugins y personalizaciones de MkDocs","title":"C\u00f3mo crear un sitio web est\u00e1tico para su documentaci\u00f3n basado en mkdocs y mkdocs-material"},{"location":"documentacion/recetas/static-website-with-mkdocs/#como-crear-un-sitio-web-estatico-para-su-documentacion-basado-en-mkdocs-y-mkdocs-material","text":"MkDocs es una herramienta creada para crear sitios web est\u00e1ticos a partir de archivos markdown. Otras alternativas son Sphinx y Jekyll . MkDocs es una buena opci\u00f3n ya que: Es f\u00e1cil de configurar y se ve muy bien. Funciona bien con markdown. Utiliza una pila de Python. A modo de comparaci\u00f3n, Sphinx genera principalmente documentos a partir del formato de texto reestructurado (rst), y Jekyll est\u00e1 escrito en Ruby. Para configurar un sitio web MkDocs, los principales activos necesarios son: Un archivo mkdocs.yaml . Este es el archivo de configuraci\u00f3n que define la apariencia del sitio web, la navegaci\u00f3n, los plugins utilizados y m\u00e1s. Una carpeta llamada docs que contiene los archivos fuente de la documentaci\u00f3n. Una acci\u00f3n de GitHub para generar autom\u00e1ticamente el sitio web (por ejemplo, en cada commit a main). Una lista de plugins utilizados durante la fase de compilaci\u00f3n del sitio web. La configuraci\u00f3n local es muy sencilla. Ver Introducci\u00f3n a MkDocs para m\u00e1s detalles. Para publicar el sitio web, hay una buena integraci\u00f3n con GitHub para almacenar el sitio web como una p\u00e1gina de GitHub .","title":"C\u00f3mo crear un sitio web est\u00e1tico para su documentaci\u00f3n basado en mkdocs y mkdocs-material"},{"location":"documentacion/recetas/static-website-with-mkdocs/#enlaces-adicionales","text":"Plugins de MkDocs Los mejores plugins y personalizaciones de MkDocs","title":"Enlaces adicionales"},{"location":"documentacion/recetas/using-docfx-and-tools/","text":"Uso de DocFx y las herramientas complementarias para generar un sitio web de documentaci\u00f3n Si quieres una manera f\u00e1cil de tener un sitio web con toda tu documentaci\u00f3n proveniente de archivos Markdown y comentarios provenientes del c\u00f3digo, puedes usar DocFx . El sitio web generado por DocFx tambi\u00e9n incluye capacidades de b\u00fasqueda r\u00e1pida. Consulte tambi\u00e9n la publicaci\u00f3n del blog Proporcionar documentaci\u00f3n de calidad en su proyecto con DocFx y las herramientas complementarias para obtener m\u00e1s explicaciones sobre la soluci\u00f3n. Requisitos previos La mejor manera de seguir este documento es clonando primero el ejemplo de DocFxQuickStart . Copie el contenido de la carpeta QuickStart a la ra\u00edz de su propio repositorio para empezar en su propio entorno. Inicio r\u00e1pido Azure DevOps: crea un proyecto y crea una Conexi\u00f3n de Servicio a tu entorno Azure. Clona el repositorio. Carpeta QuickStart: Copiar el contenido de la carpeta QuickStart que hay en el repositorio que se encuentra en DocFxQuickStart a la ra\u00edz del repositorio. Azure: Cree un resource group donde se deben crear los recursos del sitio web de documentaci\u00f3n. Cree los recursos de Azure: Rellena los valores por defecto en infrastructure/variables.tf y ejecuta los comandos de Despliegue de los recursos de Azure desde su m\u00e1quina local para crear los recursos Azure. Pipeline: Rellena las variables en .pipelines/documentation.yml, commitea los cambios y envia el contenido del repositorio a tu rama. Ahora puedes crear un pipeline en tu proyecto Azure DevOps que utilice el .pipelines/documentation.yml y ejecutarlo. Referencias DocFX - generador de documentaci\u00f3n est\u00e1tica Implementar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente Proporcionar documentaci\u00f3n de calidad en su proyecto con DocFx y las herramientas complementarias Monorepo para principiantes","title":"Uso de DocFx y las herramientas complementarias para generar un sitio web de documentaci\u00f3n"},{"location":"documentacion/recetas/using-docfx-and-tools/#uso-de-docfx-y-las-herramientas-complementarias-para-generar-un-sitio-web-de-documentacion","text":"Si quieres una manera f\u00e1cil de tener un sitio web con toda tu documentaci\u00f3n proveniente de archivos Markdown y comentarios provenientes del c\u00f3digo, puedes usar DocFx . El sitio web generado por DocFx tambi\u00e9n incluye capacidades de b\u00fasqueda r\u00e1pida. Consulte tambi\u00e9n la publicaci\u00f3n del blog Proporcionar documentaci\u00f3n de calidad en su proyecto con DocFx y las herramientas complementarias para obtener m\u00e1s explicaciones sobre la soluci\u00f3n.","title":"Uso de DocFx y las herramientas complementarias para generar un sitio web de documentaci\u00f3n"},{"location":"documentacion/recetas/using-docfx-and-tools/#requisitos-previos","text":"La mejor manera de seguir este documento es clonando primero el ejemplo de DocFxQuickStart . Copie el contenido de la carpeta QuickStart a la ra\u00edz de su propio repositorio para empezar en su propio entorno.","title":"Requisitos previos"},{"location":"documentacion/recetas/using-docfx-and-tools/#inicio-rapido","text":"Azure DevOps: crea un proyecto y crea una Conexi\u00f3n de Servicio a tu entorno Azure. Clona el repositorio. Carpeta QuickStart: Copiar el contenido de la carpeta QuickStart que hay en el repositorio que se encuentra en DocFxQuickStart a la ra\u00edz del repositorio. Azure: Cree un resource group donde se deben crear los recursos del sitio web de documentaci\u00f3n. Cree los recursos de Azure: Rellena los valores por defecto en infrastructure/variables.tf y ejecuta los comandos de Despliegue de los recursos de Azure desde su m\u00e1quina local para crear los recursos Azure. Pipeline: Rellena las variables en .pipelines/documentation.yml, commitea los cambios y envia el contenido del repositorio a tu rama. Ahora puedes crear un pipeline en tu proyecto Azure DevOps que utilice el .pipelines/documentation.yml y ejecutarlo.","title":"Inicio r\u00e1pido"},{"location":"documentacion/recetas/using-docfx-and-tools/#referencias","text":"DocFX - generador de documentaci\u00f3n est\u00e1tica Implementar el sitio web de documentaci\u00f3n de DocFx en un sitio web de Azure autom\u00e1ticamente Proporcionar documentaci\u00f3n de calidad en su proyecto con DocFx y las herramientas complementarias Monorepo para principiantes","title":"Referencias"},{"location":"observabilidad/","text":"Observabilidad La creaci\u00f3n de sistemas observables permite a los equipos de desarrollo medir qu\u00e9 tan bien se est\u00e1 comportando la aplicaci\u00f3n. La observabilidad sirve para los siguientes objetivos: Proporcionar una visi\u00f3n hol\u00edstica del estado de la aplicaci\u00f3n. Ayudar a medir el rendimiento empresarial para el cliente. Medir el rendimiento operativo del sistema. Identificar y diagnosticar fallas para llegar al problema r\u00e1pidamente. Pilares de Observabilidad Logs M\u00e9tricas Trazas Logs vs M\u00e9tricas vs Trazas Insights Dashboards y Reportes Herramientas, patrones y pr\u00e1cticas recomendadas Herramientas y Patrones Observabilidad como c\u00f3digo Pr\u00e1cticas Recomendadas Herramientas de diagn\u00f3stico OpenTelemetry Facetas de la observabilidad Observabilidad para Microservicios Observabilidad en el aprendizaje autom\u00e1tico Observabilidad de canalizaciones de CI/CD Observabilidad en Azure Databricks Recetas Enlaces \u00fatiles Gu\u00eda de requisitos no funcionales","title":"Observabilidad"},{"location":"observabilidad/#observabilidad","text":"La creaci\u00f3n de sistemas observables permite a los equipos de desarrollo medir qu\u00e9 tan bien se est\u00e1 comportando la aplicaci\u00f3n. La observabilidad sirve para los siguientes objetivos: Proporcionar una visi\u00f3n hol\u00edstica del estado de la aplicaci\u00f3n. Ayudar a medir el rendimiento empresarial para el cliente. Medir el rendimiento operativo del sistema. Identificar y diagnosticar fallas para llegar al problema r\u00e1pidamente.","title":"Observabilidad"},{"location":"observabilidad/#pilares-de-observabilidad","text":"Logs M\u00e9tricas Trazas Logs vs M\u00e9tricas vs Trazas","title":"Pilares de Observabilidad"},{"location":"observabilidad/#insights","text":"Dashboards y Reportes","title":"Insights"},{"location":"observabilidad/#herramientas-patrones-y-practicas-recomendadas","text":"Herramientas y Patrones Observabilidad como c\u00f3digo Pr\u00e1cticas Recomendadas Herramientas de diagn\u00f3stico OpenTelemetry","title":"Herramientas, patrones y pr\u00e1cticas recomendadas"},{"location":"observabilidad/#facetas-de-la-observabilidad","text":"Observabilidad para Microservicios Observabilidad en el aprendizaje autom\u00e1tico Observabilidad de canalizaciones de CI/CD Observabilidad en Azure Databricks Recetas","title":"Facetas de la observabilidad"},{"location":"observabilidad/#enlaces-utiles","text":"Gu\u00eda de requisitos no funcionales","title":"Enlaces \u00fatiles"},{"location":"observabilidad/alerting/","text":"Gu\u00eda para Alertas Uno de los objetivos de construir sistemas altamente observables es proporcionar informaci\u00f3n valiosa sobre el comportamiento de la aplicaci\u00f3n. Los sistemas observables permiten que los problemas se identifiquen y emerjan a trav\u00e9s de alertas antes de que los usuarios finales se vean afectados. Mejores pr\u00e1cticas Lo m\u00e1s importante que debe hacer antes de crear alertas es implementar la observabilidad. Sin sistemas de monitoreo implementados, se vuelve casi imposible saber qu\u00e9 actividades deben monitorearse y cu\u00e1ndo alertar a los equipos. Identificar cu\u00e1l debe ser la calidad de servicio viable m\u00ednima de la aplicaci\u00f3n. No es lo que pretende entregar, pero es aceptable para el cliente. Estos Service Level Objectives (SLO) son una m\u00e9trica para medir el rendimiento de la aplicaci\u00f3n. Los SLO se definen con respecto a los usuarios finales. Las alertas deben buscar un impacto visible para el usuario. Por ejemplo, alertas sobre la tasa de solicitudes, la latencia y los errores. Utilizar herramientas de script automatizadas para imitar las rutas de c\u00f3digo importantes relacionadas con actividades en la aplicaci\u00f3n. Cree pol\u00edticas de alerta sobre los eventos que impactan al usuario. Se recomienda a los ingenieros que presten atenci\u00f3n a su sistema de monitoreo para que se puedan definir alertas y umbrales precisos. Establecer un canal principal para las alertas que necesitan atenci\u00f3n inmediata y etiquete al equipo o personas indicadas seg\u00fan la naturaleza del incidente. No es necesario enviar todas las alertas al canal principal de guardia. Establecer un canal secundario para los elementos que deben investigarse y que a\u00fan no afectan a los usuarios. Estos elementos ser\u00e1n los que los servicios de ingenier\u00eda revisar\u00e1n regularmente para monitorear la salud del sistema. Es importante aprender de cada incidente y mejorar continuamente el proceso. Despu\u00e9s de que se haya clasificado cada incidente, realice una autopsia del escenario. Ocurrir\u00e1n escenarios y situaciones que no se consideraron inicialmente, y el flujo de trabajo post-mortem es una excelente manera de resaltar eso para mejorar el monitoreo/alertas del sistema.","title":"Gu\u00eda para Alertas"},{"location":"observabilidad/alerting/#guia-para-alertas","text":"Uno de los objetivos de construir sistemas altamente observables es proporcionar informaci\u00f3n valiosa sobre el comportamiento de la aplicaci\u00f3n. Los sistemas observables permiten que los problemas se identifiquen y emerjan a trav\u00e9s de alertas antes de que los usuarios finales se vean afectados.","title":"Gu\u00eda para Alertas"},{"location":"observabilidad/alerting/#mejores-practicas","text":"Lo m\u00e1s importante que debe hacer antes de crear alertas es implementar la observabilidad. Sin sistemas de monitoreo implementados, se vuelve casi imposible saber qu\u00e9 actividades deben monitorearse y cu\u00e1ndo alertar a los equipos. Identificar cu\u00e1l debe ser la calidad de servicio viable m\u00ednima de la aplicaci\u00f3n. No es lo que pretende entregar, pero es aceptable para el cliente. Estos Service Level Objectives (SLO) son una m\u00e9trica para medir el rendimiento de la aplicaci\u00f3n. Los SLO se definen con respecto a los usuarios finales. Las alertas deben buscar un impacto visible para el usuario. Por ejemplo, alertas sobre la tasa de solicitudes, la latencia y los errores. Utilizar herramientas de script automatizadas para imitar las rutas de c\u00f3digo importantes relacionadas con actividades en la aplicaci\u00f3n. Cree pol\u00edticas de alerta sobre los eventos que impactan al usuario. Se recomienda a los ingenieros que presten atenci\u00f3n a su sistema de monitoreo para que se puedan definir alertas y umbrales precisos. Establecer un canal principal para las alertas que necesitan atenci\u00f3n inmediata y etiquete al equipo o personas indicadas seg\u00fan la naturaleza del incidente. No es necesario enviar todas las alertas al canal principal de guardia. Establecer un canal secundario para los elementos que deben investigarse y que a\u00fan no afectan a los usuarios. Estos elementos ser\u00e1n los que los servicios de ingenier\u00eda revisar\u00e1n regularmente para monitorear la salud del sistema. Es importante aprender de cada incidente y mejorar continuamente el proceso. Despu\u00e9s de que se haya clasificado cada incidente, realice una autopsia del escenario. Ocurrir\u00e1n escenarios y situaciones que no se consideraron inicialmente, y el flujo de trabajo post-mortem es una excelente manera de resaltar eso para mejorar el monitoreo/alertas del sistema.","title":"Mejores pr\u00e1cticas"},{"location":"observabilidad/best-practices/","text":"Pr\u00e1cticas Recomendadas Id. de correlaci\u00f3n: incluya un identificador \u00fanico al comienzo de la interacci\u00f3n para vincular los datos agregados de varios componentes del sistema y proporcionar una vista hol\u00edstica. Supervisar el estado de los servicios y proporcionar informaci\u00f3n sobre el rendimiento y el comportamiento del sistema. Los servicios dependientes se deben supervisar correctamente. Adem\u00e1s, las m\u00e9tricas relacionadas con los servicios dependientes deben capturarse y registrarse. Los defectos, bloqueos y fallas se registran como eventos discretos. Esto ayuda a los ingenieros a identificar las \u00e1reas problem\u00e1ticas durante las fallas. La configuraci\u00f3n de logueo se puede controlar sin cambios en el c\u00f3digo. Las m\u00e9tricas sobre la latencia y la duraci\u00f3n se recopilen y se puedan agregar. Comience poco a poco y agregue donde haya impacto en el cliente. Es importante que todos los datos que se recopilen contengan un contexto rico y relevante. La informaci\u00f3n de identificaci\u00f3n personal o cualquier otra informaci\u00f3n confidencial nunca debe registrarse. Comprobaciones de estado: se deben agregar comprobaciones de estado adecuadas para determinar si el servicio est\u00e1 en buen estado y listo para atender el tr\u00e1fico.","title":"Pr\u00e1cticas Recomendadas"},{"location":"observabilidad/best-practices/#practicas-recomendadas","text":"Id. de correlaci\u00f3n: incluya un identificador \u00fanico al comienzo de la interacci\u00f3n para vincular los datos agregados de varios componentes del sistema y proporcionar una vista hol\u00edstica. Supervisar el estado de los servicios y proporcionar informaci\u00f3n sobre el rendimiento y el comportamiento del sistema. Los servicios dependientes se deben supervisar correctamente. Adem\u00e1s, las m\u00e9tricas relacionadas con los servicios dependientes deben capturarse y registrarse. Los defectos, bloqueos y fallas se registran como eventos discretos. Esto ayuda a los ingenieros a identificar las \u00e1reas problem\u00e1ticas durante las fallas. La configuraci\u00f3n de logueo se puede controlar sin cambios en el c\u00f3digo. Las m\u00e9tricas sobre la latencia y la duraci\u00f3n se recopilen y se puedan agregar. Comience poco a poco y agregue donde haya impacto en el cliente. Es importante que todos los datos que se recopilen contengan un contexto rico y relevante. La informaci\u00f3n de identificaci\u00f3n personal o cualquier otra informaci\u00f3n confidencial nunca debe registrarse. Comprobaciones de estado: se deben agregar comprobaciones de estado adecuadas para determinar si el servicio est\u00e1 en buen estado y listo para atender el tr\u00e1fico.","title":"Pr\u00e1cticas Recomendadas"},{"location":"observabilidad/diagnostic-tools/","text":"Herramientas de diagnostico Adem\u00e1s de logging, tracing y m\u00e9tricas, existen herramientas adicionales para ayudar a diagnosticar problemas cuando las aplicaciones no se comportan como se esperaba. En estos casos, las herramientas de diagn\u00f3stico espec\u00edficas de la plataforma o el lenguaje de programaci\u00f3n entran en juego y son \u00fatiles para depurar problemas de memoria, perfilar el uso de la CPU o la causa de los retrasos. Perfiladores y analizadores de memoria Hay dos tipos de herramientas de diagn\u00f3stico que puede utilizar: generadores de perfiles y analizadores de memoria. Profiling La creaci\u00f3n de perfiles es una t\u00e9cnica en la que toma peque\u00f1as instant\u00e1neas de todos los subprocesos en una aplicaci\u00f3n en ejecuci\u00f3n para ver el seguimiento de la pila de cada subproceso durante un per\u00edodo espec\u00edfico. Esta herramienta puede ayudarlo a identificar d\u00f3nde est\u00e1 gastando tiempo de CPU durante la ejecuci\u00f3n de su aplicaci\u00f3n. Hay dos t\u00e9cnicas principales para lograr esto: muestreo de CPU e instrumentaci\u00f3n. El muestreo de CPU es un m\u00e9todo no invasivo que toma instant\u00e1neas de todas las pilas en un intervalo establecido. Es la t\u00e9cnica m\u00e1s com\u00fan para generar perfiles y no requiere ninguna modificaci\u00f3n en su c\u00f3digo. La instrumentaci\u00f3n es la otra t\u00e9cnica en la que inserta un peque\u00f1o fragmento de c\u00f3digo al principio y al final de cada funci\u00f3n que le indicar\u00e1 al generador de perfiles el tiempo dedicado a la funci\u00f3n, el nombre de la funci\u00f3n, los par\u00e1metros y otros. De esta manera, modifica el c\u00f3digo de su aplicaci\u00f3n en ejecuci\u00f3n. Esto tiene dos efectos: su c\u00f3digo puede ejecutarse un poco m\u00e1s lento, pero por otro lado, tiene una vista m\u00e1s precisa de cada funci\u00f3n y clase que se ha ejecutado. Analizadores de memoria Los analizadores de memoria y los volcados de memoria son otro conjunto de herramientas de diagn\u00f3stico que puede utilizar para identificar problemas en su proceso. Normalmente, este tipo de herramientas toman toda la memoria que el proceso est\u00e1 usando en un momento dado y la guardan en un archivo que se puede analizar. Hay varias formas de realizar un volcado de memoria seg\u00fan el sistema operativo que est\u00e9 utilizando. Adem\u00e1s, cada sistema operativo tiene su propio depurador que puede cargar este volcado de memoria y explorar el estado del proceso en el momento en que se realiz\u00f3 el volcado de memoria. Los depuradores m\u00e1s comunes son: Windows: WinDbg y WinDgbNext (incluidos en el SDK de Windows), Visual Studio tambi\u00e9n puede cargar un volcado de memoria para un proceso de .NET Framework y .NET Core Linux - GDB es el depurador de GNU Mac OS - LLDB Debugger Hay una gama de herramientas de diagn\u00f3stico espec\u00edficas de la plataforma del desarrollador que se pueden utilizar: .NET Core , GitHub Repo Java Python Node.js Entorno para perfilado Para crear un perfil de aplicaci\u00f3n lo m\u00e1s cercano posible a la producci\u00f3n, se debe considerar el entorno en el que se pretende que la aplicaci\u00f3n se ejecute en producci\u00f3n y podr\u00eda ser necesario realizar una instant\u00e1nea del estado de la aplicaci\u00f3n bajo carga. Diagn\u00f3stico en contenedores Para aplicaciones monol\u00edticas, las herramientas de diagn\u00f3stico se pueden instalar y ejecutar en la m\u00e1quina virtual que las aloja. La mayor\u00eda de las aplicaciones escalables se desarrollan como microservicios y tienen interacciones complejas que requieren instalar las herramientas en los contenedores que ejecutan el proceso o aprovechar un contenedor sidecar . Algunas plataformas exponen endpoints para interactuar con la aplicaci\u00f3n y devolver un volcado.","title":"Herramientas de diagnostico"},{"location":"observabilidad/diagnostic-tools/#herramientas-de-diagnostico","text":"Adem\u00e1s de logging, tracing y m\u00e9tricas, existen herramientas adicionales para ayudar a diagnosticar problemas cuando las aplicaciones no se comportan como se esperaba. En estos casos, las herramientas de diagn\u00f3stico espec\u00edficas de la plataforma o el lenguaje de programaci\u00f3n entran en juego y son \u00fatiles para depurar problemas de memoria, perfilar el uso de la CPU o la causa de los retrasos.","title":"Herramientas de diagnostico"},{"location":"observabilidad/diagnostic-tools/#perfiladores-y-analizadores-de-memoria","text":"Hay dos tipos de herramientas de diagn\u00f3stico que puede utilizar: generadores de perfiles y analizadores de memoria.","title":"Perfiladores y analizadores de memoria"},{"location":"observabilidad/diagnostic-tools/#profiling","text":"La creaci\u00f3n de perfiles es una t\u00e9cnica en la que toma peque\u00f1as instant\u00e1neas de todos los subprocesos en una aplicaci\u00f3n en ejecuci\u00f3n para ver el seguimiento de la pila de cada subproceso durante un per\u00edodo espec\u00edfico. Esta herramienta puede ayudarlo a identificar d\u00f3nde est\u00e1 gastando tiempo de CPU durante la ejecuci\u00f3n de su aplicaci\u00f3n. Hay dos t\u00e9cnicas principales para lograr esto: muestreo de CPU e instrumentaci\u00f3n. El muestreo de CPU es un m\u00e9todo no invasivo que toma instant\u00e1neas de todas las pilas en un intervalo establecido. Es la t\u00e9cnica m\u00e1s com\u00fan para generar perfiles y no requiere ninguna modificaci\u00f3n en su c\u00f3digo. La instrumentaci\u00f3n es la otra t\u00e9cnica en la que inserta un peque\u00f1o fragmento de c\u00f3digo al principio y al final de cada funci\u00f3n que le indicar\u00e1 al generador de perfiles el tiempo dedicado a la funci\u00f3n, el nombre de la funci\u00f3n, los par\u00e1metros y otros. De esta manera, modifica el c\u00f3digo de su aplicaci\u00f3n en ejecuci\u00f3n. Esto tiene dos efectos: su c\u00f3digo puede ejecutarse un poco m\u00e1s lento, pero por otro lado, tiene una vista m\u00e1s precisa de cada funci\u00f3n y clase que se ha ejecutado.","title":"Profiling"},{"location":"observabilidad/diagnostic-tools/#analizadores-de-memoria","text":"Los analizadores de memoria y los volcados de memoria son otro conjunto de herramientas de diagn\u00f3stico que puede utilizar para identificar problemas en su proceso. Normalmente, este tipo de herramientas toman toda la memoria que el proceso est\u00e1 usando en un momento dado y la guardan en un archivo que se puede analizar. Hay varias formas de realizar un volcado de memoria seg\u00fan el sistema operativo que est\u00e9 utilizando. Adem\u00e1s, cada sistema operativo tiene su propio depurador que puede cargar este volcado de memoria y explorar el estado del proceso en el momento en que se realiz\u00f3 el volcado de memoria. Los depuradores m\u00e1s comunes son: Windows: WinDbg y WinDgbNext (incluidos en el SDK de Windows), Visual Studio tambi\u00e9n puede cargar un volcado de memoria para un proceso de .NET Framework y .NET Core Linux - GDB es el depurador de GNU Mac OS - LLDB Debugger Hay una gama de herramientas de diagn\u00f3stico espec\u00edficas de la plataforma del desarrollador que se pueden utilizar: .NET Core , GitHub Repo Java Python Node.js","title":"Analizadores de memoria"},{"location":"observabilidad/diagnostic-tools/#entorno-para-perfilado","text":"Para crear un perfil de aplicaci\u00f3n lo m\u00e1s cercano posible a la producci\u00f3n, se debe considerar el entorno en el que se pretende que la aplicaci\u00f3n se ejecute en producci\u00f3n y podr\u00eda ser necesario realizar una instant\u00e1nea del estado de la aplicaci\u00f3n bajo carga.","title":"Entorno para perfilado"},{"location":"observabilidad/diagnostic-tools/#diagnostico-en-contenedores","text":"Para aplicaciones monol\u00edticas, las herramientas de diagn\u00f3stico se pueden instalar y ejecutar en la m\u00e1quina virtual que las aloja. La mayor\u00eda de las aplicaciones escalables se desarrollan como microservicios y tienen interacciones complejas que requieren instalar las herramientas en los contenedores que ejecutan el proceso o aprovechar un contenedor sidecar . Algunas plataformas exponen endpoints para interactuar con la aplicaci\u00f3n y devolver un volcado.","title":"Diagn\u00f3stico en contenedores"},{"location":"observabilidad/log-vs-metric-vs-trace/","text":"Logs vs M\u00e9tricas vs Trazas M\u00e9tricas Su prop\u00f3sito es informar sobre la salud y las operaciones con respecto a un componente o sistema. Una m\u00e9trica representa una medida de un punto en el tiempo de una fuente en particular. Las m\u00e9tricas tambi\u00e9n se prestan muy bien a la agregaci\u00f3n previa dentro del componente antes de la recopilaci\u00f3n, lo que reduce el costo de c\u00f3mputo para procesar y almacenar grandes cantidades de series temporales. Debido a la eficiencia con la que se procesan y almacenan las m\u00e9tricas, se presta muy bien para su uso en alertas automatizadas. Logs Informan sobre los eventos discretos que ocurrieron dentro de un componente o un conjunto de componentes. Estos datos enriquecidos tienden a ser mucho m\u00e1s grandes que los datos m\u00e9tricos y pueden causar problemas de procesamiento, especialmente si los componentes se registran de forma demasiado detallada. Por lo tanto, el uso de datos de log tiende a evitarse y depende de las m\u00e9tricas para esos datos. Una vez que la telemetr\u00eda resalta las posibles fuentes de problemas, los datos de log filtrados para esas fuentes se pueden usar para comprender lo que ocurri\u00f3. Trazas A diferencia del logueo, abarca una vista mucho m\u00e1s amplia y continua de una aplicaci\u00f3n. El objetivo es seguir el flujo de un programa y la progresi\u00f3n de los datos. Su prop\u00f3sito no es reactivo, sino que se centra en la optimizaci\u00f3n. Al tracear a trav\u00e9s de una pila, los desarrolladores pueden identificar cuellos de botella y enfocarse en mejorar el rendimiento. Cuando ocurre un problema, el tracing le permite ver c\u00f3mo lleg\u00f3 all\u00ed: Cual funci\u00f3n. La duraci\u00f3n de la funci\u00f3n. Par\u00e1metros pasados. Gu\u00eda de uso Utilice m\u00e9tricas para realizar un seguimiento de la ocurrencia de un evento, el conteo de elementos, el tiempo necesario para realizar una acci\u00f3n o para informar el valor actual de un recurso (CPU, memoria, etc.) Utilice logs para realizar un seguimiento de la informaci\u00f3n detallada sobre un evento tambi\u00e9n supervisado por una m\u00e9trica, en particular errores, advertencias u otras situaciones excepcionales. Una traza proporciona visibilidad sobre c\u00f3mo se procesa una solicitud en varios servicios en un entorno de microservicios.","title":"Logs vs M\u00e9tricas vs Trazas"},{"location":"observabilidad/log-vs-metric-vs-trace/#logs-vs-metricas-vs-trazas","text":"","title":"Logs vs M\u00e9tricas vs Trazas"},{"location":"observabilidad/log-vs-metric-vs-trace/#metricas","text":"Su prop\u00f3sito es informar sobre la salud y las operaciones con respecto a un componente o sistema. Una m\u00e9trica representa una medida de un punto en el tiempo de una fuente en particular. Las m\u00e9tricas tambi\u00e9n se prestan muy bien a la agregaci\u00f3n previa dentro del componente antes de la recopilaci\u00f3n, lo que reduce el costo de c\u00f3mputo para procesar y almacenar grandes cantidades de series temporales. Debido a la eficiencia con la que se procesan y almacenan las m\u00e9tricas, se presta muy bien para su uso en alertas automatizadas.","title":"M\u00e9tricas"},{"location":"observabilidad/log-vs-metric-vs-trace/#logs","text":"Informan sobre los eventos discretos que ocurrieron dentro de un componente o un conjunto de componentes. Estos datos enriquecidos tienden a ser mucho m\u00e1s grandes que los datos m\u00e9tricos y pueden causar problemas de procesamiento, especialmente si los componentes se registran de forma demasiado detallada. Por lo tanto, el uso de datos de log tiende a evitarse y depende de las m\u00e9tricas para esos datos. Una vez que la telemetr\u00eda resalta las posibles fuentes de problemas, los datos de log filtrados para esas fuentes se pueden usar para comprender lo que ocurri\u00f3.","title":"Logs"},{"location":"observabilidad/log-vs-metric-vs-trace/#trazas","text":"A diferencia del logueo, abarca una vista mucho m\u00e1s amplia y continua de una aplicaci\u00f3n. El objetivo es seguir el flujo de un programa y la progresi\u00f3n de los datos. Su prop\u00f3sito no es reactivo, sino que se centra en la optimizaci\u00f3n. Al tracear a trav\u00e9s de una pila, los desarrolladores pueden identificar cuellos de botella y enfocarse en mejorar el rendimiento. Cuando ocurre un problema, el tracing le permite ver c\u00f3mo lleg\u00f3 all\u00ed: Cual funci\u00f3n. La duraci\u00f3n de la funci\u00f3n. Par\u00e1metros pasados.","title":"Trazas"},{"location":"observabilidad/log-vs-metric-vs-trace/#guia-de-uso","text":"Utilice m\u00e9tricas para realizar un seguimiento de la ocurrencia de un evento, el conteo de elementos, el tiempo necesario para realizar una acci\u00f3n o para informar el valor actual de un recurso (CPU, memoria, etc.) Utilice logs para realizar un seguimiento de la informaci\u00f3n detallada sobre un evento tambi\u00e9n supervisado por una m\u00e9trica, en particular errores, advertencias u otras situaciones excepcionales. Una traza proporciona visibilidad sobre c\u00f3mo se procesa una solicitud en varios servicios en un entorno de microservicios.","title":"Gu\u00eda de uso"},{"location":"observabilidad/microservices/","text":"","title":"Microservices"},{"location":"observabilidad/ml-observability/","text":"Observabilidad en Machine Learning El proceso de desarrollo del sistema de software con componente de aprendizaje autom\u00e1tico es m\u00e1s complejo que el software tradicional. Necesitamos monitorear cambios y variaciones en tres dimensiones: el c\u00f3digo, el modelo y los datos. Podemos distinguir dos etapas de la vida \u00fatil de dicho sistema: la experimentaci\u00f3n y la producci\u00f3n que requieren diferentes enfoques de la observabilidad, como se analiza a continuaci\u00f3n: Modelo en experimentaci\u00f3n y tuning La experimentaci\u00f3n es un proceso para encontrar un modelo de aprendizaje autom\u00e1tico adecuado y sus par\u00e1metros mediante el entrenamiento y la evaluaci\u00f3n de dichos modelos con uno o m\u00e1s conjuntos de datos. Al desarrollar y ajustar modelos de aprendizaje autom\u00e1tico, los cient\u00edficos de datos est\u00e1n interesados en observar y comparar m\u00e9tricas de rendimiento seleccionadas para varios par\u00e1metros del modelo. Tambi\u00e9n necesitan una forma confiable de reproducir un proceso de entrenamiento, de modo que un conjunto de datos y par\u00e1metros dados produzcan los mismos modelos. Hay muchas soluciones de evaluaci\u00f3n de m\u00e9tricas de modelos disponibles, tanto de c\u00f3digo abierto (MLFlow, TensorBoard) como propietarias (Azure Machine Learning, Application Insights). Modelo en producci\u00f3n El modelo entrenado se puede implementar en producci\u00f3n como contenedor. El servicio Azure Machine Learning proporciona SDK para implementar el modelo como Azure Container Instance y publica el punto de conexi\u00f3n REST. Puede monitorearlo utilizando m\u00e9todos de observabilidad de microservicios. MLFLow es una forma alternativa de implementar el modelo ML como servicio. Entrenamiento y reentrenamiento Para volver a entrenar autom\u00e1ticamente el modelo, puede usar AML Pipelines o Azure Databricks. Al volver a entrenarse con AML Pipelines, puede monitorear la informaci\u00f3n de cada ejecuci\u00f3n, incluida la salida, los logs y varias m\u00e9tricas en el panel de experimentos de Azure Portal, o extraerla manualmente con el SDK de AML. Rendimiento del modelo a lo largo del tiempo: data drift Volvemos a entrenar los modelos de aprendizaje autom\u00e1tico para mejorar su rendimiento y hacer que los modelos est\u00e9n mejor alineados con los datos que cambian con el tiempo. Sin embargo, en algunos casos, el rendimiento del modelo puede degradarse. Esto puede suceder en caso de que los datos cambien dr\u00e1sticamente y ya no muestren los patrones que observamos durante el desarrollo del modelo. Este efecto se denomina data drift. Azure Machine Learning Service tiene una funci\u00f3n de vista previa para observar e informar la deriva de datos. Este art\u00edculo lo describe en detalle. Versionado de datos Se recomienda como pr\u00e1ctica agregar una versi\u00f3n a todos los conjuntos de datos. Puede crear un conjunto de datos de Azure ML con versi\u00f3n para este prop\u00f3sito, o crear una versi\u00f3n manual si usa otros sistemas.","title":"Observabilidad en Machine Learning"},{"location":"observabilidad/ml-observability/#observabilidad-en-machine-learning","text":"El proceso de desarrollo del sistema de software con componente de aprendizaje autom\u00e1tico es m\u00e1s complejo que el software tradicional. Necesitamos monitorear cambios y variaciones en tres dimensiones: el c\u00f3digo, el modelo y los datos. Podemos distinguir dos etapas de la vida \u00fatil de dicho sistema: la experimentaci\u00f3n y la producci\u00f3n que requieren diferentes enfoques de la observabilidad, como se analiza a continuaci\u00f3n:","title":"Observabilidad en Machine Learning"},{"location":"observabilidad/ml-observability/#modelo-en-experimentacion-y-tuning","text":"La experimentaci\u00f3n es un proceso para encontrar un modelo de aprendizaje autom\u00e1tico adecuado y sus par\u00e1metros mediante el entrenamiento y la evaluaci\u00f3n de dichos modelos con uno o m\u00e1s conjuntos de datos. Al desarrollar y ajustar modelos de aprendizaje autom\u00e1tico, los cient\u00edficos de datos est\u00e1n interesados en observar y comparar m\u00e9tricas de rendimiento seleccionadas para varios par\u00e1metros del modelo. Tambi\u00e9n necesitan una forma confiable de reproducir un proceso de entrenamiento, de modo que un conjunto de datos y par\u00e1metros dados produzcan los mismos modelos. Hay muchas soluciones de evaluaci\u00f3n de m\u00e9tricas de modelos disponibles, tanto de c\u00f3digo abierto (MLFlow, TensorBoard) como propietarias (Azure Machine Learning, Application Insights).","title":"Modelo en experimentaci\u00f3n y tuning"},{"location":"observabilidad/ml-observability/#modelo-en-produccion","text":"El modelo entrenado se puede implementar en producci\u00f3n como contenedor. El servicio Azure Machine Learning proporciona SDK para implementar el modelo como Azure Container Instance y publica el punto de conexi\u00f3n REST. Puede monitorearlo utilizando m\u00e9todos de observabilidad de microservicios. MLFLow es una forma alternativa de implementar el modelo ML como servicio.","title":"Modelo en producci\u00f3n"},{"location":"observabilidad/ml-observability/#entrenamiento-y-reentrenamiento","text":"Para volver a entrenar autom\u00e1ticamente el modelo, puede usar AML Pipelines o Azure Databricks. Al volver a entrenarse con AML Pipelines, puede monitorear la informaci\u00f3n de cada ejecuci\u00f3n, incluida la salida, los logs y varias m\u00e9tricas en el panel de experimentos de Azure Portal, o extraerla manualmente con el SDK de AML.","title":"Entrenamiento y reentrenamiento"},{"location":"observabilidad/ml-observability/#rendimiento-del-modelo-a-lo-largo-del-tiempo-data-drift","text":"Volvemos a entrenar los modelos de aprendizaje autom\u00e1tico para mejorar su rendimiento y hacer que los modelos est\u00e9n mejor alineados con los datos que cambian con el tiempo. Sin embargo, en algunos casos, el rendimiento del modelo puede degradarse. Esto puede suceder en caso de que los datos cambien dr\u00e1sticamente y ya no muestren los patrones que observamos durante el desarrollo del modelo. Este efecto se denomina data drift. Azure Machine Learning Service tiene una funci\u00f3n de vista previa para observar e informar la deriva de datos. Este art\u00edculo lo describe en detalle.","title":"Rendimiento del modelo a lo largo del tiempo: data drift"},{"location":"observabilidad/ml-observability/#versionado-de-datos","text":"Se recomienda como pr\u00e1ctica agregar una versi\u00f3n a todos los conjuntos de datos. Puede crear un conjunto de datos de Azure ML con versi\u00f3n para este prop\u00f3sito, o crear una versi\u00f3n manual si usa otros sistemas.","title":"Versionado de datos"},{"location":"observabilidad/observability-as-code/","text":"Observability as Code En la medida de lo posible, la configuraci\u00f3n y administraci\u00f3n de los activos de observabilidad, como el aprovisionamiento de recursos en la nube, las alertas de monitoreo y los dashboard, deben administrarse como c\u00f3digo. La observabilidad como c\u00f3digo se logra utilizando cualquiera de las plantillas Terraform / Ansible / ARM / Bicep. Ejemplos de Observability as Code Dashboards as Code: los dashboards de monitoreo se pueden crear como plantillas JSON o XML. Esta plantilla se mantiene con control de c\u00f3digo fuente. La automatizaci\u00f3n se puede construir para habilitar el dashboard. Creaci\u00f3n mediante programaci\u00f3n de paneles de Azure . Alerts as Code: las alertas se pueden crear en Azure mediante el uso de plantillas de Terraform o ARM. Estas alertas se pueden controlar desde el origen y se pueden implementar como parte de las canalizaciones. Algunas referencias de c\u00f3mo hacer esto son: Terraform Monitor Metric Alert . Las alertas tambi\u00e9n se pueden crear en funci\u00f3n de la consulta de log analytics y se pueden definir como c\u00f3digo mediante Terraform Monitor Scheduled Query Rules Alert . Automatizaci\u00f3n de consultas de Log Analytics: hay varios casos de uso en los que puede ser necesaria la automatizaci\u00f3n de consultas de log analytics. Por ejemplo, generaci\u00f3n autom\u00e1tica de informes, ejecuci\u00f3n de consultas personalizadas mediante programaci\u00f3n para an\u00e1lisis, depuraci\u00f3n, etc. Para que estos casos de uso funcionen, las consultas de log deben estar controladas por fuente y la automatizaci\u00f3n se puede crear mediante Log Analytics REST o Azure CLI. Por qu\u00e9 Hace que la configuraci\u00f3n sea repetible y automatizable. Tambi\u00e9n evita la configuraci\u00f3n manual de alertas de monitoreo y dashboards desde cero en todos los entornos. Los dashboards configurados ayudan a solucionar errores durante la integraci\u00f3n y la implementaci\u00f3n (CI/CD). Podemos auditar los cambios y revertirlos si hay alg\u00fan problema. Identificar informaci\u00f3n procesable a partir de los datos de m\u00e9tricas generados en todos los entornos. La configuraci\u00f3n y gesti\u00f3n de los activos de observabilidad como el umbral de alerta, la duraci\u00f3n y los valores de configuraci\u00f3n mediante IaC nos ayudan a evitar errores u omisiones de configuraci\u00f3n durante la implementaci\u00f3n. Al practicar la observabilidad como c\u00f3digo, el equipo puede revisar los cambios de manera similar a otras contribuciones de c\u00f3digo.","title":"Observability as Code"},{"location":"observabilidad/observability-as-code/#observability-as-code","text":"En la medida de lo posible, la configuraci\u00f3n y administraci\u00f3n de los activos de observabilidad, como el aprovisionamiento de recursos en la nube, las alertas de monitoreo y los dashboard, deben administrarse como c\u00f3digo. La observabilidad como c\u00f3digo se logra utilizando cualquiera de las plantillas Terraform / Ansible / ARM / Bicep.","title":"Observability as Code"},{"location":"observabilidad/observability-as-code/#ejemplos-de-observability-as-code","text":"Dashboards as Code: los dashboards de monitoreo se pueden crear como plantillas JSON o XML. Esta plantilla se mantiene con control de c\u00f3digo fuente. La automatizaci\u00f3n se puede construir para habilitar el dashboard. Creaci\u00f3n mediante programaci\u00f3n de paneles de Azure . Alerts as Code: las alertas se pueden crear en Azure mediante el uso de plantillas de Terraform o ARM. Estas alertas se pueden controlar desde el origen y se pueden implementar como parte de las canalizaciones. Algunas referencias de c\u00f3mo hacer esto son: Terraform Monitor Metric Alert . Las alertas tambi\u00e9n se pueden crear en funci\u00f3n de la consulta de log analytics y se pueden definir como c\u00f3digo mediante Terraform Monitor Scheduled Query Rules Alert . Automatizaci\u00f3n de consultas de Log Analytics: hay varios casos de uso en los que puede ser necesaria la automatizaci\u00f3n de consultas de log analytics. Por ejemplo, generaci\u00f3n autom\u00e1tica de informes, ejecuci\u00f3n de consultas personalizadas mediante programaci\u00f3n para an\u00e1lisis, depuraci\u00f3n, etc. Para que estos casos de uso funcionen, las consultas de log deben estar controladas por fuente y la automatizaci\u00f3n se puede crear mediante Log Analytics REST o Azure CLI.","title":"Ejemplos de Observability as Code"},{"location":"observabilidad/observability-as-code/#por-que","text":"Hace que la configuraci\u00f3n sea repetible y automatizable. Tambi\u00e9n evita la configuraci\u00f3n manual de alertas de monitoreo y dashboards desde cero en todos los entornos. Los dashboards configurados ayudan a solucionar errores durante la integraci\u00f3n y la implementaci\u00f3n (CI/CD). Podemos auditar los cambios y revertirlos si hay alg\u00fan problema. Identificar informaci\u00f3n procesable a partir de los datos de m\u00e9tricas generados en todos los entornos. La configuraci\u00f3n y gesti\u00f3n de los activos de observabilidad como el umbral de alerta, la duraci\u00f3n y los valores de configuraci\u00f3n mediante IaC nos ayudan a evitar errores u omisiones de configuraci\u00f3n durante la implementaci\u00f3n. Al practicar la observabilidad como c\u00f3digo, el equipo puede revisar los cambios de manera similar a otras contribuciones de c\u00f3digo.","title":"Por qu\u00e9"},{"location":"observabilidad/observability-databricks/","text":"","title":"Observability databricks"},{"location":"observabilidad/observability-pipelines/","text":"Observabilidad de pipelines de CI/CD Con la creciente complejidad de las canalizaciones de entrega, es muy importante tener en cuenta la Observabilidad en el contexto de la creaci\u00f3n y el release de aplicaciones. Beneficios Tener la instrumentaci\u00f3n adecuada durante el tiempo de compilaci\u00f3n ayuda a obtener informaci\u00f3n sobre las diversas etapas del proceso de compilaci\u00f3n y release. Ayuda a los desarrolladores a comprender d\u00f3nde se encuentran los cuellos de botella en el rendimiento de la canalizaci\u00f3n, seg\u00fan los datos recopilados. Esto ayuda a tener conversaciones basadas en datos sobre la identificaci\u00f3n de latencia entre trabajos, problemas de rendimiento, tiempos de carga/descarga de artefactos, lo que proporciona informaci\u00f3n valiosa sobre la disponibilidad y la capacidad de los agentes. Ayuda a identificar tendencias en fallas, lo que permite a los desarrolladores realizar r\u00e1pidamente un an\u00e1lisis de causa ra\u00edz. Ayuda a proporcionar una vista de toda la organizaci\u00f3n del estado de la canalizaci\u00f3n para identificar f\u00e1cilmente las tendencias. Puntos a considerar Es importante identificar los KPIs para evaluar un pipeline de CI/CD exitoso. Cuando sea necesario, se puede agregar un seguimiento adicional para registrar mejor las m\u00e9tricas de KPI. Los informes b\u00e1sicos sobre las canalizaciones est\u00e1n disponibles de forma inmediata. Es importante evaluar estos informes con respecto a los KPI para comprender si se necesita una soluci\u00f3n de informes personalizados para sus canalizaciones. Si es necesario, se pueden crear paneles personalizados con herramientas de terceros como Grafana o Power BI Dashboards.","title":"Observabilidad de pipelines de CI/CD"},{"location":"observabilidad/observability-pipelines/#observabilidad-de-pipelines-de-cicd","text":"Con la creciente complejidad de las canalizaciones de entrega, es muy importante tener en cuenta la Observabilidad en el contexto de la creaci\u00f3n y el release de aplicaciones.","title":"Observabilidad de pipelines de CI/CD"},{"location":"observabilidad/observability-pipelines/#beneficios","text":"Tener la instrumentaci\u00f3n adecuada durante el tiempo de compilaci\u00f3n ayuda a obtener informaci\u00f3n sobre las diversas etapas del proceso de compilaci\u00f3n y release. Ayuda a los desarrolladores a comprender d\u00f3nde se encuentran los cuellos de botella en el rendimiento de la canalizaci\u00f3n, seg\u00fan los datos recopilados. Esto ayuda a tener conversaciones basadas en datos sobre la identificaci\u00f3n de latencia entre trabajos, problemas de rendimiento, tiempos de carga/descarga de artefactos, lo que proporciona informaci\u00f3n valiosa sobre la disponibilidad y la capacidad de los agentes. Ayuda a identificar tendencias en fallas, lo que permite a los desarrolladores realizar r\u00e1pidamente un an\u00e1lisis de causa ra\u00edz. Ayuda a proporcionar una vista de toda la organizaci\u00f3n del estado de la canalizaci\u00f3n para identificar f\u00e1cilmente las tendencias.","title":"Beneficios"},{"location":"observabilidad/observability-pipelines/#puntos-a-considerar","text":"Es importante identificar los KPIs para evaluar un pipeline de CI/CD exitoso. Cuando sea necesario, se puede agregar un seguimiento adicional para registrar mejor las m\u00e9tricas de KPI. Los informes b\u00e1sicos sobre las canalizaciones est\u00e1n disponibles de forma inmediata. Es importante evaluar estos informes con respecto a los KPI para comprender si se necesita una soluci\u00f3n de informes personalizados para sus canalizaciones. Si es necesario, se pueden crear paneles personalizados con herramientas de terceros como Grafana o Power BI Dashboards.","title":"Puntos a considerar"},{"location":"observabilidad/profiling/","text":"Profiling Visi\u00f3n general La creaci\u00f3n de perfiles es una forma de an\u00e1lisis que mide varios componentes, como la asignaci\u00f3n de memoria, garbage collection, los subprocesos y bloqueos, las pilas de llamadas o la frecuencia y duraci\u00f3n de funciones espec\u00edficas. Se puede usar para ver qu\u00e9 funciones son las m\u00e1s costosas, lo que le permite concentrar su esfuerzo en eliminar las mayores ineficiencias lo m\u00e1s r\u00e1pido posible. Puede ayudarlo a encontrar interbloqueos, fugas de memoria o asignaci\u00f3n de memoria ineficiente, y ayudar a informar las decisiones sobre la asignaci\u00f3n de recursos (es decir, CPU o RAM). C\u00f3mo perfilar las aplicaciones La creaci\u00f3n de perfiles depende en cierta medida del lenguaje. Adem\u00e1s, Linux Perf es una buena alternativa, ya que muchos lenguajes tienen enlaces en C/C++. La creaci\u00f3n de perfiles tiene alg\u00fan costo, ya que requiere inspeccionar la pila de llamadas y, a veces, pausar la aplicaci\u00f3n por completo. Considere el costo cuando decida ajustar los par\u00e1metros de perfilaje. Desafortunadamente, cada herramienta de generaci\u00f3n de perfiles generalmente usa su propio formato para almacenar perfiles y viene con su propia visualizaci\u00f3n. Herramientas espec\u00edficas (Java, Go, Python, Ruby, eBPF) Pyroscope : perfilado continuo listo para usar. (Java and Go) Flame : perfilado de contenedores en Kubernetes. (Java, Python, Go) Datadog Continuous Profiler . (Java, Python, Go, Node.js) Instana . (Go) profefe : construye pprof para proporcionar perfiles continuos. (Java) Opsian . (Java) Eclipse Memory Analyzer .","title":"Profiling"},{"location":"observabilidad/profiling/#profiling","text":"","title":"Profiling"},{"location":"observabilidad/profiling/#vision-general","text":"La creaci\u00f3n de perfiles es una forma de an\u00e1lisis que mide varios componentes, como la asignaci\u00f3n de memoria, garbage collection, los subprocesos y bloqueos, las pilas de llamadas o la frecuencia y duraci\u00f3n de funciones espec\u00edficas. Se puede usar para ver qu\u00e9 funciones son las m\u00e1s costosas, lo que le permite concentrar su esfuerzo en eliminar las mayores ineficiencias lo m\u00e1s r\u00e1pido posible. Puede ayudarlo a encontrar interbloqueos, fugas de memoria o asignaci\u00f3n de memoria ineficiente, y ayudar a informar las decisiones sobre la asignaci\u00f3n de recursos (es decir, CPU o RAM).","title":"Visi\u00f3n general"},{"location":"observabilidad/profiling/#como-perfilar-las-aplicaciones","text":"La creaci\u00f3n de perfiles depende en cierta medida del lenguaje. Adem\u00e1s, Linux Perf es una buena alternativa, ya que muchos lenguajes tienen enlaces en C/C++. La creaci\u00f3n de perfiles tiene alg\u00fan costo, ya que requiere inspeccionar la pila de llamadas y, a veces, pausar la aplicaci\u00f3n por completo. Considere el costo cuando decida ajustar los par\u00e1metros de perfilaje. Desafortunadamente, cada herramienta de generaci\u00f3n de perfiles generalmente usa su propio formato para almacenar perfiles y viene con su propia visualizaci\u00f3n.","title":"C\u00f3mo perfilar las aplicaciones"},{"location":"observabilidad/profiling/#herramientas-especificas","text":"(Java, Go, Python, Ruby, eBPF) Pyroscope : perfilado continuo listo para usar. (Java and Go) Flame : perfilado de contenedores en Kubernetes. (Java, Python, Go) Datadog Continuous Profiler . (Java, Python, Go, Node.js) Instana . (Go) profefe : construye pprof para proporcionar perfiles continuos. (Java) Opsian . (Java) Eclipse Memory Analyzer .","title":"Herramientas espec\u00edficas"},{"location":"observabilidad/recipes-observability/","text":"Recetas Application Insights/ASP.NET GitHub Repo , Art\u00edculo Ejemplo: Configuraci\u00f3n de dashboards y alertas de Azure Monitor con Terraform GitHub Repo Reportes de Azure DevOps Pipelines con Power BI GitHub Repo Esta receta de dashboard proporciona visibilidad para canalizaciones de Azure DevOps al mostrar varias m\u00e9tricas en una tabla. Adem\u00e1s, la segunda p\u00e1gina de la plantilla visualiza las tendencias de \u00e9xito y error de canalizaci\u00f3n mediante gr\u00e1ficos de Power BI. Clase Python Logger para Application Insights usando OpenCensus GitHub Repo Este repositorio contiene la clase \"AppLogger\", que es una clase logger de Python para Application Insights mediante Opencensus. Tambi\u00e9n contiene c\u00f3digo de ejemplo que muestra el uso de \"AppLogger\".","title":"Recetas"},{"location":"observabilidad/recipes-observability/#recetas","text":"","title":"Recetas"},{"location":"observabilidad/recipes-observability/#application-insightsaspnet","text":"GitHub Repo , Art\u00edculo","title":"Application Insights/ASP.NET"},{"location":"observabilidad/recipes-observability/#ejemplo-configuracion-de-dashboards-y-alertas-de-azure-monitor-con-terraform","text":"GitHub Repo","title":"Ejemplo: Configuraci\u00f3n de dashboards y alertas de Azure Monitor con Terraform"},{"location":"observabilidad/recipes-observability/#reportes-de-azure-devops-pipelines-con-power-bi","text":"GitHub Repo Esta receta de dashboard proporciona visibilidad para canalizaciones de Azure DevOps al mostrar varias m\u00e9tricas en una tabla. Adem\u00e1s, la segunda p\u00e1gina de la plantilla visualiza las tendencias de \u00e9xito y error de canalizaci\u00f3n mediante gr\u00e1ficos de Power BI.","title":"Reportes de Azure DevOps Pipelines con Power BI"},{"location":"observabilidad/recipes-observability/#clase-python-logger-para-application-insights-usando-opencensus","text":"GitHub Repo Este repositorio contiene la clase \"AppLogger\", que es una clase logger de Python para Application Insights mediante Opencensus. Tambi\u00e9n contiene c\u00f3digo de ejemplo que muestra el uso de \"AppLogger\".","title":"Clase Python Logger para Application Insights usando OpenCensus"},{"location":"observabilidad/herramientas/","text":"Herramientas y Patrones Hay una serie de herramientas modernas para hacer que los sistemas sean observables. Al identificar y/o crear herramientas que funcionen para su sistema, aqu\u00ed hay algunas cosas que debe considerar para ayudar a guiar las opciones. Debe ser simple de integrar y f\u00e1cil de usar. Debe ser posible agregar y visualizar datos. Las herramientas deben proporcionar datos en tiempo real. Debe ser capaz de guiar a los usuarios al \u00e1rea del problema con un contexto apropiado de extremo a extremo. Opciones Loki OpenTelemetry Kubernetes Dashboards Prometheus Malla de servicio (Service Mesh) Aprovechar una malla de servicio que sigue el patr\u00f3n Sidecar configura r\u00e1pidamente un conjunto de m\u00e9tricas y trazas. Un sidecar funciona interceptando todo el tr\u00e1fico entrante y saliente hacia su imagen. Luego agrega encabezados de seguimiento a cada solicitud y emite un conjunto est\u00e1ndar de logs y m\u00e9tricas. Estas m\u00e9tricas son extremadamente poderosas para la observabilidad, lo que permite que cada servicio, ya sea del lado del cliente o del lado del servidor, aproveche un conjunto unificado de m\u00e9tricas, que incluyen: Latencia Bytes Tasa de solicitud Tasa de error","title":"Herramientas y Patrones"},{"location":"observabilidad/herramientas/#herramientas-y-patrones","text":"Hay una serie de herramientas modernas para hacer que los sistemas sean observables. Al identificar y/o crear herramientas que funcionen para su sistema, aqu\u00ed hay algunas cosas que debe considerar para ayudar a guiar las opciones. Debe ser simple de integrar y f\u00e1cil de usar. Debe ser posible agregar y visualizar datos. Las herramientas deben proporcionar datos en tiempo real. Debe ser capaz de guiar a los usuarios al \u00e1rea del problema con un contexto apropiado de extremo a extremo.","title":"Herramientas y Patrones"},{"location":"observabilidad/herramientas/#opciones","text":"Loki OpenTelemetry Kubernetes Dashboards Prometheus","title":"Opciones"},{"location":"observabilidad/herramientas/#malla-de-servicio-service-mesh","text":"Aprovechar una malla de servicio que sigue el patr\u00f3n Sidecar configura r\u00e1pidamente un conjunto de m\u00e9tricas y trazas. Un sidecar funciona interceptando todo el tr\u00e1fico entrante y saliente hacia su imagen. Luego agrega encabezados de seguimiento a cada solicitud y emite un conjunto est\u00e1ndar de logs y m\u00e9tricas. Estas m\u00e9tricas son extremadamente poderosas para la observabilidad, lo que permite que cada servicio, ya sea del lado del cliente o del lado del servidor, aproveche un conjunto unificado de m\u00e9tricas, que incluyen: Latencia Bytes Tasa de solicitud Tasa de error","title":"Malla de servicio (Service Mesh)"},{"location":"observabilidad/herramientas/KubernetesDashboards/","text":"Kubernetes UI Dashboards Este documento cubre las opciones y los beneficios de varios Kubernetes UI Dashboards, que son herramientas \u00fatiles para monitorear y depurar su aplicaci\u00f3n en cl\u00fasteres de Kubernetes. Ventajas y casos de uso Permite la capacidad de ver, administrar y monitorear los aspectos operativos del cl\u00faster de Kubernetes. Los beneficios de usar un dashboard de interfaz de usuario incluyen lo siguiente: Ver una descripci\u00f3n general del cl\u00faster Implementar aplicaciones en el cl\u00faster Solucionar problemas de aplicaciones que se ejecutan en el cl\u00faster Ver, crear, modificar y eliminar recursos de Kubernetes Ver m\u00e9tricas b\u00e1sicas de recursos, incluido el uso de recursos para objetos de Kubernetes Ver y acceder a los registros Ver en vivo el estado de los pods Diferentes dashboards pueden proporcionar diferentes funcionalidades, y el caso de uso para elegir un dashboard en particular depender\u00e1 de los requisitos. Open Source Dashboards Actualmente hay varios dashboards disponibles para monitorear sus aplicaciones o administrarlas con Kubernetes: Octant Prometheus y Grafana Kube Prometheus Stack Chart : proporciona una manera f\u00e1cil de operar el monitoreo de cl\u00fasteres de Kubernetes de un extremo a otro con Prometheus utilizando Prometheus Operator. K8Dash kube-ops-view : una herramienta para visualizar la ocupaci\u00f3n y utilizaci\u00f3n de nodos Lens : herramienta de escritorio del lado del cliente Thanos y Cortex : implementaciones multicl\u00faster Referencias Alternativas a Kubernetes Dashboard Prometheus y Grafana con Kubernetes","title":"Kubernetes UI Dashboards"},{"location":"observabilidad/herramientas/KubernetesDashboards/#kubernetes-ui-dashboards","text":"Este documento cubre las opciones y los beneficios de varios Kubernetes UI Dashboards, que son herramientas \u00fatiles para monitorear y depurar su aplicaci\u00f3n en cl\u00fasteres de Kubernetes.","title":"Kubernetes UI Dashboards"},{"location":"observabilidad/herramientas/KubernetesDashboards/#ventajas-y-casos-de-uso","text":"Permite la capacidad de ver, administrar y monitorear los aspectos operativos del cl\u00faster de Kubernetes. Los beneficios de usar un dashboard de interfaz de usuario incluyen lo siguiente: Ver una descripci\u00f3n general del cl\u00faster Implementar aplicaciones en el cl\u00faster Solucionar problemas de aplicaciones que se ejecutan en el cl\u00faster Ver, crear, modificar y eliminar recursos de Kubernetes Ver m\u00e9tricas b\u00e1sicas de recursos, incluido el uso de recursos para objetos de Kubernetes Ver y acceder a los registros Ver en vivo el estado de los pods Diferentes dashboards pueden proporcionar diferentes funcionalidades, y el caso de uso para elegir un dashboard en particular depender\u00e1 de los requisitos.","title":"Ventajas y casos de uso"},{"location":"observabilidad/herramientas/KubernetesDashboards/#open-source-dashboards","text":"Actualmente hay varios dashboards disponibles para monitorear sus aplicaciones o administrarlas con Kubernetes: Octant Prometheus y Grafana Kube Prometheus Stack Chart : proporciona una manera f\u00e1cil de operar el monitoreo de cl\u00fasteres de Kubernetes de un extremo a otro con Prometheus utilizando Prometheus Operator. K8Dash kube-ops-view : una herramienta para visualizar la ocupaci\u00f3n y utilizaci\u00f3n de nodos Lens : herramienta de escritorio del lado del cliente Thanos y Cortex : implementaciones multicl\u00faster","title":"Open Source Dashboards"},{"location":"observabilidad/herramientas/KubernetesDashboards/#referencias","text":"Alternativas a Kubernetes Dashboard Prometheus y Grafana con Kubernetes","title":"Referencias"},{"location":"observabilidad/herramientas/OpenTelemetry/","text":"Open Telemetry OpenTelemetry es un est\u00e1ndar de observabilidad de c\u00f3digo abierto que define c\u00f3mo generar, recopilar y describir la telemetr\u00eda en sistemas distribuidos. OpenTelemetry tambi\u00e9n proporciona una distribuci\u00f3n de punto \u00fanico de un conjunto de API, SDK y bibliotecas de instrumentaci\u00f3n que implementa el est\u00e1ndar de c\u00f3digo abierto, que puede recopilar, procesar y orquestar datos de telemetr\u00eda (se\u00f1ales) como trazas, m\u00e9tricas y logs. Admite m\u00faltiples lenguajes populares. Un punto importante a tener en cuenta es que OpenTelemetry no tiene su propio backend; toda la telemetr\u00eda recopilada por OpenTelemetry Collector debe enviarse a un backend como Prometheus, Jaeger, Zipkin, Azure Monitor, etc. Los dos problemas principales que resuelve OpenTelemetry son: primero, la neutralidad del proveedor para las APIs de tracing, monitoreo y logging y, en segundo lugar, la implementaci\u00f3n de propagaci\u00f3n de contexto multiplataforma lista para usar para el seguimiento distribuido de extremo a extremo sobre componentes heterog\u00e9neos. Conceptos b\u00e1sicos de Open Telemetry Patrones de implementaci\u00f3n de Open Telemetry Comprender los patrones de implementaci\u00f3n b\u00e1sicos lo ayudar\u00e1 a saber qu\u00e9 enfoque se adapta mejor al escenario que est\u00e1 tratando de resolver. Hay tres patrones principales: Telemetr\u00eda autom\u00e1tica: la compatibilidad con la instrumentaci\u00f3n autom\u00e1tica est\u00e1 disponible para algunos lenguajes. Para aquellos disponibles, la instrumentaci\u00f3n automatizada de OpenTelemetry se implementa mediante la ejecuci\u00f3n de OpenTelemetry Agent. El agente se implementar\u00eda con su servicio y se ejecutar\u00eda como un proceso separado o en un sidecar. El agente lee un conjunto de variables de entorno predefinidas que se utilizan para configurar su comportamiento y varias configuraciones de exportador/recopilador. El agente interceptar\u00e1 todas las interacciones y dependencias y enviar\u00e1 autom\u00e1ticamente la telemetr\u00eda a los exportadores configurados. Rastreo manual: esto se debe hacer codificando con el SDK de OpenTelemetry, administrando los objetos tracer para obtener intervalos y formando \u00e1mbitos de OpenTelemetry instrumentados para identificar los segmentos de c\u00f3digo que se rastrear\u00e1n manualmente. Enfoque h\u00edbrido: la mayor\u00eda de los escenarios listos para producci\u00f3n requerir\u00e1n una combinaci\u00f3n de ambas t\u00e9cnicas, utilizando OpenTelemetry Agent para recopilar telemetr\u00eda autom\u00e1tica y OpenTelemetry SDK para identificar segmentos de c\u00f3digo que son importantes para instrumentar manualmente. Este enfoque permite una cobertura completa de toda la soluci\u00f3n. Collector El collector es un proceso separado que est\u00e1 dise\u00f1ado para ser un \"sumidero\" para los datos de telemetr\u00eda emitidos por muchos procesos, que luego pueden exportar esos datos a los sistemas de back-end. El collector tiene dos estrategias de implementaci\u00f3n diferentes: se ejecuta como un agente junto con un servicio o como una aplicaci\u00f3n remota. En general, se recomienda usar ambos: el agente se implementar\u00eda con su servicio y se ejecutar\u00eda como un proceso separado o en un sidecar; mientras tanto, el recopilador se implementar\u00eda por separado, como su propia aplicaci\u00f3n ejecut\u00e1ndose en un contenedor o m\u00e1quina virtual. Cada agente enviar\u00eda datos de telemetr\u00eda al recopilador, que luego podr\u00eda exportarlos a una variedad de sistemas de back-end como Lightstep, Jaeger o Prometheus. Bibliotecas de instrumentaci\u00f3n Una biblioteca que permite la observabilidad de otra biblioteca se denomina biblioteca de instrumentaci\u00f3n. Las bibliotecas de OpenTelemetry son espec\u00edficas del lenguaje, actualmente hay un buen soporte para Java, Python, Javascript, dotnet y golang. El soporte para la instrumentaci\u00f3n autom\u00e1tica est\u00e1 disponible para algunas bibliotecas que hacen que el uso de OpenTelemetry sea f\u00e1cil y trivial. En caso de que la instrumentaci\u00f3n autom\u00e1tica no est\u00e9 disponible, la instrumentaci\u00f3n manual se puede configurar mediante el SDK de OpenTelemetry. Integraci\u00f3n de OpenTelemetry OpenTelemetry se puede utilizar para recopilar, procesar y exportar datos a m\u00faltiples backends. Algunas integraciones populares compatibles con OpenTelemetry son: Zipkin Prometheus Jaeger New Relic Azure Monitor AWS X-Ray Datadog Kafka Lightstep Splunk GCP Monitor Por qu\u00e9 usar OpenTelemetry La raz\u00f3n principal es que ofrece un est\u00e1ndar de c\u00f3digo abierto para implementar telemetr\u00eda distribuida (propagaci\u00f3n de contexto) en sistemas heterog\u00e9neos. Evitar cualquier bloqueo de propiedad y lograr la neutralidad independiente del proveedor permite patrones m\u00e1ximos de portabilidad y extensibilidad. Adem\u00e1s, OpenTelemetry se rige por especificaciones y est\u00e1 respaldado por grandes actores en el panorama de la observabilidad como Microsoft, Splunk, AppDynamics, etc. Es probable que OpenTelemetry se convierta en un est\u00e1ndar de facto. Estado actual del proyecto OpenTelemetry OpenTelemetry es un proyecto que surgi\u00f3 de la fusi\u00f3n de OpenCensus y OpenTracing en 2019. Aunque OpenCensus y OpenTracing est\u00e1n congelados y no se est\u00e1n desarrollando nuevas funciones para ellos, OpenTelemetry tiene compatibilidad con versiones anteriores de OpenCensus y OpenTracing. Algunas funciones de OpenTelemetry todav\u00eda est\u00e1n en versi\u00f3n beta, la compatibilidad de funciones para diferentes lenguajes se rastrea aqu\u00ed: Feature Status of OpenTelemetry . El estado del proyecto OpenTelemetry se puede rastrear aqu\u00ed . Opciones de integraci\u00f3n con Azure Monitor Hay dos enfoques posibles al integrar una aplicaci\u00f3n instrumentada de OpenTelemetry con Azure Monitor como un exportador de OpenTemetry. Uso de la biblioteca de exportaci\u00f3n de OpenTelemetry de Azure Monitor Este escenario usa el SDK de OpenTelemetry como la biblioteca de instrumentaci\u00f3n principal. B\u00e1sicamente, esto significa que instrumentar\u00e1 su aplicaci\u00f3n con las bibliotecas de OpenTelemetry, pero adem\u00e1s usar\u00e1 Azure Monitor OpenTelemetry Exporter y luego lo agregar\u00e1 como un exportador adicional con OpenTelemetry SDK. Uso del archivo Jar del agente de Application Insights Al configurar esta opci\u00f3n, el archivo del Agente de Applications Insights se agrega al ejecutar la aplicaci\u00f3n. El archivo de configuraci\u00f3n applicationinsights.json tambi\u00e9n debe agregarse como parte de los artefactos de aplicaciones. Preste mucha atenci\u00f3n a la secci\u00f3n de vista previa, donde la propiedad \"openTelemetryApiSupport\": true , se establece en true, lo que permite al agente interceptar la telemetr\u00eda de OpenTelemetry creada en el c\u00f3digo de la aplicaci\u00f3n y enviarla a Azure Monitor. La principal diferencia entre ejecutar el agente de OpenTelemetry y el agente de Application Insights se demuestra en la cantidad de trazas que se registran en Azure Monitor. Cuando se ejecuta en modo solo OpenTelemetry, se env\u00edan solo las trazas manuales. Por otro lado, cuando se ejecuta utilizando el modo de agente de Application Insights, es fundamental resaltar que no se registra nada en Jaeger (ni en ning\u00fan otro exportador de OpenTelemetry). Todas las trazas se enviar\u00e1n exclusivamente a Azure Monitor. Resumen No existe un enfoque de \"talla \u00fanica\" al implementar OpenTelemetry con Azure Monitor como back-end. En el momento de escribir este art\u00edculo, si desea tener la flexibilidad de tener diferentes back-ends de OpenTelemetry, definitivamente debe optar por OpenTelemetry Agent, aunque sacrificar\u00eda todo el flujo de tracing autom\u00e1tico a Azure Monitor. Por otro lado, si desea obtener lo mejor de Azure Monitor y a\u00fan desea instrumentar su c\u00f3digo con OpenTelemetry SDK, debe usar Application Insights Agent e instrumentar manualmente su c\u00f3digo con OpenTelemetry SDK para obtener lo mejor de ambos mundos. De cualquier manera, instrumentar su c\u00f3digo con OpenTelemetry parece el enfoque correcto ya que el ecosistema solo se har\u00e1 m\u00e1s grande, mejor y m\u00e1s robusto. Referencias Sitio oficial OpenTelemetry Primeros pasos con dotnet y OpenTelemetry Uso de OpenTelemetry Collector OpenTelemetry Java SDK Agente de instrumentaci\u00f3n OpenTelemetry para Java Agente Java de Application Insights Biblioteca cliente de Azure Monitor OpenTelemetry Exporter para Java Biblioteca de complementos de Azure OpenTelemetry Tracing para Java Configuraci\u00f3n de OpenTelemetry del agente de Application Insights","title":"Open Telemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#open-telemetry","text":"OpenTelemetry es un est\u00e1ndar de observabilidad de c\u00f3digo abierto que define c\u00f3mo generar, recopilar y describir la telemetr\u00eda en sistemas distribuidos. OpenTelemetry tambi\u00e9n proporciona una distribuci\u00f3n de punto \u00fanico de un conjunto de API, SDK y bibliotecas de instrumentaci\u00f3n que implementa el est\u00e1ndar de c\u00f3digo abierto, que puede recopilar, procesar y orquestar datos de telemetr\u00eda (se\u00f1ales) como trazas, m\u00e9tricas y logs. Admite m\u00faltiples lenguajes populares. Un punto importante a tener en cuenta es que OpenTelemetry no tiene su propio backend; toda la telemetr\u00eda recopilada por OpenTelemetry Collector debe enviarse a un backend como Prometheus, Jaeger, Zipkin, Azure Monitor, etc. Los dos problemas principales que resuelve OpenTelemetry son: primero, la neutralidad del proveedor para las APIs de tracing, monitoreo y logging y, en segundo lugar, la implementaci\u00f3n de propagaci\u00f3n de contexto multiplataforma lista para usar para el seguimiento distribuido de extremo a extremo sobre componentes heterog\u00e9neos.","title":"Open Telemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#conceptos-basicos-de-open-telemetry","text":"","title":"Conceptos b\u00e1sicos de Open Telemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#patrones-de-implementacion-de-open-telemetry","text":"Comprender los patrones de implementaci\u00f3n b\u00e1sicos lo ayudar\u00e1 a saber qu\u00e9 enfoque se adapta mejor al escenario que est\u00e1 tratando de resolver. Hay tres patrones principales: Telemetr\u00eda autom\u00e1tica: la compatibilidad con la instrumentaci\u00f3n autom\u00e1tica est\u00e1 disponible para algunos lenguajes. Para aquellos disponibles, la instrumentaci\u00f3n automatizada de OpenTelemetry se implementa mediante la ejecuci\u00f3n de OpenTelemetry Agent. El agente se implementar\u00eda con su servicio y se ejecutar\u00eda como un proceso separado o en un sidecar. El agente lee un conjunto de variables de entorno predefinidas que se utilizan para configurar su comportamiento y varias configuraciones de exportador/recopilador. El agente interceptar\u00e1 todas las interacciones y dependencias y enviar\u00e1 autom\u00e1ticamente la telemetr\u00eda a los exportadores configurados. Rastreo manual: esto se debe hacer codificando con el SDK de OpenTelemetry, administrando los objetos tracer para obtener intervalos y formando \u00e1mbitos de OpenTelemetry instrumentados para identificar los segmentos de c\u00f3digo que se rastrear\u00e1n manualmente. Enfoque h\u00edbrido: la mayor\u00eda de los escenarios listos para producci\u00f3n requerir\u00e1n una combinaci\u00f3n de ambas t\u00e9cnicas, utilizando OpenTelemetry Agent para recopilar telemetr\u00eda autom\u00e1tica y OpenTelemetry SDK para identificar segmentos de c\u00f3digo que son importantes para instrumentar manualmente. Este enfoque permite una cobertura completa de toda la soluci\u00f3n.","title":"Patrones de implementaci\u00f3n de Open Telemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#collector","text":"El collector es un proceso separado que est\u00e1 dise\u00f1ado para ser un \"sumidero\" para los datos de telemetr\u00eda emitidos por muchos procesos, que luego pueden exportar esos datos a los sistemas de back-end. El collector tiene dos estrategias de implementaci\u00f3n diferentes: se ejecuta como un agente junto con un servicio o como una aplicaci\u00f3n remota. En general, se recomienda usar ambos: el agente se implementar\u00eda con su servicio y se ejecutar\u00eda como un proceso separado o en un sidecar; mientras tanto, el recopilador se implementar\u00eda por separado, como su propia aplicaci\u00f3n ejecut\u00e1ndose en un contenedor o m\u00e1quina virtual. Cada agente enviar\u00eda datos de telemetr\u00eda al recopilador, que luego podr\u00eda exportarlos a una variedad de sistemas de back-end como Lightstep, Jaeger o Prometheus.","title":"Collector"},{"location":"observabilidad/herramientas/OpenTelemetry/#bibliotecas-de-instrumentacion","text":"Una biblioteca que permite la observabilidad de otra biblioteca se denomina biblioteca de instrumentaci\u00f3n. Las bibliotecas de OpenTelemetry son espec\u00edficas del lenguaje, actualmente hay un buen soporte para Java, Python, Javascript, dotnet y golang. El soporte para la instrumentaci\u00f3n autom\u00e1tica est\u00e1 disponible para algunas bibliotecas que hacen que el uso de OpenTelemetry sea f\u00e1cil y trivial. En caso de que la instrumentaci\u00f3n autom\u00e1tica no est\u00e9 disponible, la instrumentaci\u00f3n manual se puede configurar mediante el SDK de OpenTelemetry.","title":"Bibliotecas de instrumentaci\u00f3n"},{"location":"observabilidad/herramientas/OpenTelemetry/#integracion-de-opentelemetry","text":"OpenTelemetry se puede utilizar para recopilar, procesar y exportar datos a m\u00faltiples backends. Algunas integraciones populares compatibles con OpenTelemetry son: Zipkin Prometheus Jaeger New Relic Azure Monitor AWS X-Ray Datadog Kafka Lightstep Splunk GCP Monitor","title":"Integraci\u00f3n de OpenTelemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#por-que-usar-opentelemetry","text":"La raz\u00f3n principal es que ofrece un est\u00e1ndar de c\u00f3digo abierto para implementar telemetr\u00eda distribuida (propagaci\u00f3n de contexto) en sistemas heterog\u00e9neos. Evitar cualquier bloqueo de propiedad y lograr la neutralidad independiente del proveedor permite patrones m\u00e1ximos de portabilidad y extensibilidad. Adem\u00e1s, OpenTelemetry se rige por especificaciones y est\u00e1 respaldado por grandes actores en el panorama de la observabilidad como Microsoft, Splunk, AppDynamics, etc. Es probable que OpenTelemetry se convierta en un est\u00e1ndar de facto.","title":"Por qu\u00e9 usar OpenTelemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#estado-actual-del-proyecto-opentelemetry","text":"OpenTelemetry es un proyecto que surgi\u00f3 de la fusi\u00f3n de OpenCensus y OpenTracing en 2019. Aunque OpenCensus y OpenTracing est\u00e1n congelados y no se est\u00e1n desarrollando nuevas funciones para ellos, OpenTelemetry tiene compatibilidad con versiones anteriores de OpenCensus y OpenTracing. Algunas funciones de OpenTelemetry todav\u00eda est\u00e1n en versi\u00f3n beta, la compatibilidad de funciones para diferentes lenguajes se rastrea aqu\u00ed: Feature Status of OpenTelemetry . El estado del proyecto OpenTelemetry se puede rastrear aqu\u00ed .","title":"Estado actual del proyecto OpenTelemetry"},{"location":"observabilidad/herramientas/OpenTelemetry/#opciones-de-integracion-con-azure-monitor","text":"Hay dos enfoques posibles al integrar una aplicaci\u00f3n instrumentada de OpenTelemetry con Azure Monitor como un exportador de OpenTemetry.","title":"Opciones de integraci\u00f3n con Azure Monitor"},{"location":"observabilidad/herramientas/OpenTelemetry/#uso-de-la-biblioteca-de-exportacion-de-opentelemetry-de-azure-monitor","text":"Este escenario usa el SDK de OpenTelemetry como la biblioteca de instrumentaci\u00f3n principal. B\u00e1sicamente, esto significa que instrumentar\u00e1 su aplicaci\u00f3n con las bibliotecas de OpenTelemetry, pero adem\u00e1s usar\u00e1 Azure Monitor OpenTelemetry Exporter y luego lo agregar\u00e1 como un exportador adicional con OpenTelemetry SDK.","title":"Uso de la biblioteca de exportaci\u00f3n de OpenTelemetry de Azure Monitor"},{"location":"observabilidad/herramientas/OpenTelemetry/#uso-del-archivo-jar-del-agente-de-application-insights","text":"Al configurar esta opci\u00f3n, el archivo del Agente de Applications Insights se agrega al ejecutar la aplicaci\u00f3n. El archivo de configuraci\u00f3n applicationinsights.json tambi\u00e9n debe agregarse como parte de los artefactos de aplicaciones. Preste mucha atenci\u00f3n a la secci\u00f3n de vista previa, donde la propiedad \"openTelemetryApiSupport\": true , se establece en true, lo que permite al agente interceptar la telemetr\u00eda de OpenTelemetry creada en el c\u00f3digo de la aplicaci\u00f3n y enviarla a Azure Monitor. La principal diferencia entre ejecutar el agente de OpenTelemetry y el agente de Application Insights se demuestra en la cantidad de trazas que se registran en Azure Monitor. Cuando se ejecuta en modo solo OpenTelemetry, se env\u00edan solo las trazas manuales. Por otro lado, cuando se ejecuta utilizando el modo de agente de Application Insights, es fundamental resaltar que no se registra nada en Jaeger (ni en ning\u00fan otro exportador de OpenTelemetry). Todas las trazas se enviar\u00e1n exclusivamente a Azure Monitor.","title":"Uso del archivo Jar del agente de Application Insights"},{"location":"observabilidad/herramientas/OpenTelemetry/#resumen","text":"No existe un enfoque de \"talla \u00fanica\" al implementar OpenTelemetry con Azure Monitor como back-end. En el momento de escribir este art\u00edculo, si desea tener la flexibilidad de tener diferentes back-ends de OpenTelemetry, definitivamente debe optar por OpenTelemetry Agent, aunque sacrificar\u00eda todo el flujo de tracing autom\u00e1tico a Azure Monitor. Por otro lado, si desea obtener lo mejor de Azure Monitor y a\u00fan desea instrumentar su c\u00f3digo con OpenTelemetry SDK, debe usar Application Insights Agent e instrumentar manualmente su c\u00f3digo con OpenTelemetry SDK para obtener lo mejor de ambos mundos. De cualquier manera, instrumentar su c\u00f3digo con OpenTelemetry parece el enfoque correcto ya que el ecosistema solo se har\u00e1 m\u00e1s grande, mejor y m\u00e1s robusto.","title":"Resumen"},{"location":"observabilidad/herramientas/OpenTelemetry/#referencias","text":"Sitio oficial OpenTelemetry Primeros pasos con dotnet y OpenTelemetry Uso de OpenTelemetry Collector OpenTelemetry Java SDK Agente de instrumentaci\u00f3n OpenTelemetry para Java Agente Java de Application Insights Biblioteca cliente de Azure Monitor OpenTelemetry Exporter para Java Biblioteca de complementos de Azure OpenTelemetry Tracing para Java Configuraci\u00f3n de OpenTelemetry del agente de Application Insights","title":"Referencias"},{"location":"observabilidad/herramientas/Prometheus/","text":"Prometheus Visi\u00f3n general Es un conjunto de herramientas de monitoreo y alerta de c\u00f3digo abierto basado en datos de m\u00e9tricas de series temporales. Se ha convertido en una soluci\u00f3n de m\u00e9trica est\u00e1ndar de facto en el mundo nativo de la nube y se usa ampliamente con Kubernetes. El n\u00facleo de Prometheus es un servidor que extrae y almacena m\u00e9tricas. Hay otras numerosas caracter\u00edsticas y componentes opcionales, como un administrador de alertas y bibliotecas de clientes para lenguajes de programaci\u00f3n para ampliar las funcionalidades de Prometheus m\u00e1s all\u00e1 de lo b\u00e1sico. \u00bfPor qu\u00e9 Prometheus? Prometheus es una base de datos de series de tiempo y permite rastrear, monitorear y agregar eventos o mediciones a lo largo del tiempo. Prometheus es una herramienta basada en extracci\u00f3n. Tambi\u00e9n es compatible con el modelo push para impulsar m\u00e9tricas. La visualizaci\u00f3n de la serie temporal se puede realizar directamente a trav\u00e9s de su interfaz de usuario web. Prometheus proporciona un potente lenguaje de consulta funcional llamado PromQL (Prometheus Query Language) que permite al usuario agregar datos de series temporales en tiempo real. Integraci\u00f3n con otras herramientas Las bibliotecas de cliente de Prometheus le permiten agregar instrumentaci\u00f3n a su c\u00f3digo y exponer m\u00e9tricas internas a trav\u00e9s de un endpoint HTTP. Las bibliotecas de cliente oficiales de Prometheus actualmente son Go, Java o Scala, Python y Ruby. Las bibliotecas de terceros no oficiales incluyen: .NET/C#, Node.js y C++. El formato de m\u00e9tricas de Prometheus es compatible con una amplia gama de herramientas y servicios, que incluyen: Azure Monitor Stackdriver Datadog CloudWatch New Relic Flagger Grafana GitLab etc... Existen numerosos exportadores que se utilizan para exportar m\u00e9tricas existentes desde bases de datos, hardware, herramientas de CI/CD, sistemas de mensajer\u00eda, API y otros sistemas de monitoreo de terceros. Adem\u00e1s de las bibliotecas de clientes y los exportadores, existe una cantidad importante de puntos de integraci\u00f3n para el descubrimiento de servicios, el almacenamiento remoto, las alertas y la gesti\u00f3n. Referencias Documentos de Prometheus Mejores pr\u00e1cticas de Prometheus Grafana con Prometheus","title":"Prometheus"},{"location":"observabilidad/herramientas/Prometheus/#prometheus","text":"","title":"Prometheus"},{"location":"observabilidad/herramientas/Prometheus/#vision-general","text":"Es un conjunto de herramientas de monitoreo y alerta de c\u00f3digo abierto basado en datos de m\u00e9tricas de series temporales. Se ha convertido en una soluci\u00f3n de m\u00e9trica est\u00e1ndar de facto en el mundo nativo de la nube y se usa ampliamente con Kubernetes. El n\u00facleo de Prometheus es un servidor que extrae y almacena m\u00e9tricas. Hay otras numerosas caracter\u00edsticas y componentes opcionales, como un administrador de alertas y bibliotecas de clientes para lenguajes de programaci\u00f3n para ampliar las funcionalidades de Prometheus m\u00e1s all\u00e1 de lo b\u00e1sico.","title":"Visi\u00f3n general"},{"location":"observabilidad/herramientas/Prometheus/#por-que-prometheus","text":"Prometheus es una base de datos de series de tiempo y permite rastrear, monitorear y agregar eventos o mediciones a lo largo del tiempo. Prometheus es una herramienta basada en extracci\u00f3n. Tambi\u00e9n es compatible con el modelo push para impulsar m\u00e9tricas. La visualizaci\u00f3n de la serie temporal se puede realizar directamente a trav\u00e9s de su interfaz de usuario web. Prometheus proporciona un potente lenguaje de consulta funcional llamado PromQL (Prometheus Query Language) que permite al usuario agregar datos de series temporales en tiempo real.","title":"\u00bfPor qu\u00e9 Prometheus?"},{"location":"observabilidad/herramientas/Prometheus/#integracion-con-otras-herramientas","text":"Las bibliotecas de cliente de Prometheus le permiten agregar instrumentaci\u00f3n a su c\u00f3digo y exponer m\u00e9tricas internas a trav\u00e9s de un endpoint HTTP. Las bibliotecas de cliente oficiales de Prometheus actualmente son Go, Java o Scala, Python y Ruby. Las bibliotecas de terceros no oficiales incluyen: .NET/C#, Node.js y C++. El formato de m\u00e9tricas de Prometheus es compatible con una amplia gama de herramientas y servicios, que incluyen: Azure Monitor Stackdriver Datadog CloudWatch New Relic Flagger Grafana GitLab etc... Existen numerosos exportadores que se utilizan para exportar m\u00e9tricas existentes desde bases de datos, hardware, herramientas de CI/CD, sistemas de mensajer\u00eda, API y otros sistemas de monitoreo de terceros. Adem\u00e1s de las bibliotecas de clientes y los exportadores, existe una cantidad importante de puntos de integraci\u00f3n para el descubrimiento de servicios, el almacenamiento remoto, las alertas y la gesti\u00f3n.","title":"Integraci\u00f3n con otras herramientas"},{"location":"observabilidad/herramientas/Prometheus/#referencias","text":"Documentos de Prometheus Mejores pr\u00e1cticas de Prometheus Grafana con Prometheus","title":"Referencias"},{"location":"observabilidad/herramientas/loki/","text":"Loki Loki es un sistema de agregaci\u00f3n de registros multiusuario, de alta disponibilidad y escalable horizontalmente, creado por Grafana Labs inspirado en los aprendizajes de Prometheus. Ambas herramientas siguen la misma arquitectura, que es un agente que recopila m\u00e9tricas en cada uno de los componentes del sistema de software, un servidor que almacena los registros y tambi\u00e9n el tablero de Grafana, que accede al servidor loki para construir sus visualizaciones y consultas. Loki tiene tres componentes principales: Promtail Es la parte agente de Loki. Se puede usar para tomar registros de varios lugares, como var/log/ por ejemplo. La configuraci\u00f3n de Promtail es un archivo yaml llamado config-promtail.yml . En este archivo, se describen todas las rutas y fuentes de registro que se agregar\u00e1n en Loki Server. Loki Server Es responsable de recibir y almacenar todos los registros recibidos de todos los diferentes sistemas. Grafana Dashboards Son responsables de crear las visualizaciones y realizar consultas. \u00bfPor qu\u00e9 usar Loki? La raz\u00f3n principal para usar Loki en lugar de otras herramientas de agregaci\u00f3n de registros es que Loki optimiza el almacenamiento necesario. Lo hace siguiendo el mismo patr\u00f3n que Prometheus, que indexa las etiquetas y crea fragmentos del propio registro, utilizando menos espacio que simplemente almacenando los registros sin procesar. Referencias Sitio oficial de Loki Insertar logs en Loki Agregar fuente de Loki a Grafana Mejores pr\u00e1cticas de Loki","title":"Loki"},{"location":"observabilidad/herramientas/loki/#loki","text":"Loki es un sistema de agregaci\u00f3n de registros multiusuario, de alta disponibilidad y escalable horizontalmente, creado por Grafana Labs inspirado en los aprendizajes de Prometheus. Ambas herramientas siguen la misma arquitectura, que es un agente que recopila m\u00e9tricas en cada uno de los componentes del sistema de software, un servidor que almacena los registros y tambi\u00e9n el tablero de Grafana, que accede al servidor loki para construir sus visualizaciones y consultas. Loki tiene tres componentes principales:","title":"Loki"},{"location":"observabilidad/herramientas/loki/#promtail","text":"Es la parte agente de Loki. Se puede usar para tomar registros de varios lugares, como var/log/ por ejemplo. La configuraci\u00f3n de Promtail es un archivo yaml llamado config-promtail.yml . En este archivo, se describen todas las rutas y fuentes de registro que se agregar\u00e1n en Loki Server.","title":"Promtail"},{"location":"observabilidad/herramientas/loki/#loki-server","text":"Es responsable de recibir y almacenar todos los registros recibidos de todos los diferentes sistemas.","title":"Loki Server"},{"location":"observabilidad/herramientas/loki/#grafana-dashboards","text":"Son responsables de crear las visualizaciones y realizar consultas.","title":"Grafana Dashboards"},{"location":"observabilidad/herramientas/loki/#por-que-usar-loki","text":"La raz\u00f3n principal para usar Loki en lugar de otras herramientas de agregaci\u00f3n de registros es que Loki optimiza el almacenamiento necesario. Lo hace siguiendo el mismo patr\u00f3n que Prometheus, que indexa las etiquetas y crea fragmentos del propio registro, utilizando menos espacio que simplemente almacenando los registros sin procesar.","title":"\u00bfPor qu\u00e9 usar Loki?"},{"location":"observabilidad/herramientas/loki/#referencias","text":"Sitio oficial de Loki Insertar logs en Loki Agregar fuente de Loki a Grafana Mejores pr\u00e1cticas de Loki","title":"Referencias"},{"location":"observabilidad/pilares/dashboard/","text":"Dashboard Visi\u00f3n general El dashboard es una forma de visualizaci\u00f3n que proporciona de un vistazo los indicadores clave de rendimiento (KPI) del sistema observable. Conectan m\u00faltiples fuentes de datos. El dashboard se puede utilizar para: Mostrar tendencias Identificar patrones Medir la eficiencia f\u00e1cilmente Identificar datos at\u00edpicos y correlaciones Ver el estado de salud o el rendimiento del sistema Dar una perspectiva del KPI que es importante para un negocio/proceso Mejores pr\u00e1cticas Las preguntas comunes que debe hacerse al crear un dashboard ser\u00edan: \u00bfD\u00f3nde pas\u00f3 la mayor parte de su tiempo el usuario? \u00bfQu\u00e9 busca el usuario? \u00bfC\u00f3mo puedo ayudar mejor a mi equipo con alertas y soluci\u00f3n de problemas? \u00bfEstuvo el sistema en buen estado durante el \u00faltimo d\u00eda/semana/mes/trimestre? Estos son los principios que se deben tener en cuenta al crear dashboards: Separe un dashboard en varias secciones para simplificar. Agregar salto de p\u00e1gina o ancla (#secci\u00f3n) tambi\u00e9n es una ventaja, si corresponde. Agregue gr\u00e1ficos m\u00faltiples y simples. Cree gr\u00e1ficos simples, tenga m\u00e1s de ellos en lugar de un gr\u00e1fico complicado todo en uno. Identifique objetivos o medici\u00f3n de KPI. Haga preguntas que puedan ayudar a alcanzar el objetivo o KPI definido. Valide las preguntas. Esto se hace a menudo con los stakeholders, patrocinadores, l\u00edderes o gerentes de proyecto. Observe el dashboard que se construye. \u00bfReflejan los datos lo que las partes interesadas se propusieron responder? Recuerde siempre que este proceso lleva tiempo. Construir un dashboard es f\u00e1cil, construir un dashboard observable para mostrar un patr\u00f3n es dif\u00edcil. Herramientas recomendadas Azure Monitor Workbooks : Azure Workbooks, compatible con Markdown, est\u00e1 estrechamente integrado con los servicios de Azure, lo que lo hace altamente personalizable sin necesidad de herramientas adicionales. Creaci\u00f3n y uso compartido de paneles de datos de Log Analytics : dashboard que se puede crear mediante consultas de log en los datos de Log Analytics. Creaci\u00f3n de paneles de indicadores clave de rendimiento (KPI) personalizados con Azure Application Insights : los dashboard tambi\u00e9n se pueden crear con Application Insights. Creaci\u00f3n de un panel de Power BI desde un informe : Power Bi es una de las herramientas m\u00e1s sencillas para crear dashboards a partir de fuentes de datos y reportes. Grafana : Grafana es una popular herramienta de c\u00f3digo abierto para dashboard y visualizaci\u00f3n. Azure Monitor como origen de datos de Grafana : proporciona una integraci\u00f3n paso a paso de Azure Monitor con Grafana. Breve comparaci\u00f3n de varias herramientas . Ejemplos y recetas de dashboard Azure Workbooks An\u00e1lisis de rendimiento: una medida de c\u00f3mo funciona el sistema. Plantilla disponible en la galer\u00eda. An\u00e1lisis de fallas: un informe sobre fallas del sistema con detalles. Plantilla disponible en la galer\u00eda. \u00cdndice de rendimiento de la aplicaci\u00f3n (Appdex): esta es una forma de medir la satisfacci\u00f3n del usuario. Clasifica el rendimiento en tres zonas en funci\u00f3n de un umbral de rendimiento de referencia T. La plantilla para Appdex tambi\u00e9n est\u00e1 disponible en la galer\u00eda de Azure Workbooks. Application Insights An\u00e1lisis de retenci\u00f3n de usuarios para aplicaciones web con Application Insights . An\u00e1lisis de patrones de navegaci\u00f3n del usuario mediante flujos de usuarios de Application Insights . Use Azure Application Insights para entender la forma en que los clientes utilizan su aplicaci\u00f3n . Grafana con Azure Monitor como fuente de datos Azure Kubernetes Service - M\u00e9tricas de cl\u00faster y espacio de nombres : M\u00e9tricas de Container Insights para cl\u00fasteres de Kubernetes. Utilizaci\u00f3n del cl\u00faster, utilizaci\u00f3n del espacio de nombres, CPU y memoria del nodo, uso del disco del nodo y E/S del disco, red del nodo y m\u00e9tricas de operaci\u00f3n de kubelet docker. Azure Kubernetes Service - Nivel de contenedor y m\u00e9tricas de pod : contiene el nivel de contenedor y las m\u00e9tricas de pod, como CPU y memoria, que faltan en el dashboard anterior. Resumen Para crear un dashboard observable, el objetivo es hacer uso de las m\u00e9tricas, los logs y las trazas recopiladss para dar una idea de c\u00f3mo funciona el sistema, c\u00f3mo se comporta el usuario e identificar patrones. Hay muchas herramientas y plantillas. Cualquiera que sea la elecci\u00f3n, un buen tablero siempre es un tablero que puede ayudarlo a responder preguntas sobre el sistema y el usuario, realizar un seguimiento del KPI y el objetivo y, al mismo tiempo, permitir que se tomen decisiones comerciales informadas.","title":"Dashboard"},{"location":"observabilidad/pilares/dashboard/#dashboard","text":"","title":"Dashboard"},{"location":"observabilidad/pilares/dashboard/#vision-general","text":"El dashboard es una forma de visualizaci\u00f3n que proporciona de un vistazo los indicadores clave de rendimiento (KPI) del sistema observable. Conectan m\u00faltiples fuentes de datos. El dashboard se puede utilizar para: Mostrar tendencias Identificar patrones Medir la eficiencia f\u00e1cilmente Identificar datos at\u00edpicos y correlaciones Ver el estado de salud o el rendimiento del sistema Dar una perspectiva del KPI que es importante para un negocio/proceso","title":"Visi\u00f3n general"},{"location":"observabilidad/pilares/dashboard/#mejores-practicas","text":"Las preguntas comunes que debe hacerse al crear un dashboard ser\u00edan: \u00bfD\u00f3nde pas\u00f3 la mayor parte de su tiempo el usuario? \u00bfQu\u00e9 busca el usuario? \u00bfC\u00f3mo puedo ayudar mejor a mi equipo con alertas y soluci\u00f3n de problemas? \u00bfEstuvo el sistema en buen estado durante el \u00faltimo d\u00eda/semana/mes/trimestre? Estos son los principios que se deben tener en cuenta al crear dashboards: Separe un dashboard en varias secciones para simplificar. Agregar salto de p\u00e1gina o ancla (#secci\u00f3n) tambi\u00e9n es una ventaja, si corresponde. Agregue gr\u00e1ficos m\u00faltiples y simples. Cree gr\u00e1ficos simples, tenga m\u00e1s de ellos en lugar de un gr\u00e1fico complicado todo en uno. Identifique objetivos o medici\u00f3n de KPI. Haga preguntas que puedan ayudar a alcanzar el objetivo o KPI definido. Valide las preguntas. Esto se hace a menudo con los stakeholders, patrocinadores, l\u00edderes o gerentes de proyecto. Observe el dashboard que se construye. \u00bfReflejan los datos lo que las partes interesadas se propusieron responder? Recuerde siempre que este proceso lleva tiempo. Construir un dashboard es f\u00e1cil, construir un dashboard observable para mostrar un patr\u00f3n es dif\u00edcil.","title":"Mejores pr\u00e1cticas"},{"location":"observabilidad/pilares/dashboard/#herramientas-recomendadas","text":"Azure Monitor Workbooks : Azure Workbooks, compatible con Markdown, est\u00e1 estrechamente integrado con los servicios de Azure, lo que lo hace altamente personalizable sin necesidad de herramientas adicionales. Creaci\u00f3n y uso compartido de paneles de datos de Log Analytics : dashboard que se puede crear mediante consultas de log en los datos de Log Analytics. Creaci\u00f3n de paneles de indicadores clave de rendimiento (KPI) personalizados con Azure Application Insights : los dashboard tambi\u00e9n se pueden crear con Application Insights. Creaci\u00f3n de un panel de Power BI desde un informe : Power Bi es una de las herramientas m\u00e1s sencillas para crear dashboards a partir de fuentes de datos y reportes. Grafana : Grafana es una popular herramienta de c\u00f3digo abierto para dashboard y visualizaci\u00f3n. Azure Monitor como origen de datos de Grafana : proporciona una integraci\u00f3n paso a paso de Azure Monitor con Grafana. Breve comparaci\u00f3n de varias herramientas .","title":"Herramientas recomendadas"},{"location":"observabilidad/pilares/dashboard/#ejemplos-y-recetas-de-dashboard","text":"","title":"Ejemplos y recetas de dashboard"},{"location":"observabilidad/pilares/dashboard/#azure-workbooks","text":"An\u00e1lisis de rendimiento: una medida de c\u00f3mo funciona el sistema. Plantilla disponible en la galer\u00eda. An\u00e1lisis de fallas: un informe sobre fallas del sistema con detalles. Plantilla disponible en la galer\u00eda. \u00cdndice de rendimiento de la aplicaci\u00f3n (Appdex): esta es una forma de medir la satisfacci\u00f3n del usuario. Clasifica el rendimiento en tres zonas en funci\u00f3n de un umbral de rendimiento de referencia T. La plantilla para Appdex tambi\u00e9n est\u00e1 disponible en la galer\u00eda de Azure Workbooks.","title":"Azure Workbooks"},{"location":"observabilidad/pilares/dashboard/#application-insights","text":"An\u00e1lisis de retenci\u00f3n de usuarios para aplicaciones web con Application Insights . An\u00e1lisis de patrones de navegaci\u00f3n del usuario mediante flujos de usuarios de Application Insights . Use Azure Application Insights para entender la forma en que los clientes utilizan su aplicaci\u00f3n .","title":"Application Insights"},{"location":"observabilidad/pilares/dashboard/#grafana-con-azure-monitor-como-fuente-de-datos","text":"Azure Kubernetes Service - M\u00e9tricas de cl\u00faster y espacio de nombres : M\u00e9tricas de Container Insights para cl\u00fasteres de Kubernetes. Utilizaci\u00f3n del cl\u00faster, utilizaci\u00f3n del espacio de nombres, CPU y memoria del nodo, uso del disco del nodo y E/S del disco, red del nodo y m\u00e9tricas de operaci\u00f3n de kubelet docker. Azure Kubernetes Service - Nivel de contenedor y m\u00e9tricas de pod : contiene el nivel de contenedor y las m\u00e9tricas de pod, como CPU y memoria, que faltan en el dashboard anterior.","title":"Grafana con Azure Monitor como fuente de datos"},{"location":"observabilidad/pilares/dashboard/#resumen","text":"Para crear un dashboard observable, el objetivo es hacer uso de las m\u00e9tricas, los logs y las trazas recopiladss para dar una idea de c\u00f3mo funciona el sistema, c\u00f3mo se comporta el usuario e identificar patrones. Hay muchas herramientas y plantillas. Cualquiera que sea la elecci\u00f3n, un buen tablero siempre es un tablero que puede ayudarlo a responder preguntas sobre el sistema y el usuario, realizar un seguimiento del KPI y el objetivo y, al mismo tiempo, permitir que se tomen decisiones comerciales informadas.","title":"Resumen"},{"location":"observabilidad/pilares/logging/","text":"Logging Visi\u00f3n general Los logs son eventos discretos con el objetivo de ayudar a los ingenieros a identificar las \u00e1reas problem\u00e1ticas durante las fallas. M\u00e9todos de recolecci\u00f3n Dos de las t\u00e9cnicas est\u00e1ndar son un enfoque de escritura directa o basado en agentes. Los eventos de log escritos directamente se manejan en el proceso del componente en particular, generalmente utilizando una biblioteca provista. Azure Monitor tiene capacidades de env\u00edo directo, pero no se recomienda para un uso serio o de producci\u00f3n. Este enfoque tiene algunas ventajas: No hay un proceso externo para configurar o monitorear Sin administraci\u00f3n de archivos de log para evitar problemas de falta de espacio en disco. Desventajas potenciales de este enfoque: Uso de memoria potencialmente mayor si la biblioteca en particular est\u00e1 usando un b\u00fafer respaldado por memoria. En el caso de una interrupci\u00f3n prolongada del servicio, los datos de log pueden perderse o truncarse debido a las limitaciones del b\u00fafer. El logeo de procesos de m\u00faltiples componentes administrar\u00e1 y emitir\u00e1 logs individualmente, lo que puede ser m\u00e1s complejo de administrar. La recopilaci\u00f3n de logs basada en agentes se basa en un proceso externo que se ejecuta en la m\u00e1quina host, y el componente en particular emite datos de log est\u00e1ndar o archivo. Escribir datos de log en stdout es la pr\u00e1ctica preferida cuando se ejecutan aplicaciones dentro de un entorno de contenedor como Kubernetes. El runtime del contenedor redirige la salida a los archivos, que luego puede procesar un agente. Azure Monitor , Grafana Loki , Logstash y Fluent Bit son ejemplos de agentes de env\u00edo de logs. Hay varias ventajas cuando se utiliza un agente para recopilar y enviar archivos de log: Configuraci\u00f3n centralizada. Recopilaci\u00f3n de m\u00faltiples fuentes de datos con un solo proceso. Preprocesamiento local y filtrado de datos de log antes de enviarlos a un servicio central. Utilizar el espacio en disco como un b\u00fafer de datos durante una interrupci\u00f3n del servicio. Este enfoque no est\u00e1 exento de desventajas: Se requieren recursos exclusivos de CPU y memoria para el procesamiento de datos de log. Espacio de disco persistente para almacenamiento en b\u00fafer. Mejores pr\u00e1cticas Preste atenci\u00f3n a los niveles de log. Registrar demasiado aumentar\u00e1 los costos y disminuir\u00e1 el rendimiento de la aplicaci\u00f3n. Aseg\u00farese de que la configuraci\u00f3n de log se pueda modificar sin cambios de c\u00f3digo. Si est\u00e1 disponible, aproveche los niveles de log por categor\u00eda que permiten una configuraci\u00f3n de log granular. Verifique los niveles de log antes de iniciar sesi\u00f3n, evitando as\u00ed asignaciones y costos de manipulaci\u00f3n de cadenas. Aseg\u00farese de que las versiones de servicio est\u00e9n incluidas en los logs para poder identificar versiones problem\u00e1ticas. Loguee una excepci\u00f3n generada solo una vez. En sus controladores, solo detecte las excepciones esperadas que pueda manejar correctamente. Ajuste los niveles de log en producci\u00f3n. Durante una nueva versi\u00f3n, la verbosidad se puede aumentar para facilitar la identificaci\u00f3n de errores. Si utiliza muestreo, implem\u00e9ntelo en el nivel de servicio en lugar de definirlo en el sistema de log. De esta manera tenemos control sobre lo que se registra. Incluya solo fallas de controles de estado y solicitudes no del negocio. Aseg\u00farese de que un mal funcionamiento del sistema no provoque el almacenamiento de logs repetitivos. No reinvente la rueda, utilice las herramientas existentes para recopilar y analizar los datos. Aseg\u00farese de que se sigan las pol\u00edticas y restricciones de informaci\u00f3n de identificaci\u00f3n personal. Aseg\u00farese de que se capturen y registren los errores y las excepciones en los servicios dependientes. Si hay suficientes datos de log, \u00bfes necesario instrumentar m\u00e9tricas? Logs vs M\u00e9tricas vs Trazas cubre una gu\u00eda de alto nivel sobre cu\u00e1ndo utilizar datos m\u00e9tricos y cu\u00e1ndo usar datos de log. Ambos tienen un papel valioso que desempe\u00f1ar en la creaci\u00f3n de sistemas observables. \u00bfTiene problemas para identificar qu\u00e9 loguear? Al inicio de la aplicaci\u00f3n: Errores irrecuperables desde el inicio. Advertencias si la aplicaci\u00f3n a\u00fan se puede ejecutar, pero no como se esperaba. Informaci\u00f3n sobre el estado del servicio al inicio (n\u00famero de compilaci\u00f3n, configuraciones cargadas, etc.) Por solicitud entrante: Informaci\u00f3n b\u00e1sica para cada solicitud entrante: la URL, cualquier dimensi\u00f3n de usuario/inquilino/solicitud, c\u00f3digo de respuesta devuelto, latencia, tama\u00f1o de carga \u00fatil, recuentos de logs, etc. Advertencia por cualquier excepci\u00f3n inesperada, detectada solo en el controlador/interceptor superior y logeada con o junto a la informaci\u00f3n de solicitud, con seguimiento de pila. Por solicitud saliente: Informaci\u00f3n b\u00e1sica para cada solicitud saliente: la URL, cualquier dimensi\u00f3n de usuario/inquilino/solicitud, c\u00f3digo de respuesta devuelto, latencia, tama\u00f1os de carga \u00fatil, recuentos de logs devueltos, etc. Herramientas recomendadas Azure Monitor : incluye m\u00e9tricas del sistema, an\u00e1lisis de logs y m\u00e1s. Grafana Loki : una plataforma de agregaci\u00f3n de logs de c\u00f3digo abierto, basada en los aprendizajes de la comunidad de Prometheus para la recopilaci\u00f3n y el almacenamiento altamente eficientes de datos de log a escala. The Elastic Stack : una pila tecnol\u00f3gica de an\u00e1lisis de logs de c\u00f3digo abierto que utiliza Logstash, Beats, Elastic Search y Kibana. Grafana : herramienta de visualizaci\u00f3n y dashboard de c\u00f3digo abierto. Admite or\u00edgenes de datos de log, m\u00e9tricas y seguimiento distribuido.","title":"Logging"},{"location":"observabilidad/pilares/logging/#logging","text":"","title":"Logging"},{"location":"observabilidad/pilares/logging/#vision-general","text":"Los logs son eventos discretos con el objetivo de ayudar a los ingenieros a identificar las \u00e1reas problem\u00e1ticas durante las fallas.","title":"Visi\u00f3n general"},{"location":"observabilidad/pilares/logging/#metodos-de-recoleccion","text":"Dos de las t\u00e9cnicas est\u00e1ndar son un enfoque de escritura directa o basado en agentes. Los eventos de log escritos directamente se manejan en el proceso del componente en particular, generalmente utilizando una biblioteca provista. Azure Monitor tiene capacidades de env\u00edo directo, pero no se recomienda para un uso serio o de producci\u00f3n. Este enfoque tiene algunas ventajas: No hay un proceso externo para configurar o monitorear Sin administraci\u00f3n de archivos de log para evitar problemas de falta de espacio en disco. Desventajas potenciales de este enfoque: Uso de memoria potencialmente mayor si la biblioteca en particular est\u00e1 usando un b\u00fafer respaldado por memoria. En el caso de una interrupci\u00f3n prolongada del servicio, los datos de log pueden perderse o truncarse debido a las limitaciones del b\u00fafer. El logeo de procesos de m\u00faltiples componentes administrar\u00e1 y emitir\u00e1 logs individualmente, lo que puede ser m\u00e1s complejo de administrar. La recopilaci\u00f3n de logs basada en agentes se basa en un proceso externo que se ejecuta en la m\u00e1quina host, y el componente en particular emite datos de log est\u00e1ndar o archivo. Escribir datos de log en stdout es la pr\u00e1ctica preferida cuando se ejecutan aplicaciones dentro de un entorno de contenedor como Kubernetes. El runtime del contenedor redirige la salida a los archivos, que luego puede procesar un agente. Azure Monitor , Grafana Loki , Logstash y Fluent Bit son ejemplos de agentes de env\u00edo de logs. Hay varias ventajas cuando se utiliza un agente para recopilar y enviar archivos de log: Configuraci\u00f3n centralizada. Recopilaci\u00f3n de m\u00faltiples fuentes de datos con un solo proceso. Preprocesamiento local y filtrado de datos de log antes de enviarlos a un servicio central. Utilizar el espacio en disco como un b\u00fafer de datos durante una interrupci\u00f3n del servicio. Este enfoque no est\u00e1 exento de desventajas: Se requieren recursos exclusivos de CPU y memoria para el procesamiento de datos de log. Espacio de disco persistente para almacenamiento en b\u00fafer.","title":"M\u00e9todos de recolecci\u00f3n"},{"location":"observabilidad/pilares/logging/#mejores-practicas","text":"Preste atenci\u00f3n a los niveles de log. Registrar demasiado aumentar\u00e1 los costos y disminuir\u00e1 el rendimiento de la aplicaci\u00f3n. Aseg\u00farese de que la configuraci\u00f3n de log se pueda modificar sin cambios de c\u00f3digo. Si est\u00e1 disponible, aproveche los niveles de log por categor\u00eda que permiten una configuraci\u00f3n de log granular. Verifique los niveles de log antes de iniciar sesi\u00f3n, evitando as\u00ed asignaciones y costos de manipulaci\u00f3n de cadenas. Aseg\u00farese de que las versiones de servicio est\u00e9n incluidas en los logs para poder identificar versiones problem\u00e1ticas. Loguee una excepci\u00f3n generada solo una vez. En sus controladores, solo detecte las excepciones esperadas que pueda manejar correctamente. Ajuste los niveles de log en producci\u00f3n. Durante una nueva versi\u00f3n, la verbosidad se puede aumentar para facilitar la identificaci\u00f3n de errores. Si utiliza muestreo, implem\u00e9ntelo en el nivel de servicio en lugar de definirlo en el sistema de log. De esta manera tenemos control sobre lo que se registra. Incluya solo fallas de controles de estado y solicitudes no del negocio. Aseg\u00farese de que un mal funcionamiento del sistema no provoque el almacenamiento de logs repetitivos. No reinvente la rueda, utilice las herramientas existentes para recopilar y analizar los datos. Aseg\u00farese de que se sigan las pol\u00edticas y restricciones de informaci\u00f3n de identificaci\u00f3n personal. Aseg\u00farese de que se capturen y registren los errores y las excepciones en los servicios dependientes.","title":"Mejores pr\u00e1cticas"},{"location":"observabilidad/pilares/logging/#si-hay-suficientes-datos-de-log-es-necesario-instrumentar-metricas","text":"Logs vs M\u00e9tricas vs Trazas cubre una gu\u00eda de alto nivel sobre cu\u00e1ndo utilizar datos m\u00e9tricos y cu\u00e1ndo usar datos de log. Ambos tienen un papel valioso que desempe\u00f1ar en la creaci\u00f3n de sistemas observables.","title":"Si hay suficientes datos de log, \u00bfes necesario instrumentar m\u00e9tricas?"},{"location":"observabilidad/pilares/logging/#tiene-problemas-para-identificar-que-loguear","text":"Al inicio de la aplicaci\u00f3n: Errores irrecuperables desde el inicio. Advertencias si la aplicaci\u00f3n a\u00fan se puede ejecutar, pero no como se esperaba. Informaci\u00f3n sobre el estado del servicio al inicio (n\u00famero de compilaci\u00f3n, configuraciones cargadas, etc.) Por solicitud entrante: Informaci\u00f3n b\u00e1sica para cada solicitud entrante: la URL, cualquier dimensi\u00f3n de usuario/inquilino/solicitud, c\u00f3digo de respuesta devuelto, latencia, tama\u00f1o de carga \u00fatil, recuentos de logs, etc. Advertencia por cualquier excepci\u00f3n inesperada, detectada solo en el controlador/interceptor superior y logeada con o junto a la informaci\u00f3n de solicitud, con seguimiento de pila. Por solicitud saliente: Informaci\u00f3n b\u00e1sica para cada solicitud saliente: la URL, cualquier dimensi\u00f3n de usuario/inquilino/solicitud, c\u00f3digo de respuesta devuelto, latencia, tama\u00f1os de carga \u00fatil, recuentos de logs devueltos, etc.","title":"\u00bfTiene problemas para identificar qu\u00e9 loguear?"},{"location":"observabilidad/pilares/logging/#herramientas-recomendadas","text":"Azure Monitor : incluye m\u00e9tricas del sistema, an\u00e1lisis de logs y m\u00e1s. Grafana Loki : una plataforma de agregaci\u00f3n de logs de c\u00f3digo abierto, basada en los aprendizajes de la comunidad de Prometheus para la recopilaci\u00f3n y el almacenamiento altamente eficientes de datos de log a escala. The Elastic Stack : una pila tecnol\u00f3gica de an\u00e1lisis de logs de c\u00f3digo abierto que utiliza Logstash, Beats, Elastic Search y Kibana. Grafana : herramienta de visualizaci\u00f3n y dashboard de c\u00f3digo abierto. Admite or\u00edgenes de datos de log, m\u00e9tricas y seguimiento distribuido.","title":"Herramientas recomendadas"},{"location":"observabilidad/pilares/metrics/","text":"M\u00e9tricas Visi\u00f3n general Las m\u00e9tricas proporcionan un flujo de datos casi en tiempo real, informando a los operadores y partes interesadas sobre las funciones que est\u00e1 realizando el sistema, as\u00ed como sobre su estado. A diferencia del logeo y el traceo, los datos m\u00e9tricos tienden a ser m\u00e1s eficientes para transmitir y almacenar. M\u00e9todos de recolecci\u00f3n Los enfoques de recopilaci\u00f3n de m\u00e9tricas se dividen en dos categor\u00edas: m\u00e9tricas push y m\u00e9tricas pull. M\u00e9tricas push significa que el componente de origen env\u00eda los datos a un servicio o agente remoto. Azure Monitor y statsd son ejemplos de m\u00e9tricas push. Algunos puntos fuertes de las m\u00e9tricas push incluyen: Solo requiere la salida de red al destino remoto. El componente de origen controla la frecuencia de medici\u00f3n. Configuraci\u00f3n simplificada ya que el componente solo necesita saber el destino de donde enviar los datos. Algunas desventajas con este enfoque: A escala, es mucho m\u00e1s dif\u00edcil controlar las velocidades de transmisi\u00f3n de datos, lo que puede provocar la limitaci\u00f3n del servicio o p\u00e9rdida de los valores. Es dif\u00edcil determinar si cada componente est\u00e1 en buen estado y enviando datos. En el caso de las m\u00e9tricas pull, cada componente de origen publica un endpoint para que el agente de m\u00e9tricas se conecte y recopile las mediciones. Prometheus y su ecosistema de herramientas son un ejemplo de m\u00e9tricas de estilo pull. Los beneficios experimentados al usar una configuraci\u00f3n de m\u00e9tricas pull pueden implicar: Configuraci\u00f3n \u00fanica para determinar qu\u00e9 se mide y la frecuencia de medici\u00f3n para el entorno local. Cada objetivo de medici\u00f3n tiene una metam\u00e9trica relacionada con si la recopilaci\u00f3n es exitosa o no, que se puede usar como un control de salud general. Compatibilidad con el enrutamiento, el filtrado y el procesamiento de m\u00e9tricas antes de enviarlas a un almac\u00e9n de m\u00e9tricas central global. Los elementos de preocupaci\u00f3n para algunos pueden incluir: La configuraci\u00f3n y gesti\u00f3n de fuentes de datos puede dar lugar a una configuraci\u00f3n compleja. La configuraci\u00f3n de la red puede agregar m\u00e1s complejidad si es necesario administrar los firewalls y otras ACL para permitir la conectividad. Mejores pr\u00e1cticas \u00bfCu\u00e1ndo debo usar m\u00e9tricas en lugar de logs? Logs vs M\u00e9tricas vs Trazas cubre una gu\u00eda de alto nivel sobre cu\u00e1ndo utilizar datos m\u00e9tricos y cu\u00e1ndo usar datos de log. Ambos tienen un papel valioso que desempe\u00f1ar en la creaci\u00f3n de sistemas observables. \u00bfQu\u00e9 se debe medir? Mediciones cr\u00edticas del sistema que se relacionan con el estado de la aplicaci\u00f3n/m\u00e1quina, suelen ser excelentes candidatos para alertas. Trabaje con sus colegas de ingenier\u00eda y desarrollo para identificar las m\u00e9tricas, pero pueden incluir: Utilizaci\u00f3n de CPU y memoria. Tasa de request. Longitud de la cola. Recuento de excepciones inesperado. M\u00e9tricas de servicio dependientes. Medidas importantes relacionadas con el negocio, que impulsan la presentaci\u00f3n de informes a las partes interesadas. Consulte con las diversas partes interesadas del componente, pero algunos ejemplos pueden incluir: Trabajos realizados. Duraci\u00f3n de la sesi\u00f3n de usuario. Visitas al sitio. Etiquetas de dimensi\u00f3n Los sistemas m\u00e9tricos modernos suelen definir una \u00fanica m\u00e9trica de serie temporal como la combinaci\u00f3n del nombre de la m\u00e9trica y su diccionario de etiquetas de dimensi\u00f3n. Las etiquetas son una forma excelente de distinguir una instancia de una m\u00e9trica de otra y, al mismo tiempo, permitir que se realicen agregaciones y otras operaciones en el conjunto para el an\u00e1lisis. Algunas etiquetas comunes utilizadas en las m\u00e9tricas pueden incluir: Nombre del contenedor Nombre de host Versi\u00f3n de c\u00f3digo Nombre del cl\u00faster de Kubernetes Regi\u00f3n de Azure Herramientas recomendadas Azure Monitor : servicio que incluye m\u00e9tricas del sistema, an\u00e1lisis de log y m\u00e1s. Prometheus : una aplicaci\u00f3n de monitoreo y alerta en tiempo real. Su formato de exposici\u00f3n para exponer series temporales es la base del formato est\u00e1ndar de OpenMetrics. Thanos : configuraci\u00f3n de Prometheus de c\u00f3digo abierto y alta disponibilidad con capacidades de almacenamiento a largo plazo. Cortex : Prometheus a largo plazo, escalable horizontalmente, de alta disponibilidad y multiusuario. Grafana : herramienta de visualizaci\u00f3n y panel de control de c\u00f3digo abierto. Admite or\u00edgenes de datos de logs, m\u00e9tricas y trazas distribuidas.","title":"M\u00e9tricas"},{"location":"observabilidad/pilares/metrics/#metricas","text":"","title":"M\u00e9tricas"},{"location":"observabilidad/pilares/metrics/#vision-general","text":"Las m\u00e9tricas proporcionan un flujo de datos casi en tiempo real, informando a los operadores y partes interesadas sobre las funciones que est\u00e1 realizando el sistema, as\u00ed como sobre su estado. A diferencia del logeo y el traceo, los datos m\u00e9tricos tienden a ser m\u00e1s eficientes para transmitir y almacenar.","title":"Visi\u00f3n general"},{"location":"observabilidad/pilares/metrics/#metodos-de-recoleccion","text":"Los enfoques de recopilaci\u00f3n de m\u00e9tricas se dividen en dos categor\u00edas: m\u00e9tricas push y m\u00e9tricas pull. M\u00e9tricas push significa que el componente de origen env\u00eda los datos a un servicio o agente remoto. Azure Monitor y statsd son ejemplos de m\u00e9tricas push. Algunos puntos fuertes de las m\u00e9tricas push incluyen: Solo requiere la salida de red al destino remoto. El componente de origen controla la frecuencia de medici\u00f3n. Configuraci\u00f3n simplificada ya que el componente solo necesita saber el destino de donde enviar los datos. Algunas desventajas con este enfoque: A escala, es mucho m\u00e1s dif\u00edcil controlar las velocidades de transmisi\u00f3n de datos, lo que puede provocar la limitaci\u00f3n del servicio o p\u00e9rdida de los valores. Es dif\u00edcil determinar si cada componente est\u00e1 en buen estado y enviando datos. En el caso de las m\u00e9tricas pull, cada componente de origen publica un endpoint para que el agente de m\u00e9tricas se conecte y recopile las mediciones. Prometheus y su ecosistema de herramientas son un ejemplo de m\u00e9tricas de estilo pull. Los beneficios experimentados al usar una configuraci\u00f3n de m\u00e9tricas pull pueden implicar: Configuraci\u00f3n \u00fanica para determinar qu\u00e9 se mide y la frecuencia de medici\u00f3n para el entorno local. Cada objetivo de medici\u00f3n tiene una metam\u00e9trica relacionada con si la recopilaci\u00f3n es exitosa o no, que se puede usar como un control de salud general. Compatibilidad con el enrutamiento, el filtrado y el procesamiento de m\u00e9tricas antes de enviarlas a un almac\u00e9n de m\u00e9tricas central global. Los elementos de preocupaci\u00f3n para algunos pueden incluir: La configuraci\u00f3n y gesti\u00f3n de fuentes de datos puede dar lugar a una configuraci\u00f3n compleja. La configuraci\u00f3n de la red puede agregar m\u00e1s complejidad si es necesario administrar los firewalls y otras ACL para permitir la conectividad.","title":"M\u00e9todos de recolecci\u00f3n"},{"location":"observabilidad/pilares/metrics/#mejores-practicas","text":"","title":"Mejores pr\u00e1cticas"},{"location":"observabilidad/pilares/metrics/#cuando-debo-usar-metricas-en-lugar-de-logs","text":"Logs vs M\u00e9tricas vs Trazas cubre una gu\u00eda de alto nivel sobre cu\u00e1ndo utilizar datos m\u00e9tricos y cu\u00e1ndo usar datos de log. Ambos tienen un papel valioso que desempe\u00f1ar en la creaci\u00f3n de sistemas observables.","title":"\u00bfCu\u00e1ndo debo usar m\u00e9tricas en lugar de logs?"},{"location":"observabilidad/pilares/metrics/#que-se-debe-medir","text":"Mediciones cr\u00edticas del sistema que se relacionan con el estado de la aplicaci\u00f3n/m\u00e1quina, suelen ser excelentes candidatos para alertas. Trabaje con sus colegas de ingenier\u00eda y desarrollo para identificar las m\u00e9tricas, pero pueden incluir: Utilizaci\u00f3n de CPU y memoria. Tasa de request. Longitud de la cola. Recuento de excepciones inesperado. M\u00e9tricas de servicio dependientes. Medidas importantes relacionadas con el negocio, que impulsan la presentaci\u00f3n de informes a las partes interesadas. Consulte con las diversas partes interesadas del componente, pero algunos ejemplos pueden incluir: Trabajos realizados. Duraci\u00f3n de la sesi\u00f3n de usuario. Visitas al sitio.","title":"\u00bfQu\u00e9 se debe medir?"},{"location":"observabilidad/pilares/metrics/#etiquetas-de-dimension","text":"Los sistemas m\u00e9tricos modernos suelen definir una \u00fanica m\u00e9trica de serie temporal como la combinaci\u00f3n del nombre de la m\u00e9trica y su diccionario de etiquetas de dimensi\u00f3n. Las etiquetas son una forma excelente de distinguir una instancia de una m\u00e9trica de otra y, al mismo tiempo, permitir que se realicen agregaciones y otras operaciones en el conjunto para el an\u00e1lisis. Algunas etiquetas comunes utilizadas en las m\u00e9tricas pueden incluir: Nombre del contenedor Nombre de host Versi\u00f3n de c\u00f3digo Nombre del cl\u00faster de Kubernetes Regi\u00f3n de Azure","title":"Etiquetas de dimensi\u00f3n"},{"location":"observabilidad/pilares/metrics/#herramientas-recomendadas","text":"Azure Monitor : servicio que incluye m\u00e9tricas del sistema, an\u00e1lisis de log y m\u00e1s. Prometheus : una aplicaci\u00f3n de monitoreo y alerta en tiempo real. Su formato de exposici\u00f3n para exponer series temporales es la base del formato est\u00e1ndar de OpenMetrics. Thanos : configuraci\u00f3n de Prometheus de c\u00f3digo abierto y alta disponibilidad con capacidades de almacenamiento a largo plazo. Cortex : Prometheus a largo plazo, escalable horizontalmente, de alta disponibilidad y multiusuario. Grafana : herramienta de visualizaci\u00f3n y panel de control de c\u00f3digo abierto. Admite or\u00edgenes de datos de logs, m\u00e9tricas y trazas distribuidas.","title":"Herramientas recomendadas"},{"location":"observabilidad/pilares/tracing/","text":"Tracing Visi\u00f3n general Produce la informaci\u00f3n necesaria para observar series de operaciones correlacionadas en un sistema distribuido. Una vez recopilados, muestran la ruta, las medidas y las fallas en una transacci\u00f3n de extremo a extremo. Mejores pr\u00e1cticas Aseg\u00farese de que se rastreen al menos las transacciones clave. Incluya en cada traza la informaci\u00f3n necesaria para identificar las versiones de software. Esto es importante para correlacionar las implementaciones y la degradaci\u00f3n del sistema. Aseg\u00farese de que las dependencias est\u00e9n incluidas en la traza. Si los costos son una preocupaci\u00f3n, use el muestreo, evitando descartar errores, comportamientos inesperados e informaci\u00f3n cr\u00edtica. No reinvente la rueda, utilice las herramientas existentes para recopilar y analizar los datos. Aseg\u00farese de que se sigan las pol\u00edticas y restricciones de informaci\u00f3n de identificaci\u00f3n personal. Herramientas recomendadas Azure Monitor : incluye m\u00e9tricas del sistema, an\u00e1lisis de logs y m\u00e1s. Jaeger Tracing : traceo distribuido de extremo a extremo de c\u00f3digo abierto. Grafana : herramienta de visualizaci\u00f3n y dashboard de c\u00f3digo abierto. Admite or\u00edgenes de datos de log, m\u00e9tricas y seguimiento distribuido. Considere usar OpenTelemetry ya que implementa la propagaci\u00f3n de contexto multiplataforma de c\u00f3digo abierto para transacciones distribuidas de extremo a extremo sobre componentes heterog\u00e9neos listos para usar. Se encarga de crear y administrar autom\u00e1ticamente el objeto Trace Context entre una pila completa de microservicios implementados en diferentes pilas t\u00e9cnicas.","title":"Tracing"},{"location":"observabilidad/pilares/tracing/#tracing","text":"","title":"Tracing"},{"location":"observabilidad/pilares/tracing/#vision-general","text":"Produce la informaci\u00f3n necesaria para observar series de operaciones correlacionadas en un sistema distribuido. Una vez recopilados, muestran la ruta, las medidas y las fallas en una transacci\u00f3n de extremo a extremo.","title":"Visi\u00f3n general"},{"location":"observabilidad/pilares/tracing/#mejores-practicas","text":"Aseg\u00farese de que se rastreen al menos las transacciones clave. Incluya en cada traza la informaci\u00f3n necesaria para identificar las versiones de software. Esto es importante para correlacionar las implementaciones y la degradaci\u00f3n del sistema. Aseg\u00farese de que las dependencias est\u00e9n incluidas en la traza. Si los costos son una preocupaci\u00f3n, use el muestreo, evitando descartar errores, comportamientos inesperados e informaci\u00f3n cr\u00edtica. No reinvente la rueda, utilice las herramientas existentes para recopilar y analizar los datos. Aseg\u00farese de que se sigan las pol\u00edticas y restricciones de informaci\u00f3n de identificaci\u00f3n personal.","title":"Mejores pr\u00e1cticas"},{"location":"observabilidad/pilares/tracing/#herramientas-recomendadas","text":"Azure Monitor : incluye m\u00e9tricas del sistema, an\u00e1lisis de logs y m\u00e1s. Jaeger Tracing : traceo distribuido de extremo a extremo de c\u00f3digo abierto. Grafana : herramienta de visualizaci\u00f3n y dashboard de c\u00f3digo abierto. Admite or\u00edgenes de datos de log, m\u00e9tricas y seguimiento distribuido. Considere usar OpenTelemetry ya que implementa la propagaci\u00f3n de contexto multiplataforma de c\u00f3digo abierto para transacciones distribuidas de extremo a extremo sobre componentes heterog\u00e9neos listos para usar. Se encarga de crear y administrar autom\u00e1ticamente el objeto Trace Context entre una pila completa de microservicios implementados en diferentes pilas t\u00e9cnicas.","title":"Herramientas recomendadas"},{"location":"revisiones%20de%20codigo/","text":"Code Reviews Los desarrolladores deben realizar revisiones de c\u00f3digo entre pares en cada pull request. Metas La revisi\u00f3n del c\u00f3digo es una forma de tener una conversaci\u00f3n sobre el c\u00f3digo donde los participantes: Mejoran la calidad del c\u00f3digo identificando y eliminando los defectos antes de que puedan introducirse en el repositorio de c\u00f3digo. Aprenden y crecen haciendo que otros revisen el c\u00f3digo, nos exponemos a patrones de dise\u00f1o o lenguajes desconocidos, entre otros temas, e incluso rompemos algunos malos h\u00e1bitos. Comparten conocimiento entre los desarrolladores sobre el c\u00f3digo del proyecto. Recursos Herramientas de revisi\u00f3n de c\u00f3digo Documentaci\u00f3n de pr\u00e1cticas de ingenier\u00eda de Google: C\u00f3mo hacer una revisi\u00f3n de c\u00f3digo Los secretos mejor guardados de la revisi\u00f3n del c\u00f3digo de pares","title":"Code Reviews"},{"location":"revisiones%20de%20codigo/#code-reviews","text":"Los desarrolladores deben realizar revisiones de c\u00f3digo entre pares en cada pull request.","title":"Code Reviews"},{"location":"revisiones%20de%20codigo/#metas","text":"La revisi\u00f3n del c\u00f3digo es una forma de tener una conversaci\u00f3n sobre el c\u00f3digo donde los participantes: Mejoran la calidad del c\u00f3digo identificando y eliminando los defectos antes de que puedan introducirse en el repositorio de c\u00f3digo. Aprenden y crecen haciendo que otros revisen el c\u00f3digo, nos exponemos a patrones de dise\u00f1o o lenguajes desconocidos, entre otros temas, e incluso rompemos algunos malos h\u00e1bitos. Comparten conocimiento entre los desarrolladores sobre el c\u00f3digo del proyecto.","title":"Metas"},{"location":"revisiones%20de%20codigo/#recursos","text":"Herramientas de revisi\u00f3n de c\u00f3digo Documentaci\u00f3n de pr\u00e1cticas de ingenier\u00eda de Google: C\u00f3mo hacer una revisi\u00f3n de c\u00f3digo Los secretos mejor guardados de la revisi\u00f3n del c\u00f3digo de pares","title":"Recursos"},{"location":"revisiones%20de%20codigo/evidence-and-measures/","text":"Evidencia y Medidas Evidencia Muchos de los elementos de control de calidad del c\u00f3digo se pueden automatizar o aplicar mediante pol\u00edticas en los sistemas modernos de seguimiento de elementos de trabajo y control de versiones. La verificaci\u00f3n de las pol\u00edticas en la rama principal en Azure DevOps o GitHub, por ejemplo, puede ser evidencia suficiente de que un equipo de proyecto est\u00e1 realizando revisiones de c\u00f3digo. Las ramas principales en todos los repositorios tienen pol\u00edticas de rama. Configuraci\u00f3n de pol\u00edticas de ramas Todas las compilaciones producidas a partir de repositorios de proyectos incluyen linters apropiados, ejecutan pruebas unitarias. Cada elemento de trabajo de error debe incluir un enlace al PR que lo introdujo, una vez que se haya diagnosticado el error. Esto ayuda con el aprendizaje. Cada elemento de trabajo de error debe incluir una nota sobre c\u00f3mo el error podr\u00eda (o no) detectarse en una revisi\u00f3n de c\u00f3digo. El equipo del proyecto actualiza regularmente sus checklists de revisi\u00f3n de c\u00f3digo para reflejar los problemas comunes que han encontrado. Los l\u00edderes de desarrollo deben revisar una muestra de PRs y/o ser co-revisores con otros desarrolladores para ayudar a todos a mejorar sus habilidades como revisores de c\u00f3digo. Medidas El equipo puede recopilar m\u00e9tricas de revisiones de c\u00f3digo para medir su eficiencia. Algunas m\u00e9tricas \u00fatiles incluyen: Defect Removal Efficiency (DRE): una medida de la capacidad del equipo de desarrollo para eliminar defectos antes del release M\u00e9tricas de tiempo: Tiempo empleado en la preparaci\u00f3n de las sesiones de inspecci\u00f3n de c\u00f3digo Tiempo utilizado en las sesiones de revisi\u00f3n Lines of code (LOC) inspeccionadas por unidad de tiempo/reuni\u00f3n Es una soluci\u00f3n perfectamente razonable rastrear estas m\u00e9tricas manualmente, por ejemplo, en un Excel. Tambi\u00e9n es posible utilizar las funciones de las plataformas de gesti\u00f3n de proyectos; por ejemplo, AzDO habilita paneles para m\u00e9tricas, incluido el seguimiento de errores. Puede encontrar complementos listos para usar para varias plataformas o puede optar por implementar estas funciones usted mismo. Recursos Una gu\u00eda para las inspecciones de c\u00f3digo Eficacia de eliminaci\u00f3n de defectos","title":"Evidencia y Medidas"},{"location":"revisiones%20de%20codigo/evidence-and-measures/#evidencia-y-medidas","text":"","title":"Evidencia y Medidas"},{"location":"revisiones%20de%20codigo/evidence-and-measures/#evidencia","text":"Muchos de los elementos de control de calidad del c\u00f3digo se pueden automatizar o aplicar mediante pol\u00edticas en los sistemas modernos de seguimiento de elementos de trabajo y control de versiones. La verificaci\u00f3n de las pol\u00edticas en la rama principal en Azure DevOps o GitHub, por ejemplo, puede ser evidencia suficiente de que un equipo de proyecto est\u00e1 realizando revisiones de c\u00f3digo. Las ramas principales en todos los repositorios tienen pol\u00edticas de rama. Configuraci\u00f3n de pol\u00edticas de ramas Todas las compilaciones producidas a partir de repositorios de proyectos incluyen linters apropiados, ejecutan pruebas unitarias. Cada elemento de trabajo de error debe incluir un enlace al PR que lo introdujo, una vez que se haya diagnosticado el error. Esto ayuda con el aprendizaje. Cada elemento de trabajo de error debe incluir una nota sobre c\u00f3mo el error podr\u00eda (o no) detectarse en una revisi\u00f3n de c\u00f3digo. El equipo del proyecto actualiza regularmente sus checklists de revisi\u00f3n de c\u00f3digo para reflejar los problemas comunes que han encontrado. Los l\u00edderes de desarrollo deben revisar una muestra de PRs y/o ser co-revisores con otros desarrolladores para ayudar a todos a mejorar sus habilidades como revisores de c\u00f3digo.","title":"Evidencia"},{"location":"revisiones%20de%20codigo/evidence-and-measures/#medidas","text":"El equipo puede recopilar m\u00e9tricas de revisiones de c\u00f3digo para medir su eficiencia. Algunas m\u00e9tricas \u00fatiles incluyen: Defect Removal Efficiency (DRE): una medida de la capacidad del equipo de desarrollo para eliminar defectos antes del release M\u00e9tricas de tiempo: Tiempo empleado en la preparaci\u00f3n de las sesiones de inspecci\u00f3n de c\u00f3digo Tiempo utilizado en las sesiones de revisi\u00f3n Lines of code (LOC) inspeccionadas por unidad de tiempo/reuni\u00f3n Es una soluci\u00f3n perfectamente razonable rastrear estas m\u00e9tricas manualmente, por ejemplo, en un Excel. Tambi\u00e9n es posible utilizar las funciones de las plataformas de gesti\u00f3n de proyectos; por ejemplo, AzDO habilita paneles para m\u00e9tricas, incluido el seguimiento de errores. Puede encontrar complementos listos para usar para varias plataformas o puede optar por implementar estas funciones usted mismo.","title":"Medidas"},{"location":"revisiones%20de%20codigo/evidence-and-measures/#recursos","text":"Una gu\u00eda para las inspecciones de c\u00f3digo Eficacia de eliminaci\u00f3n de defectos","title":"Recursos"},{"location":"revisiones%20de%20codigo/tools/","text":"Herramientas de revisi\u00f3n de c\u00f3digo Personalizar Azure DevOps Tableros de tareas AzDO: personalizar tarjetas AzDO: agregar columnas en el tablero de tareas Pol\u00edticas del revisor Configuraci\u00f3n del grupo de revisores requerido en AzDO - Incluir autom\u00e1ticamente revisores de c\u00f3digo Configuraci\u00f3n de pol\u00edticas de ramas AzDO: Configurar directivas de ramas AzDO: Configuraci\u00f3n de pol\u00edticas de rama con la herramienta CLI: Crear un archivo de configuraci\u00f3n de pol\u00edticas Pol\u00edtica de recuento de aprobaciones GitHub: Configuraci\u00f3n de ramas protegidas Visual Studio Code GitHub: GitHub Pull Requests Admite el procesamiento de pull requests de GitHub dentro de VS Code. Abra el complemento desde la barra de actividad. Seleccione Asignado a m\u00ed. Seleccione un PR. En Descripci\u00f3n, puede elegir Verificar la rama y acceder al Modo de revisi\u00f3n y obtener una experiencia m\u00e1s integrada. Azure DevOps: Azure DevOps Pull Requests Admite el procesamiento de pull requests de Azure DevOps dentro de VS Code. Abra el complemento desde la barra de actividad. Seleccione Asignado a m\u00ed. Seleccione un PR. En Descripci\u00f3n, puede elegir Verificar la rama y acceder al Modo de revisi\u00f3n y obtener una experiencia m\u00e1s integrada.","title":"Herramientas de revisi\u00f3n de c\u00f3digo"},{"location":"revisiones%20de%20codigo/tools/#herramientas-de-revision-de-codigo","text":"","title":"Herramientas de revisi\u00f3n de c\u00f3digo"},{"location":"revisiones%20de%20codigo/tools/#personalizar-azure-devops","text":"","title":"Personalizar Azure DevOps"},{"location":"revisiones%20de%20codigo/tools/#tableros-de-tareas","text":"AzDO: personalizar tarjetas AzDO: agregar columnas en el tablero de tareas","title":"Tableros de tareas"},{"location":"revisiones%20de%20codigo/tools/#politicas-del-revisor","text":"Configuraci\u00f3n del grupo de revisores requerido en AzDO - Incluir autom\u00e1ticamente revisores de c\u00f3digo","title":"Pol\u00edticas del revisor"},{"location":"revisiones%20de%20codigo/tools/#configuracion-de-politicas-de-ramas","text":"AzDO: Configurar directivas de ramas AzDO: Configuraci\u00f3n de pol\u00edticas de rama con la herramienta CLI: Crear un archivo de configuraci\u00f3n de pol\u00edticas Pol\u00edtica de recuento de aprobaciones GitHub: Configuraci\u00f3n de ramas protegidas","title":"Configuraci\u00f3n de pol\u00edticas de ramas"},{"location":"revisiones%20de%20codigo/tools/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"revisiones%20de%20codigo/tools/#github-github-pull-requests","text":"Admite el procesamiento de pull requests de GitHub dentro de VS Code. Abra el complemento desde la barra de actividad. Seleccione Asignado a m\u00ed. Seleccione un PR. En Descripci\u00f3n, puede elegir Verificar la rama y acceder al Modo de revisi\u00f3n y obtener una experiencia m\u00e1s integrada.","title":"GitHub: GitHub Pull Requests"},{"location":"revisiones%20de%20codigo/tools/#azure-devops-azure-devops-pull-requests","text":"Admite el procesamiento de pull requests de Azure DevOps dentro de VS Code. Abra el complemento desde la barra de actividad. Seleccione Asignado a m\u00ed. Seleccione un PR. En Descripci\u00f3n, puede elegir Verificar la rama y acceder al Modo de revisi\u00f3n y obtener una experiencia m\u00e1s integrada.","title":"Azure DevOps: Azure DevOps Pull Requests"},{"location":"revisiones%20de%20codigo/recetas/","text":"Gu\u00eda espec\u00edfica del lenguaje Bash C# Markdown Python Terraform YAML (Azure Pipelines)","title":"Gu\u00eda espec\u00edfica del lenguaje"},{"location":"revisiones%20de%20codigo/recetas/#guia-especifica-del-lenguaje","text":"Bash C# Markdown Python Terraform YAML (Azure Pipelines)","title":"Gu\u00eda espec\u00edfica del lenguaje"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/","text":"YAML(Azure Pipelines) Code Reviews Gu\u00eda de estilo Referencia del esquema YAML . An\u00e1lisis de c\u00f3digo / Linting El linter YAML m\u00e1s popular es la extensi\u00f3n YAML . Esta extensi\u00f3n proporciona validaci\u00f3n YAML, esquematizaci\u00f3n de documentos, finalizaci\u00f3n autom\u00e1tica, compatibilidad con desplazamiento y funciones de formateador. VS Code Extensions Hay una extensi\u00f3n de Azure Pipelines para VS Code para agregar resaltado de sintaxis y autocompletado. Tambi\u00e9n lo ayuda a configurar la compilaci\u00f3n e implementaci\u00f3n continuas de Azure WebApps sin salir de VS Code. Descripci\u00f3n general de YAML en Azure Pipelines Cuando se activa la canalizaci\u00f3n, antes de ejecutar la canalizaci\u00f3n, hay algunas fases, como Tiempo de encolado, Tiempo de compilaci\u00f3n y Tiempo de ejecuci\u00f3n , donde las variables se interpretan por su sintaxis de expresi\u00f3n de tiempo de ejecuci\u00f3n . Cuando se activa la canalizaci\u00f3n, todos los archivos YAML anidados se expanden para ejecutarse en Azure Pipelines. Esta lista de verificaci\u00f3n contiene algunos consejos y trucos para revisar todos los archivos YAML anidados. Estos documentos pueden ser \u00fatiles al revisar archivos YAML: Documentaci\u00f3n YAML de Azure Pipelines Secuencia de ejecuci\u00f3n de canalizaci\u00f3n Conceptos clave para los nuevos Azure Pipelines Code Review Checklist Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de Azure Pipelines YAML: Estructura del pipeline Los pasos se entienden bien y los componentes son f\u00e1cilmente identificables. Aseg\u00farese de que haya una descripci\u00f3n adecuada displayName: para cada paso de la canalizaci\u00f3n. Los pasos o etapas de la canalizaci\u00f3n se comprueban en Azure Pipelines para comprender mejor los componentes. En caso de que tenga archivos YAML anidados complejos, la canalizaci\u00f3n en Azure Pipelines se edita para encontrar el archivo ra\u00edz desencadenante. Se visitan todas las referencias del archivo de plantilla para garantizar que un peque\u00f1o cambio no provoque cambios importantes; cambiar un archivo puede afectar a varias canalizaciones Los scripts en l\u00ednea largos en el archivo YAML se mueven a archivos de script Estructura YAML Los componentes reutilizables se dividen en plantillas YAML separadas. Las variables se separan por entorno almacenadas en plantillas o grupos de variables. Se tienen en cuenta los cambios de valor de las variables en el tiempo de encolado, el tiempo de compilaci\u00f3n y el tiempo de ejecuci\u00f3n. Se consideran los valores de sintaxis de variables utilizados con la sintaxis de macro, la sintaxis de expresi\u00f3n de plantilla y la sintaxis de expresi\u00f3n de tiempo de ejecuci\u00f3n. Las variables pueden cambiar durante la canalizaci\u00f3n, los par\u00e1metros no. Las variables/par\u00e1metros no utilizados se eliminan en la canalizaci\u00f3n. \u00bfLa canalizaci\u00f3n cumple con los criterios de condiciones de etapa/trabajo? Comprobaci\u00f3n de permisos y seguridad Los valores secretos no deben imprimirse en la canalizaci\u00f3n, issecret se usa para imprimir secretos para la depuraci\u00f3n. Si la canalizaci\u00f3n utiliza grupos de variables en la biblioteca, aseg\u00farese de que la canalizaci\u00f3n tenga acceso a los grupos de variables creados. Si la canalizaci\u00f3n tiene una tarea remota en otro repositorio/organizaci\u00f3n, \u00bftiene acceso? Si la canalizaci\u00f3n intenta acceder a un archivo seguro, \u00bftiene el permiso? Si la canalizaci\u00f3n requiere aprobaci\u00f3n para las implementaciones del entorno, \u00bfqui\u00e9n es el aprobador? \u00bfNecesita guardar secretos y administrarlos? \u00bfConsider\u00f3 usar Azure KeyVault?","title":"YAML(Azure Pipelines) Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#yamlazure-pipelines-code-reviews","text":"","title":"YAML(Azure Pipelines) Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#guia-de-estilo","text":"Referencia del esquema YAML .","title":"Gu\u00eda de estilo"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#analisis-de-codigo-linting","text":"El linter YAML m\u00e1s popular es la extensi\u00f3n YAML . Esta extensi\u00f3n proporciona validaci\u00f3n YAML, esquematizaci\u00f3n de documentos, finalizaci\u00f3n autom\u00e1tica, compatibilidad con desplazamiento y funciones de formateador.","title":"An\u00e1lisis de c\u00f3digo / Linting"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#vs-code-extensions","text":"Hay una extensi\u00f3n de Azure Pipelines para VS Code para agregar resaltado de sintaxis y autocompletado. Tambi\u00e9n lo ayuda a configurar la compilaci\u00f3n e implementaci\u00f3n continuas de Azure WebApps sin salir de VS Code.","title":"VS Code Extensions"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#descripcion-general-de-yaml-en-azure-pipelines","text":"Cuando se activa la canalizaci\u00f3n, antes de ejecutar la canalizaci\u00f3n, hay algunas fases, como Tiempo de encolado, Tiempo de compilaci\u00f3n y Tiempo de ejecuci\u00f3n , donde las variables se interpretan por su sintaxis de expresi\u00f3n de tiempo de ejecuci\u00f3n . Cuando se activa la canalizaci\u00f3n, todos los archivos YAML anidados se expanden para ejecutarse en Azure Pipelines. Esta lista de verificaci\u00f3n contiene algunos consejos y trucos para revisar todos los archivos YAML anidados. Estos documentos pueden ser \u00fatiles al revisar archivos YAML: Documentaci\u00f3n YAML de Azure Pipelines Secuencia de ejecuci\u00f3n de canalizaci\u00f3n Conceptos clave para los nuevos Azure Pipelines","title":"Descripci\u00f3n general de YAML en Azure Pipelines"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#code-review-checklist","text":"Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de Azure Pipelines YAML:","title":"Code Review Checklist"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#estructura-del-pipeline","text":"Los pasos se entienden bien y los componentes son f\u00e1cilmente identificables. Aseg\u00farese de que haya una descripci\u00f3n adecuada displayName: para cada paso de la canalizaci\u00f3n. Los pasos o etapas de la canalizaci\u00f3n se comprueban en Azure Pipelines para comprender mejor los componentes. En caso de que tenga archivos YAML anidados complejos, la canalizaci\u00f3n en Azure Pipelines se edita para encontrar el archivo ra\u00edz desencadenante. Se visitan todas las referencias del archivo de plantilla para garantizar que un peque\u00f1o cambio no provoque cambios importantes; cambiar un archivo puede afectar a varias canalizaciones Los scripts en l\u00ednea largos en el archivo YAML se mueven a archivos de script","title":"Estructura del pipeline"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#estructura-yaml","text":"Los componentes reutilizables se dividen en plantillas YAML separadas. Las variables se separan por entorno almacenadas en plantillas o grupos de variables. Se tienen en cuenta los cambios de valor de las variables en el tiempo de encolado, el tiempo de compilaci\u00f3n y el tiempo de ejecuci\u00f3n. Se consideran los valores de sintaxis de variables utilizados con la sintaxis de macro, la sintaxis de expresi\u00f3n de plantilla y la sintaxis de expresi\u00f3n de tiempo de ejecuci\u00f3n. Las variables pueden cambiar durante la canalizaci\u00f3n, los par\u00e1metros no. Las variables/par\u00e1metros no utilizados se eliminan en la canalizaci\u00f3n. \u00bfLa canalizaci\u00f3n cumple con los criterios de condiciones de etapa/trabajo?","title":"Estructura YAML"},{"location":"revisiones%20de%20codigo/recetas/azure-pipelines-yaml/#comprobacion-de-permisos-y-seguridad","text":"Los valores secretos no deben imprimirse en la canalizaci\u00f3n, issecret se usa para imprimir secretos para la depuraci\u00f3n. Si la canalizaci\u00f3n utiliza grupos de variables en la biblioteca, aseg\u00farese de que la canalizaci\u00f3n tenga acceso a los grupos de variables creados. Si la canalizaci\u00f3n tiene una tarea remota en otro repositorio/organizaci\u00f3n, \u00bftiene acceso? Si la canalizaci\u00f3n intenta acceder a un archivo seguro, \u00bftiene el permiso? Si la canalizaci\u00f3n requiere aprobaci\u00f3n para las implementaciones del entorno, \u00bfqui\u00e9n es el aprobador? \u00bfNecesita guardar secretos y administrarlos? \u00bfConsider\u00f3 usar Azure KeyVault?","title":"Comprobaci\u00f3n de permisos y seguridad"},{"location":"revisiones%20de%20codigo/recetas/bash/","text":"Bash Code Reviews Gu\u00eda de estilo Google's Bash Style Guide An\u00e1lisis de c\u00f3digo / Linting Los proyectos deben verificar el c\u00f3digo bash con shellcheck como parte del proceso de CI. Adem\u00e1s de linting, shfmt se puede usar para formatear autom\u00e1ticamente scripts de shell. Configuraci\u00f3n del proyecto vscode-shellcheck La extensi\u00f3n Shellcheck debe usarse en VS Code, proporciona capacidades de an\u00e1lisis de c\u00f3digo est\u00e1tico y problemas de linting de reparaci\u00f3n autom\u00e1tica. Formateo autom\u00e1tico de c\u00f3digo shell-format La extensi\u00f3n shell-format formatea autom\u00e1ticamente sus scripts bash, archivos docker y varios archivos de configuraci\u00f3n. Depende de shfmt, que puede hacer cumplir las verificaciones de la gu\u00eda de estilo de Google para bash. Validaci\u00f3n de compilaci\u00f3n Para automatizar este proceso en Azure DevOps, puede agregar el siguiente fragmento de c\u00f3digo a su archivo azure-pipelines.yaml. Esto borrar\u00e1 cualquier script en la carpeta ./scripts/. - bash : | echo \"This checks for formatting and common bash errors. See wiki for error details and ignore options: https://github.com/koalaman/shellcheck/wiki/SC1000\" export scversion=\"stable\" wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz\" | tar -xJv sudo mv \"shellcheck-${scversion}/shellcheck\" /usr/bin/ rm -r \"shellcheck-${scversion}\" shellcheck ./scripts/*.sh displayName : \"Validate Scripts: Shellcheck\" Adem\u00e1s, sus scripts de shell se pueden formatear en su canalizaci\u00f3n de compilaci\u00f3n usando la herramienta shfmt. Para integrar shfmt en su canal de compilaci\u00f3n, haga lo siguiente: - bash : | echo \"This step does auto formatting of shell scripts\" shfmt -l -w ./scripts/*.sh displayName : \"Format Scripts: shfmt\" Las pruebas unitarias que usan shunit2 tambi\u00e9n se pueden agregar a la canalizaci\u00f3n de compilaci\u00f3n, usando el siguiente bloque: - bash : | echo \"This step unit tests shell scripts by using shunit2\" ./shunit2 displayName : \"Format Scripts: shfmt\" Pre-Commit Hooks Todos los desarrolladores deben ejecutar shellcheck y shfmt como pre-commit hooks. Paso 1 Ejecute pip install pre-commit . Alternativamente, puede ejecutar brew install pre-commit si est\u00e1 utilizando homebrew. Paso 2 Agregue el archivo .pre-commit-config.yaml a la ra\u00edz del proyecto go. Ejecute shfmt en el pre-commit agreg\u00e1ndolo al archivo .pre-commit-config.yaml como se muestra a continuaci\u00f3n. - repo : git://github.com/pecigonzalo/pre-commit-fmt sha : master hooks : - id : shell-fmt args : - --indent=4 - repo : https://github.com/shellcheck-py/shellcheck-py rev : v0.7.1.1 hooks : - id : shellcheck Paso 3 Ejecute $ pre-commit install para configurar los scripts de git hook Dependencias Los scripts Bash se utilizan a menudo para \"unir\" otros sistemas y herramientas. Como tal, los scripts de Bash a menudo pueden tener dependencias numerosas y/o complicadas. Considere el uso de contenedores Docker para asegurarse de que los scripts se ejecuten en un entorno port\u00e1til y reproducible que contenga todas las dependencias correctas. Para asegurarse de que los scripts dockerizados sean f\u00e1ciles de ejecutar, considere hacer que el uso de Docker sea transparente para la persona que llama al script envolviendo el script en un 'bootstrap' que verifica si el script se est\u00e1 ejecutando en Docker y se vuelve a ejecutar en Docker si no es as\u00ed. Esto proporciona lo mejor de ambos mundos: ejecuci\u00f3n sencilla de scripts y entornos coherentes. if [[ \"${DOCKER}\" != \"true\" ]]; then docker build -t my_script -f my_script.Dockerfile . > /dev/null docker run -e DOCKER=true my_script \"$@\" exit $? fi # ... implementation of my_script here can assume that all of its dependencies exist since it's always running in Docker ... Code Review Checklist Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de bash: \u00bfEste c\u00f3digo utiliza opciones de shell integradas como set -o, set -e, set -u para el control de ejecuci\u00f3n de scripts de shell? \u00bfEl c\u00f3digo est\u00e1 modularizado? Los scripts de shell se pueden modularizar como m\u00f3dulos de python. Las partes de los scripts bash deben obtenerse en proyectos bash complejos. \u00bfTodas las excepciones se manejan correctamente? Las excepciones deben manejarse correctamente utilizando c\u00f3digos de salida o se\u00f1ales de captura. \u00bfPasa el c\u00f3digo todas las verificaciones linting seg\u00fan shellcheck y las pruebas unitarias seg\u00fan shunit2? \u00bfEl c\u00f3digo usa rutas relativas o rutas absolutas? Deben evitarse las rutas relativas, ya que son propensas a los ataques del entorno. Si se necesita una ruta relativa, verifique que la variable PATH est\u00e9 configurada. \u00bfEl c\u00f3digo toma credenciales como entrada del usuario? \u00bfLas credenciales est\u00e1n enmascaradas o encriptadas en el script?","title":"Bash Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/bash/#bash-code-reviews","text":"","title":"Bash Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/bash/#guia-de-estilo","text":"Google's Bash Style Guide","title":"Gu\u00eda de estilo"},{"location":"revisiones%20de%20codigo/recetas/bash/#analisis-de-codigo-linting","text":"Los proyectos deben verificar el c\u00f3digo bash con shellcheck como parte del proceso de CI. Adem\u00e1s de linting, shfmt se puede usar para formatear autom\u00e1ticamente scripts de shell.","title":"An\u00e1lisis de c\u00f3digo / Linting"},{"location":"revisiones%20de%20codigo/recetas/bash/#configuracion-del-proyecto","text":"","title":"Configuraci\u00f3n del proyecto"},{"location":"revisiones%20de%20codigo/recetas/bash/#vscode-shellcheck","text":"La extensi\u00f3n Shellcheck debe usarse en VS Code, proporciona capacidades de an\u00e1lisis de c\u00f3digo est\u00e1tico y problemas de linting de reparaci\u00f3n autom\u00e1tica.","title":"vscode-shellcheck"},{"location":"revisiones%20de%20codigo/recetas/bash/#formateo-automatico-de-codigo","text":"","title":"Formateo autom\u00e1tico de c\u00f3digo"},{"location":"revisiones%20de%20codigo/recetas/bash/#shell-format","text":"La extensi\u00f3n shell-format formatea autom\u00e1ticamente sus scripts bash, archivos docker y varios archivos de configuraci\u00f3n. Depende de shfmt, que puede hacer cumplir las verificaciones de la gu\u00eda de estilo de Google para bash.","title":"shell-format"},{"location":"revisiones%20de%20codigo/recetas/bash/#validacion-de-compilacion","text":"Para automatizar este proceso en Azure DevOps, puede agregar el siguiente fragmento de c\u00f3digo a su archivo azure-pipelines.yaml. Esto borrar\u00e1 cualquier script en la carpeta ./scripts/. - bash : | echo \"This checks for formatting and common bash errors. See wiki for error details and ignore options: https://github.com/koalaman/shellcheck/wiki/SC1000\" export scversion=\"stable\" wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz\" | tar -xJv sudo mv \"shellcheck-${scversion}/shellcheck\" /usr/bin/ rm -r \"shellcheck-${scversion}\" shellcheck ./scripts/*.sh displayName : \"Validate Scripts: Shellcheck\" Adem\u00e1s, sus scripts de shell se pueden formatear en su canalizaci\u00f3n de compilaci\u00f3n usando la herramienta shfmt. Para integrar shfmt en su canal de compilaci\u00f3n, haga lo siguiente: - bash : | echo \"This step does auto formatting of shell scripts\" shfmt -l -w ./scripts/*.sh displayName : \"Format Scripts: shfmt\" Las pruebas unitarias que usan shunit2 tambi\u00e9n se pueden agregar a la canalizaci\u00f3n de compilaci\u00f3n, usando el siguiente bloque: - bash : | echo \"This step unit tests shell scripts by using shunit2\" ./shunit2 displayName : \"Format Scripts: shfmt\"","title":"Validaci\u00f3n de compilaci\u00f3n"},{"location":"revisiones%20de%20codigo/recetas/bash/#pre-commit-hooks","text":"Todos los desarrolladores deben ejecutar shellcheck y shfmt como pre-commit hooks. Paso 1 Ejecute pip install pre-commit . Alternativamente, puede ejecutar brew install pre-commit si est\u00e1 utilizando homebrew. Paso 2 Agregue el archivo .pre-commit-config.yaml a la ra\u00edz del proyecto go. Ejecute shfmt en el pre-commit agreg\u00e1ndolo al archivo .pre-commit-config.yaml como se muestra a continuaci\u00f3n. - repo : git://github.com/pecigonzalo/pre-commit-fmt sha : master hooks : - id : shell-fmt args : - --indent=4 - repo : https://github.com/shellcheck-py/shellcheck-py rev : v0.7.1.1 hooks : - id : shellcheck Paso 3 Ejecute $ pre-commit install para configurar los scripts de git hook","title":"Pre-Commit Hooks"},{"location":"revisiones%20de%20codigo/recetas/bash/#dependencias","text":"Los scripts Bash se utilizan a menudo para \"unir\" otros sistemas y herramientas. Como tal, los scripts de Bash a menudo pueden tener dependencias numerosas y/o complicadas. Considere el uso de contenedores Docker para asegurarse de que los scripts se ejecuten en un entorno port\u00e1til y reproducible que contenga todas las dependencias correctas. Para asegurarse de que los scripts dockerizados sean f\u00e1ciles de ejecutar, considere hacer que el uso de Docker sea transparente para la persona que llama al script envolviendo el script en un 'bootstrap' que verifica si el script se est\u00e1 ejecutando en Docker y se vuelve a ejecutar en Docker si no es as\u00ed. Esto proporciona lo mejor de ambos mundos: ejecuci\u00f3n sencilla de scripts y entornos coherentes. if [[ \"${DOCKER}\" != \"true\" ]]; then docker build -t my_script -f my_script.Dockerfile . > /dev/null docker run -e DOCKER=true my_script \"$@\" exit $? fi # ... implementation of my_script here can assume that all of its dependencies exist since it's always running in Docker ...","title":"Dependencias"},{"location":"revisiones%20de%20codigo/recetas/bash/#code-review-checklist","text":"Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de bash: \u00bfEste c\u00f3digo utiliza opciones de shell integradas como set -o, set -e, set -u para el control de ejecuci\u00f3n de scripts de shell? \u00bfEl c\u00f3digo est\u00e1 modularizado? Los scripts de shell se pueden modularizar como m\u00f3dulos de python. Las partes de los scripts bash deben obtenerse en proyectos bash complejos. \u00bfTodas las excepciones se manejan correctamente? Las excepciones deben manejarse correctamente utilizando c\u00f3digos de salida o se\u00f1ales de captura. \u00bfPasa el c\u00f3digo todas las verificaciones linting seg\u00fan shellcheck y las pruebas unitarias seg\u00fan shunit2? \u00bfEl c\u00f3digo usa rutas relativas o rutas absolutas? Deben evitarse las rutas relativas, ya que son propensas a los ataques del entorno. Si se necesita una ruta relativa, verifique que la variable PATH est\u00e9 configurada. \u00bfEl c\u00f3digo toma credenciales como entrada del usuario? \u00bfLas credenciales est\u00e1n enmascaradas o encriptadas en el script?","title":"Code Review Checklist"},{"location":"revisiones%20de%20codigo/recetas/csharp/","text":"","title":"Csharp"},{"location":"revisiones%20de%20codigo/recetas/markdown/","text":"Markdown Code Reviews Gu\u00eda de estilo La documentaci\u00f3n se trata como cualquier otro c\u00f3digo fuente y se deben seguir las mismas reglas y listas de verificaci\u00f3n. La documentaci\u00f3n debe usar una buena sintaxis de Markdown para garantizar que se analice correctamente y seguir las pautas de un buen estilo de escritura para garantizar que el documento sea f\u00e1cil de leer y comprender. Markdown Markdown es un lenguaje de marcado ligero que puede usar para agregar elementos de formato a documentos de texto sin formato. Es uno de los lenguajes de marcado m\u00e1s populares del mundo. Puede encontrar m\u00e1s informaci\u00f3n y documentaci\u00f3n completa aqu\u00ed . Linting Markdown tiene una forma espec\u00edfica de formatearse. Es importante respetar este formato, de lo contrario, algunos int\u00e9rpretes estrictos no mostrar\u00e1n correctamente el documento. Los linters a menudo se usan para ayudar a los desarrolladores a crear documentos correctamente al verificar la sintaxis, la gram\u00e1tica y el idioma ingl\u00e9s correctos de Markdown. Una buena configuraci\u00f3n incluye un linter markdown que se usa durante la edici\u00f3n y la verificaci\u00f3n del PR de compilaci\u00f3n, y un linter de gram\u00e1tica que se usa mientras se edita el documento. La siguiente es una lista de linters que podr\u00edan usarse en esta configuraci\u00f3n. markdownlint markdownlint es un linter para markdown que verifica la sintaxis de Markdown y tambi\u00e9n aplica reglas que hacen que el texto sea m\u00e1s legible. Markdownlint-cli es una CLI f\u00e1cil de usar basada en Markdownlint. Est\u00e1 disponible como ruby gem , un paquete npm , una CLI de Node.js y una extensi\u00f3n de VS Code . La extensi\u00f3n Prettier de VS Code tambi\u00e9n detecta todos los errores de markdownlint. Una lista completa de reglas de markdownlint est\u00e1 disponible aqu\u00ed . proselint proselint es una utilidad de l\u00ednea de comandos que comprueba jerga, errores ortogr\u00e1ficos, redundancia, lenguaje corporativo y otros problemas relacionados con el lenguaje. Est\u00e1 disponible como paquete de python y como paquete de node . VS Code Extensions Write Good Linter La extensi\u00f3n Write Good Linter se integra con VS Code para brindar consejos sobre gram\u00e1tica y lenguaje mientras se edita el documento. markdownlint extension La extensi\u00f3n markdownlint examina los documentos de Markdown y muestra advertencias sobre violaciones de reglas durante la edici\u00f3n. Validaci\u00f3n de compilaci\u00f3n Linting para validaci\u00f3n de PR Para automatizar el linting con markdownlint para la validaci\u00f3n de PR en las acciones de GitHub, use el siguiente YAML. name : Markdownlint on : push : paths : - \"**/*.md\" pull_request : paths : - \"**/*.md\" jobs : lint : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - name : Use Node.js uses : actions/setup-node@v1 with : node-version : 12.x - name : Run Markdownlint run : | npm i -g markdownlint-cli markdownlint \"**/*.md\" --ignore node_modules Comprobaci\u00f3n de enlaces Para automatizar la verificaci\u00f3n de enlaces en sus archivos markdown, agregue la acci\u00f3n markdown-link-check a su pipeline de validaci\u00f3n: markdown-link-check : runs-on : ubuntu-latest steps : - uses : actions/checkout@master - uses : gaurav-nelson/github-action-markdown-link-check@v1 Puede encontrar m\u00e1s informaci\u00f3n sobre las opciones de acci\u00f3n de markdown-link-check en la p\u00e1gina de inicio de markdown-link-check Code Review Checklist Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de la documentaci\u00f3n: \u00bfEl documento es f\u00e1cil de leer y comprender y sigue buenas pautas de escritura? \u00bfHay una \u00fanica fuente de verdad o el contenido se repite en m\u00e1s de un documento? \u00bfLa documentaci\u00f3n est\u00e1 al d\u00eda con el c\u00f3digo? \u00bfLa documentaci\u00f3n es t\u00e9cnica y \u00e9ticamente correcta?","title":"Markdown Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/markdown/#markdown-code-reviews","text":"","title":"Markdown Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/markdown/#guia-de-estilo","text":"La documentaci\u00f3n se trata como cualquier otro c\u00f3digo fuente y se deben seguir las mismas reglas y listas de verificaci\u00f3n. La documentaci\u00f3n debe usar una buena sintaxis de Markdown para garantizar que se analice correctamente y seguir las pautas de un buen estilo de escritura para garantizar que el documento sea f\u00e1cil de leer y comprender.","title":"Gu\u00eda de estilo"},{"location":"revisiones%20de%20codigo/recetas/markdown/#markdown","text":"Markdown es un lenguaje de marcado ligero que puede usar para agregar elementos de formato a documentos de texto sin formato. Es uno de los lenguajes de marcado m\u00e1s populares del mundo. Puede encontrar m\u00e1s informaci\u00f3n y documentaci\u00f3n completa aqu\u00ed .","title":"Markdown"},{"location":"revisiones%20de%20codigo/recetas/markdown/#linting","text":"Markdown tiene una forma espec\u00edfica de formatearse. Es importante respetar este formato, de lo contrario, algunos int\u00e9rpretes estrictos no mostrar\u00e1n correctamente el documento. Los linters a menudo se usan para ayudar a los desarrolladores a crear documentos correctamente al verificar la sintaxis, la gram\u00e1tica y el idioma ingl\u00e9s correctos de Markdown. Una buena configuraci\u00f3n incluye un linter markdown que se usa durante la edici\u00f3n y la verificaci\u00f3n del PR de compilaci\u00f3n, y un linter de gram\u00e1tica que se usa mientras se edita el documento. La siguiente es una lista de linters que podr\u00edan usarse en esta configuraci\u00f3n.","title":"Linting"},{"location":"revisiones%20de%20codigo/recetas/markdown/#markdownlint","text":"markdownlint es un linter para markdown que verifica la sintaxis de Markdown y tambi\u00e9n aplica reglas que hacen que el texto sea m\u00e1s legible. Markdownlint-cli es una CLI f\u00e1cil de usar basada en Markdownlint. Est\u00e1 disponible como ruby gem , un paquete npm , una CLI de Node.js y una extensi\u00f3n de VS Code . La extensi\u00f3n Prettier de VS Code tambi\u00e9n detecta todos los errores de markdownlint. Una lista completa de reglas de markdownlint est\u00e1 disponible aqu\u00ed .","title":"markdownlint"},{"location":"revisiones%20de%20codigo/recetas/markdown/#proselint","text":"proselint es una utilidad de l\u00ednea de comandos que comprueba jerga, errores ortogr\u00e1ficos, redundancia, lenguaje corporativo y otros problemas relacionados con el lenguaje. Est\u00e1 disponible como paquete de python y como paquete de node .","title":"proselint"},{"location":"revisiones%20de%20codigo/recetas/markdown/#vs-code-extensions","text":"","title":"VS Code Extensions"},{"location":"revisiones%20de%20codigo/recetas/markdown/#write-good-linter","text":"La extensi\u00f3n Write Good Linter se integra con VS Code para brindar consejos sobre gram\u00e1tica y lenguaje mientras se edita el documento.","title":"Write Good Linter"},{"location":"revisiones%20de%20codigo/recetas/markdown/#markdownlint-extension","text":"La extensi\u00f3n markdownlint examina los documentos de Markdown y muestra advertencias sobre violaciones de reglas durante la edici\u00f3n.","title":"markdownlint extension"},{"location":"revisiones%20de%20codigo/recetas/markdown/#validacion-de-compilacion","text":"","title":"Validaci\u00f3n de compilaci\u00f3n"},{"location":"revisiones%20de%20codigo/recetas/markdown/#linting-para-validacion-de-pr","text":"Para automatizar el linting con markdownlint para la validaci\u00f3n de PR en las acciones de GitHub, use el siguiente YAML. name : Markdownlint on : push : paths : - \"**/*.md\" pull_request : paths : - \"**/*.md\" jobs : lint : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - name : Use Node.js uses : actions/setup-node@v1 with : node-version : 12.x - name : Run Markdownlint run : | npm i -g markdownlint-cli markdownlint \"**/*.md\" --ignore node_modules","title":"Linting para validaci\u00f3n de PR"},{"location":"revisiones%20de%20codigo/recetas/markdown/#comprobacion-de-enlaces","text":"Para automatizar la verificaci\u00f3n de enlaces en sus archivos markdown, agregue la acci\u00f3n markdown-link-check a su pipeline de validaci\u00f3n: markdown-link-check : runs-on : ubuntu-latest steps : - uses : actions/checkout@master - uses : gaurav-nelson/github-action-markdown-link-check@v1 Puede encontrar m\u00e1s informaci\u00f3n sobre las opciones de acci\u00f3n de markdown-link-check en la p\u00e1gina de inicio de markdown-link-check","title":"Comprobaci\u00f3n de enlaces"},{"location":"revisiones%20de%20codigo/recetas/markdown/#code-review-checklist","text":"Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de la documentaci\u00f3n: \u00bfEl documento es f\u00e1cil de leer y comprender y sigue buenas pautas de escritura? \u00bfHay una \u00fanica fuente de verdad o el contenido se repite en m\u00e1s de un documento? \u00bfLa documentaci\u00f3n est\u00e1 al d\u00eda con el c\u00f3digo? \u00bfLa documentaci\u00f3n es t\u00e9cnica y \u00e9ticamente correcta?","title":"Code Review Checklist"},{"location":"revisiones%20de%20codigo/recetas/python/","text":"Python Code Reviews Gu\u00eda de estilo Los desarrolladores deben seguir la gu\u00eda de estilo de PEP8 con sugerencias de tipo . El uso de sugerencias de tipo en conjunto con el linting evita errores comunes que son dif\u00edciles de depurar. Los proyectos deben verificar el c\u00f3digo de Python con herramientas automatizadas. Se debe agregar Linting para compilar la validaci\u00f3n, y tanto el formato de c\u00f3digo como el de Linting se pueden agregar a los pre-commit hooks y a VS Code. An\u00e1lisis de c\u00f3digo / Linting Los 2 linters de python m\u00e1s populares son Pylint y Flake8 . Ambos verifican el cumplimiento de PEP8 pero var\u00edan un poco en qu\u00e9 otras reglas verifican. En general, Pylint tiende a ser un poco m\u00e1s estricto y da m\u00e1s falsos positivos, pero ambas son buenas opciones. Tanto Pylint como Flake8 se pueden configurar en VS Code usando la extensi\u00f3n python de VS Code. Pylint Instalar Pylint pip install pylint Ejecutar Pylint pylint src # lint the source directory Flake8 Flake8 es un contenedor simple y r\u00e1pido de Pyflakes (para detectar errores de codificaci\u00f3n) y pycodestyle (para pep8). Instalar Flake8 pip install flake8 Agregar extensi\u00f3n para la herramienta pydocstyle (para doc strings ) a flake8. pip install flake8-docstrings Agregar extensi\u00f3n para la herramienta pep8-naming (para convenciones de nombre en pep8) a flake8. pip install pep8-naming Ejecutar Flake8 flake8 . # lint the whole project Formateo autom\u00e1tico de c\u00f3digo Black Black es una herramienta de formato de c\u00f3digo. Elimina toda la necesidad de que pycodestyle rega\u00f1e sobre el formato, por lo que el equipo puede concentrarse en el contenido frente al estilo. No es posible configurar black para sus propias necesidades de estilo. pip install black Formatear c\u00f3digo python black [ file/folder ] Autopep8 Autopep8 es m\u00e1s indulgente y permite una mayor configuraci\u00f3n si desea un formato menos estricto. pip install autopep8 Formatear c\u00f3digo python autopep8 [ file/folder ] --in-place yapf yapf (Yet Another Python Formatter) es un formateador de Python de Google basado en ideas de gofmt. Tambi\u00e9n es m\u00e1s configurable y una buena opci\u00f3n para el formato de c\u00f3digo autom\u00e1tico. pip install yapf Formatear c\u00f3digo python yapf [ file/folder ] --in-place VS Code Extensions Python Es la extensi\u00f3n base que deber\u00eda haber instalado para el desarrollo de Python con VS Code. Permite intellisense, depuraci\u00f3n, linting (con los linters anteriores), pruebas con pytest o unittest y formateo de c\u00f3digo con los formateadores mencionados anteriormente. Pyright Esta extensi\u00f3n aumenta VS Code con verificaci\u00f3n de tipo est\u00e1tico cuando usa sugerencias de tipo. def add ( first_value : int , second_value : int ) -> int : return first_value + second_value Validaci\u00f3n de compilaci\u00f3n Para automatizar el linting con flake8 y las pruebas con pytest en Azure Devops, puede agregar el siguiente fragmento a su archivo azure-pipelines.yaml. trigger : branches : include : - develop - master paths : include : - src/* pool : vmImage : 'ubuntu-latest' jobs : - job : LintAndTest displayName : Lint and Test steps : - checkout : self lfs : true - task : UsePythonVersion@0 displayName : 'Set Python version to 3.6' inputs : versionSpec : '3.6' - script : pip3 install --user -r requirements.txt displayName : 'Install dependencies' - script : | # Install Flake8 pip3 install --user flake8 # Install PyTest pip3 install --user pytest displayName : 'Install Flake8 and PyTest' - script : | python3 -m flake8 displayName : 'Run Flake8 linter' - script : | # Run PyTest tester python3 -m pytest --junitxml=./test-results.xml displayName : 'Run PyTest Tester' - task : PublishTestResults@2 displayName : 'Publish PyTest results' condition : succeededOrFailed() inputs : testResultsFiles : '**/test-*.xml' testRunTitle : 'Publish test results for Python $(python.version)' Pre-commit hooks Pre-commit hooks le permiten formatear y lintear el c\u00f3digo localmente antes de enviar el PR. Agregar pre-commit hooks para su repositorio de python es f\u00e1cil usando el paquete pre-commit. Instale pre-commit y agr\u00e9guelo a requirements.txt pip install pre-commit Agregue un archivo .pre-commit-config.yaml en la ra\u00edz del repositorio, con las deseadas acciones previas al commit. repos : - repo : https://github.com/ambv/black rev : stable hooks : - id : black language_version : python3.6 - repo : https://github.com/pre-commit/pre-commit-hooks rev : v1.2.3 hooks : - id : flake8 Cada desarrollador que desee configurar pre-commit hooks puede ejecutar pre-commit install Code Review Checklist Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de python: \u00bfTodos los paquetes nuevos utilizados est\u00e1n incluidos en requirements.txt? \u00bfPasa el c\u00f3digo todas las comprobaciones lint? \u00bfLas funciones usan sugerencias de tipo y hay alg\u00fan error de sugerencia de tipo? \u00bfEl c\u00f3digo es legible y usa construcciones pythonic siempre que sea posible?","title":"Python Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/python/#python-code-reviews","text":"","title":"Python Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/python/#guia-de-estilo","text":"Los desarrolladores deben seguir la gu\u00eda de estilo de PEP8 con sugerencias de tipo . El uso de sugerencias de tipo en conjunto con el linting evita errores comunes que son dif\u00edciles de depurar. Los proyectos deben verificar el c\u00f3digo de Python con herramientas automatizadas. Se debe agregar Linting para compilar la validaci\u00f3n, y tanto el formato de c\u00f3digo como el de Linting se pueden agregar a los pre-commit hooks y a VS Code.","title":"Gu\u00eda de estilo"},{"location":"revisiones%20de%20codigo/recetas/python/#analisis-de-codigo-linting","text":"Los 2 linters de python m\u00e1s populares son Pylint y Flake8 . Ambos verifican el cumplimiento de PEP8 pero var\u00edan un poco en qu\u00e9 otras reglas verifican. En general, Pylint tiende a ser un poco m\u00e1s estricto y da m\u00e1s falsos positivos, pero ambas son buenas opciones. Tanto Pylint como Flake8 se pueden configurar en VS Code usando la extensi\u00f3n python de VS Code.","title":"An\u00e1lisis de c\u00f3digo / Linting"},{"location":"revisiones%20de%20codigo/recetas/python/#pylint","text":"Instalar Pylint pip install pylint Ejecutar Pylint pylint src # lint the source directory","title":"Pylint"},{"location":"revisiones%20de%20codigo/recetas/python/#flake8","text":"Flake8 es un contenedor simple y r\u00e1pido de Pyflakes (para detectar errores de codificaci\u00f3n) y pycodestyle (para pep8). Instalar Flake8 pip install flake8 Agregar extensi\u00f3n para la herramienta pydocstyle (para doc strings ) a flake8. pip install flake8-docstrings Agregar extensi\u00f3n para la herramienta pep8-naming (para convenciones de nombre en pep8) a flake8. pip install pep8-naming Ejecutar Flake8 flake8 . # lint the whole project","title":"Flake8"},{"location":"revisiones%20de%20codigo/recetas/python/#formateo-automatico-de-codigo","text":"","title":"Formateo autom\u00e1tico de c\u00f3digo"},{"location":"revisiones%20de%20codigo/recetas/python/#black","text":"Black es una herramienta de formato de c\u00f3digo. Elimina toda la necesidad de que pycodestyle rega\u00f1e sobre el formato, por lo que el equipo puede concentrarse en el contenido frente al estilo. No es posible configurar black para sus propias necesidades de estilo. pip install black Formatear c\u00f3digo python black [ file/folder ]","title":"Black"},{"location":"revisiones%20de%20codigo/recetas/python/#autopep8","text":"Autopep8 es m\u00e1s indulgente y permite una mayor configuraci\u00f3n si desea un formato menos estricto. pip install autopep8 Formatear c\u00f3digo python autopep8 [ file/folder ] --in-place","title":"Autopep8"},{"location":"revisiones%20de%20codigo/recetas/python/#yapf","text":"yapf (Yet Another Python Formatter) es un formateador de Python de Google basado en ideas de gofmt. Tambi\u00e9n es m\u00e1s configurable y una buena opci\u00f3n para el formato de c\u00f3digo autom\u00e1tico. pip install yapf Formatear c\u00f3digo python yapf [ file/folder ] --in-place","title":"yapf"},{"location":"revisiones%20de%20codigo/recetas/python/#vs-code-extensions","text":"","title":"VS Code Extensions"},{"location":"revisiones%20de%20codigo/recetas/python/#python","text":"Es la extensi\u00f3n base que deber\u00eda haber instalado para el desarrollo de Python con VS Code. Permite intellisense, depuraci\u00f3n, linting (con los linters anteriores), pruebas con pytest o unittest y formateo de c\u00f3digo con los formateadores mencionados anteriormente.","title":"Python"},{"location":"revisiones%20de%20codigo/recetas/python/#pyright","text":"Esta extensi\u00f3n aumenta VS Code con verificaci\u00f3n de tipo est\u00e1tico cuando usa sugerencias de tipo. def add ( first_value : int , second_value : int ) -> int : return first_value + second_value","title":"Pyright"},{"location":"revisiones%20de%20codigo/recetas/python/#validacion-de-compilacion","text":"Para automatizar el linting con flake8 y las pruebas con pytest en Azure Devops, puede agregar el siguiente fragmento a su archivo azure-pipelines.yaml. trigger : branches : include : - develop - master paths : include : - src/* pool : vmImage : 'ubuntu-latest' jobs : - job : LintAndTest displayName : Lint and Test steps : - checkout : self lfs : true - task : UsePythonVersion@0 displayName : 'Set Python version to 3.6' inputs : versionSpec : '3.6' - script : pip3 install --user -r requirements.txt displayName : 'Install dependencies' - script : | # Install Flake8 pip3 install --user flake8 # Install PyTest pip3 install --user pytest displayName : 'Install Flake8 and PyTest' - script : | python3 -m flake8 displayName : 'Run Flake8 linter' - script : | # Run PyTest tester python3 -m pytest --junitxml=./test-results.xml displayName : 'Run PyTest Tester' - task : PublishTestResults@2 displayName : 'Publish PyTest results' condition : succeededOrFailed() inputs : testResultsFiles : '**/test-*.xml' testRunTitle : 'Publish test results for Python $(python.version)'","title":"Validaci\u00f3n de compilaci\u00f3n"},{"location":"revisiones%20de%20codigo/recetas/python/#pre-commit-hooks","text":"Pre-commit hooks le permiten formatear y lintear el c\u00f3digo localmente antes de enviar el PR. Agregar pre-commit hooks para su repositorio de python es f\u00e1cil usando el paquete pre-commit. Instale pre-commit y agr\u00e9guelo a requirements.txt pip install pre-commit Agregue un archivo .pre-commit-config.yaml en la ra\u00edz del repositorio, con las deseadas acciones previas al commit. repos : - repo : https://github.com/ambv/black rev : stable hooks : - id : black language_version : python3.6 - repo : https://github.com/pre-commit/pre-commit-hooks rev : v1.2.3 hooks : - id : flake8 Cada desarrollador que desee configurar pre-commit hooks puede ejecutar pre-commit install","title":"Pre-commit hooks"},{"location":"revisiones%20de%20codigo/recetas/python/#code-review-checklist","text":"Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de python: \u00bfTodos los paquetes nuevos utilizados est\u00e1n incluidos en requirements.txt? \u00bfPasa el c\u00f3digo todas las comprobaciones lint? \u00bfLas funciones usan sugerencias de tipo y hay alg\u00fan error de sugerencia de tipo? \u00bfEl c\u00f3digo es legible y usa construcciones pythonic siempre que sea posible?","title":"Code Review Checklist"},{"location":"revisiones%20de%20codigo/recetas/terraform/","text":"Terraform Code Reviews Gu\u00eda de estilo Terraform style guide Los proyectos deben verificar los scripts de Terraform con herramientas automatizadas. An\u00e1lisis de c\u00f3digo / Linting TFLint TFLint es un linter de Terraform centrado en posibles errores, mejores pr\u00e1cticas, etc. Una vez que TFLint est\u00e1 instalado en el entorno, se puede invocar mediante la extensi\u00f3n de terraform de VS Code. VS Code Extensions Extensi\u00f3n Terraform Esta extensi\u00f3n proporciona capacidades de resaltado, linting, formateo y validaci\u00f3n de sintaxis. Extensi\u00f3n Azure Terraform Esta extensi\u00f3n proporciona compatibilidad con comandos de Terraform, visualizaci\u00f3n de gr\u00e1ficos de recursos e integraci\u00f3n de CloudShell dentro de VS Code. Validaci\u00f3n de compilaci\u00f3n El siguiente script de ejemplo se puede usar para instalar terraform y un linter que luego verifica el formato y los errores comunes. #! /bin/bash set -e SCRIPT_DIR = $( dirname \" $BASH_SOURCE \" ) cd \" $SCRIPT_DIR \" TF_VERSION = 0 .12.4 TF_LINT_VERSION = 0 .9.1 echo -e \"\\n\\n>>> Installing Terraform 0.12\" # Install terraform tooling for linting terraform wget -q https://releases.hashicorp.com/terraform/ ${ TF_VERSION } /terraform_ ${ TF_VERSION } _linux_amd64.zip -O /tmp/terraform.zip sudo unzip -q -o -d /usr/local/bin/ /tmp/terraform.zip echo \"\" echo -e \"\\n\\n>>> Install tflint (3rd party)\" wget -q https://github.com/wata727/tflint/releases/download/v ${ TF_LINT_VERSION } /tflint_linux_amd64.zip -O /tmp/tflint.zip sudo unzip -q -o -d /usr/local/bin/ /tmp/tflint.zip echo -e \"\\n\\n>>> Terraform version\" terraform -version echo -e \"\\n\\n>>> Terraform Format (if this fails use 'terraform fmt -recursive' command to resolve\" terraform fmt -recursive -diff -check echo -e \"\\n\\n>>> tflint\" tflint echo -e \"\\n\\n>>> Terraform init\" terraform init echo -e \"\\n\\n>>> Terraform validate\" terraform validate Code Review Checklist Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de Terraform: Proveedores \u00bfTodos los proveedores utilizados en los scripts de terraform est\u00e1n versionados para evitar cambios importantes en el futuro? Organizaci\u00f3n del repositorio \u00bfEl c\u00f3digo se dividi\u00f3 en m\u00f3dulos reutilizables? \u00bfLos m\u00f3dulos se dividen en archivos .tf separados cuando corresponde? El repositorio contiene un README.md que describe la arquitectura aprovisionada. Si el c\u00f3digo de Terraform se mezcla con el c\u00f3digo fuente de la aplicaci\u00f3n, \u00bfel c\u00f3digo de Terraform se a\u00edsla en una carpeta dedicada? Estado de Terraform \u00bfEl proyecto Terraform est\u00e1 configurado con Azure Storage como back-end de estado remoto? \u00bfLa clave de la cuenta de almacenamiento de back-end de estado remoto almacen\u00f3 una ubicaci\u00f3n segura (por ejemplo, Azure Key Vault)? \u00bfEl proyecto est\u00e1 configurado para usar archivos de estado en funci\u00f3n del entorno y la canalizaci\u00f3n de implementaci\u00f3n est\u00e1 configurada para proporcionar el nombre del archivo de estado de forma din\u00e1mica? Variables Si la infraestructura ser\u00e1 diferente seg\u00fan el entorno, los par\u00e1metros espec\u00edficos del entorno se proporcionan a trav\u00e9s de un archivo .tfvars. Todas las variables tienen informaci\u00f3n de tipo. Todas las variables tienen una descripci\u00f3n que indica el prop\u00f3sito de la variable y su uso. Los valores predeterminados no se proporcionan para las variables que debe proporcionar un usuario. Testing \u00bfExisten pruebas unitarias y de integraci\u00f3n que cubran el c\u00f3digo de Terraform? Nomenclatura y estructura de c\u00f3digo \u00bfLas definiciones de recursos y las fuentes de datos se utilizan correctamente en los scripts de Terraform? resource: Indica a Terraform que la configuraci\u00f3n actual se encarga de gestionar el ciclo de vida del objeto data: indica a Terraform que solo desea obtener una referencia al objeto existente, pero no desea administrarlo como parte de esta configuraci\u00f3n Los nombres de los recursos comienzan con el nombre del proveedor que los contiene seguido de un gui\u00f3n bajo. \u00bfLa funci\u00f3n try solo se usa con referencias de atributos simples y funciones de conversi\u00f3n de tipos? El uso excesivo de la funci\u00f3n para suprimir errores conducir\u00e1 a una configuraci\u00f3n que es dif\u00edcil de entender y mantener. \u00bfLas funciones de conversi\u00f3n de tipos expl\u00edcitas utilizadas para normalizar los tipos solo se devuelven en las salidas del m\u00f3dulo? Las conversiones de tipos expl\u00edcitas rara vez son necesarias en Terraform porque convertir\u00e1 los tipos autom\u00e1ticamente cuando sea necesario. \u00bfLa propiedad Sensitive en el esquema se establece en true para los campos que contienen informaci\u00f3n confidencial? Recomendaciones generales Intente evitar anidar la subconfiguraci\u00f3n dentro de los recursos. Cree una secci\u00f3n de recursos separada para los recursos, aunque se puedan declarar como subelementos de un recurso. Nunca codifique ning\u00fan valor en la configuraci\u00f3n. Declararlos en la secci\u00f3n locals si se necesita una variable varias veces como un valor est\u00e1tico y son internos a la configuraci\u00f3n. Los nombres de los recursos creados en Azure no deben estar codificados ni ser est\u00e1ticos. Estos nombres deben ser din\u00e1micos y proporcionados por el usuario mediante un bloque de variables . Esto es especialmente \u00fatil en las pruebas unitarias cuando se ejecutan varias pruebas en paralelo para intentar crear recursos en Azure pero necesitan nombres diferentes. Es una buena pr\u00e1ctica generar el ID de los recursos creados en Azure desde la configuraci\u00f3n. Esto es especialmente \u00fatil cuando se agregan bloques din\u00e1micos para subelementos/elementos secundarios al recurso principal. Utilice el bloque required_providers para establecer la dependencia de los proveedores junto con la versi\u00f3n predeterminada. Utilice el bloque terraform para declarar la dependencia del proveedor con la versi\u00f3n exacta y tambi\u00e9n la versi\u00f3n CLI de terraform necesaria para la configuraci\u00f3n. Valide los valores de las variables proporcionados seg\u00fan el uso y el tipo de variable. La validaci\u00f3n se puede hacer a las variables agregando un bloque validation . Valide que los SKU de los componentes sean los correctos.","title":"Terraform Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/terraform/#terraform-code-reviews","text":"","title":"Terraform Code Reviews"},{"location":"revisiones%20de%20codigo/recetas/terraform/#guia-de-estilo","text":"Terraform style guide Los proyectos deben verificar los scripts de Terraform con herramientas automatizadas.","title":"Gu\u00eda de estilo"},{"location":"revisiones%20de%20codigo/recetas/terraform/#analisis-de-codigo-linting","text":"","title":"An\u00e1lisis de c\u00f3digo / Linting"},{"location":"revisiones%20de%20codigo/recetas/terraform/#tflint","text":"TFLint es un linter de Terraform centrado en posibles errores, mejores pr\u00e1cticas, etc. Una vez que TFLint est\u00e1 instalado en el entorno, se puede invocar mediante la extensi\u00f3n de terraform de VS Code.","title":"TFLint"},{"location":"revisiones%20de%20codigo/recetas/terraform/#vs-code-extensions","text":"","title":"VS Code Extensions"},{"location":"revisiones%20de%20codigo/recetas/terraform/#extension-terraform","text":"Esta extensi\u00f3n proporciona capacidades de resaltado, linting, formateo y validaci\u00f3n de sintaxis.","title":"Extensi\u00f3n Terraform"},{"location":"revisiones%20de%20codigo/recetas/terraform/#extension-azure-terraform","text":"Esta extensi\u00f3n proporciona compatibilidad con comandos de Terraform, visualizaci\u00f3n de gr\u00e1ficos de recursos e integraci\u00f3n de CloudShell dentro de VS Code.","title":"Extensi\u00f3n Azure Terraform"},{"location":"revisiones%20de%20codigo/recetas/terraform/#validacion-de-compilacion","text":"El siguiente script de ejemplo se puede usar para instalar terraform y un linter que luego verifica el formato y los errores comunes. #! /bin/bash set -e SCRIPT_DIR = $( dirname \" $BASH_SOURCE \" ) cd \" $SCRIPT_DIR \" TF_VERSION = 0 .12.4 TF_LINT_VERSION = 0 .9.1 echo -e \"\\n\\n>>> Installing Terraform 0.12\" # Install terraform tooling for linting terraform wget -q https://releases.hashicorp.com/terraform/ ${ TF_VERSION } /terraform_ ${ TF_VERSION } _linux_amd64.zip -O /tmp/terraform.zip sudo unzip -q -o -d /usr/local/bin/ /tmp/terraform.zip echo \"\" echo -e \"\\n\\n>>> Install tflint (3rd party)\" wget -q https://github.com/wata727/tflint/releases/download/v ${ TF_LINT_VERSION } /tflint_linux_amd64.zip -O /tmp/tflint.zip sudo unzip -q -o -d /usr/local/bin/ /tmp/tflint.zip echo -e \"\\n\\n>>> Terraform version\" terraform -version echo -e \"\\n\\n>>> Terraform Format (if this fails use 'terraform fmt -recursive' command to resolve\" terraform fmt -recursive -diff -check echo -e \"\\n\\n>>> tflint\" tflint echo -e \"\\n\\n>>> Terraform init\" terraform init echo -e \"\\n\\n>>> Terraform validate\" terraform validate","title":"Validaci\u00f3n de compilaci\u00f3n"},{"location":"revisiones%20de%20codigo/recetas/terraform/#code-review-checklist","text":"Adem\u00e1s de la Checklist de Code Review (), tambi\u00e9n debe buscar estos elementos de revisi\u00f3n de c\u00f3digo espec\u00edficos de Terraform:","title":"Code Review Checklist"},{"location":"revisiones%20de%20codigo/recetas/terraform/#proveedores","text":"\u00bfTodos los proveedores utilizados en los scripts de terraform est\u00e1n versionados para evitar cambios importantes en el futuro?","title":"Proveedores"},{"location":"revisiones%20de%20codigo/recetas/terraform/#organizacion-del-repositorio","text":"\u00bfEl c\u00f3digo se dividi\u00f3 en m\u00f3dulos reutilizables? \u00bfLos m\u00f3dulos se dividen en archivos .tf separados cuando corresponde? El repositorio contiene un README.md que describe la arquitectura aprovisionada. Si el c\u00f3digo de Terraform se mezcla con el c\u00f3digo fuente de la aplicaci\u00f3n, \u00bfel c\u00f3digo de Terraform se a\u00edsla en una carpeta dedicada?","title":"Organizaci\u00f3n del repositorio"},{"location":"revisiones%20de%20codigo/recetas/terraform/#estado-de-terraform","text":"\u00bfEl proyecto Terraform est\u00e1 configurado con Azure Storage como back-end de estado remoto? \u00bfLa clave de la cuenta de almacenamiento de back-end de estado remoto almacen\u00f3 una ubicaci\u00f3n segura (por ejemplo, Azure Key Vault)? \u00bfEl proyecto est\u00e1 configurado para usar archivos de estado en funci\u00f3n del entorno y la canalizaci\u00f3n de implementaci\u00f3n est\u00e1 configurada para proporcionar el nombre del archivo de estado de forma din\u00e1mica?","title":"Estado de Terraform"},{"location":"revisiones%20de%20codigo/recetas/terraform/#variables","text":"Si la infraestructura ser\u00e1 diferente seg\u00fan el entorno, los par\u00e1metros espec\u00edficos del entorno se proporcionan a trav\u00e9s de un archivo .tfvars. Todas las variables tienen informaci\u00f3n de tipo. Todas las variables tienen una descripci\u00f3n que indica el prop\u00f3sito de la variable y su uso. Los valores predeterminados no se proporcionan para las variables que debe proporcionar un usuario.","title":"Variables"},{"location":"revisiones%20de%20codigo/recetas/terraform/#testing","text":"\u00bfExisten pruebas unitarias y de integraci\u00f3n que cubran el c\u00f3digo de Terraform?","title":"Testing"},{"location":"revisiones%20de%20codigo/recetas/terraform/#nomenclatura-y-estructura-de-codigo","text":"\u00bfLas definiciones de recursos y las fuentes de datos se utilizan correctamente en los scripts de Terraform? resource: Indica a Terraform que la configuraci\u00f3n actual se encarga de gestionar el ciclo de vida del objeto data: indica a Terraform que solo desea obtener una referencia al objeto existente, pero no desea administrarlo como parte de esta configuraci\u00f3n Los nombres de los recursos comienzan con el nombre del proveedor que los contiene seguido de un gui\u00f3n bajo. \u00bfLa funci\u00f3n try solo se usa con referencias de atributos simples y funciones de conversi\u00f3n de tipos? El uso excesivo de la funci\u00f3n para suprimir errores conducir\u00e1 a una configuraci\u00f3n que es dif\u00edcil de entender y mantener. \u00bfLas funciones de conversi\u00f3n de tipos expl\u00edcitas utilizadas para normalizar los tipos solo se devuelven en las salidas del m\u00f3dulo? Las conversiones de tipos expl\u00edcitas rara vez son necesarias en Terraform porque convertir\u00e1 los tipos autom\u00e1ticamente cuando sea necesario. \u00bfLa propiedad Sensitive en el esquema se establece en true para los campos que contienen informaci\u00f3n confidencial?","title":"Nomenclatura y estructura de c\u00f3digo"},{"location":"revisiones%20de%20codigo/recetas/terraform/#recomendaciones-generales","text":"Intente evitar anidar la subconfiguraci\u00f3n dentro de los recursos. Cree una secci\u00f3n de recursos separada para los recursos, aunque se puedan declarar como subelementos de un recurso. Nunca codifique ning\u00fan valor en la configuraci\u00f3n. Declararlos en la secci\u00f3n locals si se necesita una variable varias veces como un valor est\u00e1tico y son internos a la configuraci\u00f3n. Los nombres de los recursos creados en Azure no deben estar codificados ni ser est\u00e1ticos. Estos nombres deben ser din\u00e1micos y proporcionados por el usuario mediante un bloque de variables . Esto es especialmente \u00fatil en las pruebas unitarias cuando se ejecutan varias pruebas en paralelo para intentar crear recursos en Azure pero necesitan nombres diferentes. Es una buena pr\u00e1ctica generar el ID de los recursos creados en Azure desde la configuraci\u00f3n. Esto es especialmente \u00fatil cuando se agregan bloques din\u00e1micos para subelementos/elementos secundarios al recurso principal. Utilice el bloque required_providers para establecer la dependencia de los proveedores junto con la versi\u00f3n predeterminada. Utilice el bloque terraform para declarar la dependencia del proveedor con la versi\u00f3n exacta y tambi\u00e9n la versi\u00f3n CLI de terraform necesaria para la configuraci\u00f3n. Valide los valores de las variables proporcionados seg\u00fan el uso y el tipo de variable. La validaci\u00f3n se puede hacer a las variables agregando un bloque validation . Valide que los SKU de los componentes sean los correctos.","title":"Recomendaciones generales"},{"location":"seguridad/","text":"Seguridad Los desarrolladores deben adherirse a las pr\u00e1cticas est\u00e1ndar recomendadas por la industria para el dise\u00f1o y la implementaci\u00f3n seguros del c\u00f3digo. Esto significa que nuestros ingenieros deben entender los 10 principales riesgos de seguridad de las aplicaciones web de la OWASP , as\u00ed como la forma de mitigar tantos de ellos como sea posible, utilizando los recursos siguientes. Si busca una forma r\u00e1pida de empezar a evaluar su aplicaci\u00f3n o dise\u00f1o, consulte el documento \"Referencia r\u00e1pida de pr\u00e1cticas de codificaci\u00f3n seguras\" que aparece a continuaci\u00f3n, que contiene una lista de comprobaci\u00f3n detallada de conceptos de alto nivel que puede validar que se est\u00e1n realizando correctamente. Esta checklist cubre muchos errores comunes asociados con la lista OWASP Top 10, y deber\u00eda ser la cantidad m\u00ednima de esfuerzo que se pone en la seguridad. Solicitud de revisiones de seguridad Cuando solicite una revisi\u00f3n de seguridad para su aplicaci\u00f3n, aseg\u00farese de que se ha familiarizado con las reglas de participaci\u00f3n . Esto le ayudar\u00e1 a preparar la aplicaci\u00f3n para la prueba, as\u00ed como a entender los l\u00edmites del alcance de la misma. Referencias r\u00e1pidas Referencia r\u00e1pida sobre pr\u00e1cticas de codificaci\u00f3n seguras Referencia r\u00e1pida sobre la seguridad de las aplicaciones web Mentalidad de seguridad/creaci\u00f3n de un programa de seguridad Inicio r\u00e1pido Detecci\u00f3n automatizada de secretos Seguridad de Azure DevOps Pr\u00e1cticas de ingenier\u00eda de seguridad de DevSecOps Visi\u00f3n general de la protecci\u00f3n de datos de Azure DevOps Seguridad e identidad en Azure DevOps DevSecOps Introduzca la seguridad en su proyecto en las primeras fases. La secci\u00f3n DevSecOps cubre las pr\u00e1cticas de seguridad, la automatizaci\u00f3n, las herramientas y los marcos de trabajo como parte de la aplicaci\u00f3n CI. OWASP Cheat Sheets Nota: OWASP est\u00e1 considerado como el est\u00e1ndar en informaci\u00f3n sobre seguridad inform\u00e1tica. OWASP mantiene una extensa serie de cheat sheets que cubren todos los Top 10 de OWASP y m\u00e1s. A continuaci\u00f3n, se han resumido los m\u00e1s relevantes. Para ver todas las cheat sheets, consulta Cheat Sheet Index . Autorizaci\u00f3n An\u00e1lisis de superficie de ataque Content Security Policy (CSP) Prevenci\u00f3n Cross-Site Request Forgery (CSRF) Prevenci\u00f3n de secuencias de comandos en sitios cruzados (XSS) Almacenamiento criptogr\u00e1fico Deserializaci\u00f3n Seguridad de Docker/Kubernetes (k8s) Validaci\u00f3n de entradas Gesti\u00f3n de claves Defensa contra la inyecci\u00f3n de comandos del sistema operativo Ejemplos de parametrizaci\u00f3n de consultas Prevenci\u00f3n de la falsificaci\u00f3n de solicitudes del lado del servidor Prevenci\u00f3n de inyecciones SQL Redirecciones y reenv\u00edos no validados Seguridad de los servicios web Seguridad XML Herramientas Nota: Aunque algunas herramientas son agn\u00f3sticas, la siguiente lista est\u00e1 orientada a la seguridad de Cloud Native, con un enfoque en Kubernetes. Escaneo de vulnerabilidad SonarCloud : se integra con Azure Devops con el clic de un bot\u00f3n. Snyk Trivy Cloudsploit Anchore Otras herramientas de OWASP Vea por qu\u00e9 debe comprobar las vulnerabilidades en todas las capas de la pila , as\u00ed como un par de consejos \u00fatiles para reducir la superficie de los ataques. Seguridad en tiempo de ejecuci\u00f3n Falco Tracee Kubelinter : puede que no se califique completamente como seguridad en tiempo de ejecuci\u00f3n, pero ayuda a asegurar que est\u00e1 habilitando las mejores pr\u00e1cticas. Autorizaci\u00f3n binaria La autorizaci\u00f3n binaria puede ocurrir tanto en la capa de registro de Docker, como en tiempo de ejecuci\u00f3n. La comprobaci\u00f3n de la autorizaci\u00f3n asegura que la imagen est\u00e1 firmada por una autoridad de confianza. Esto puede ocurrir tanto para im\u00e1genes de terceros como para im\u00e1genes internas. Llevando esto un paso m\u00e1s all\u00e1, la firma deber\u00eda ocurrir s\u00f3lo en im\u00e1genes donde todo el c\u00f3digo ha sido revisado y aprobado. La autorizaci\u00f3n binaria puede reducir tanto el impacto de los da\u00f1os causados por un entorno de alojamiento comprometido, como los da\u00f1os causados por personal interno malintencionado. Harbor Operador disponible Portieris Notary : harbor aprovecha Notary internamente. TUF Otra seguridad K8s OPA , Gatekeeper y la biblioteca Gatekeeper cert-manager para un f\u00e1cil aprovisionamiento de certificados y rotaci\u00f3n autom\u00e1tica. Habilite r\u00e1pidamente mTLS entre sus microservicios con Linkerd . Enlaces \u00fatiles Gu\u00eda de requisitos no funcionales","title":"Seguridad"},{"location":"seguridad/#seguridad","text":"Los desarrolladores deben adherirse a las pr\u00e1cticas est\u00e1ndar recomendadas por la industria para el dise\u00f1o y la implementaci\u00f3n seguros del c\u00f3digo. Esto significa que nuestros ingenieros deben entender los 10 principales riesgos de seguridad de las aplicaciones web de la OWASP , as\u00ed como la forma de mitigar tantos de ellos como sea posible, utilizando los recursos siguientes. Si busca una forma r\u00e1pida de empezar a evaluar su aplicaci\u00f3n o dise\u00f1o, consulte el documento \"Referencia r\u00e1pida de pr\u00e1cticas de codificaci\u00f3n seguras\" que aparece a continuaci\u00f3n, que contiene una lista de comprobaci\u00f3n detallada de conceptos de alto nivel que puede validar que se est\u00e1n realizando correctamente. Esta checklist cubre muchos errores comunes asociados con la lista OWASP Top 10, y deber\u00eda ser la cantidad m\u00ednima de esfuerzo que se pone en la seguridad.","title":"Seguridad"},{"location":"seguridad/#solicitud-de-revisiones-de-seguridad","text":"Cuando solicite una revisi\u00f3n de seguridad para su aplicaci\u00f3n, aseg\u00farese de que se ha familiarizado con las reglas de participaci\u00f3n . Esto le ayudar\u00e1 a preparar la aplicaci\u00f3n para la prueba, as\u00ed como a entender los l\u00edmites del alcance de la misma.","title":"Solicitud de revisiones de seguridad"},{"location":"seguridad/#referencias-rapidas","text":"Referencia r\u00e1pida sobre pr\u00e1cticas de codificaci\u00f3n seguras Referencia r\u00e1pida sobre la seguridad de las aplicaciones web Mentalidad de seguridad/creaci\u00f3n de un programa de seguridad Inicio r\u00e1pido Detecci\u00f3n automatizada de secretos","title":"Referencias r\u00e1pidas"},{"location":"seguridad/#seguridad-de-azure-devops","text":"Pr\u00e1cticas de ingenier\u00eda de seguridad de DevSecOps Visi\u00f3n general de la protecci\u00f3n de datos de Azure DevOps Seguridad e identidad en Azure DevOps","title":"Seguridad de Azure DevOps"},{"location":"seguridad/#devsecops","text":"Introduzca la seguridad en su proyecto en las primeras fases. La secci\u00f3n DevSecOps cubre las pr\u00e1cticas de seguridad, la automatizaci\u00f3n, las herramientas y los marcos de trabajo como parte de la aplicaci\u00f3n CI.","title":"DevSecOps"},{"location":"seguridad/#owasp-cheat-sheets","text":"Nota: OWASP est\u00e1 considerado como el est\u00e1ndar en informaci\u00f3n sobre seguridad inform\u00e1tica. OWASP mantiene una extensa serie de cheat sheets que cubren todos los Top 10 de OWASP y m\u00e1s. A continuaci\u00f3n, se han resumido los m\u00e1s relevantes. Para ver todas las cheat sheets, consulta Cheat Sheet Index . Autorizaci\u00f3n An\u00e1lisis de superficie de ataque Content Security Policy (CSP) Prevenci\u00f3n Cross-Site Request Forgery (CSRF) Prevenci\u00f3n de secuencias de comandos en sitios cruzados (XSS) Almacenamiento criptogr\u00e1fico Deserializaci\u00f3n Seguridad de Docker/Kubernetes (k8s) Validaci\u00f3n de entradas Gesti\u00f3n de claves Defensa contra la inyecci\u00f3n de comandos del sistema operativo Ejemplos de parametrizaci\u00f3n de consultas Prevenci\u00f3n de la falsificaci\u00f3n de solicitudes del lado del servidor Prevenci\u00f3n de inyecciones SQL Redirecciones y reenv\u00edos no validados Seguridad de los servicios web Seguridad XML","title":"OWASP Cheat Sheets"},{"location":"seguridad/#herramientas","text":"Nota: Aunque algunas herramientas son agn\u00f3sticas, la siguiente lista est\u00e1 orientada a la seguridad de Cloud Native, con un enfoque en Kubernetes. Escaneo de vulnerabilidad SonarCloud : se integra con Azure Devops con el clic de un bot\u00f3n. Snyk Trivy Cloudsploit Anchore Otras herramientas de OWASP Vea por qu\u00e9 debe comprobar las vulnerabilidades en todas las capas de la pila , as\u00ed como un par de consejos \u00fatiles para reducir la superficie de los ataques. Seguridad en tiempo de ejecuci\u00f3n Falco Tracee Kubelinter : puede que no se califique completamente como seguridad en tiempo de ejecuci\u00f3n, pero ayuda a asegurar que est\u00e1 habilitando las mejores pr\u00e1cticas. Autorizaci\u00f3n binaria La autorizaci\u00f3n binaria puede ocurrir tanto en la capa de registro de Docker, como en tiempo de ejecuci\u00f3n. La comprobaci\u00f3n de la autorizaci\u00f3n asegura que la imagen est\u00e1 firmada por una autoridad de confianza. Esto puede ocurrir tanto para im\u00e1genes de terceros como para im\u00e1genes internas. Llevando esto un paso m\u00e1s all\u00e1, la firma deber\u00eda ocurrir s\u00f3lo en im\u00e1genes donde todo el c\u00f3digo ha sido revisado y aprobado. La autorizaci\u00f3n binaria puede reducir tanto el impacto de los da\u00f1os causados por un entorno de alojamiento comprometido, como los da\u00f1os causados por personal interno malintencionado. Harbor Operador disponible Portieris Notary : harbor aprovecha Notary internamente. TUF Otra seguridad K8s OPA , Gatekeeper y la biblioteca Gatekeeper cert-manager para un f\u00e1cil aprovisionamiento de certificados y rotaci\u00f3n autom\u00e1tica. Habilite r\u00e1pidamente mTLS entre sus microservicios con Linkerd .","title":"Herramientas"},{"location":"seguridad/#enlaces-utiles","text":"Gu\u00eda de requisitos no funcionales","title":"Enlaces \u00fatiles"},{"location":"seguridad/rules-of-engagement/","text":"Reglas de participaci\u00f3n Al realizar el an\u00e1lisis de seguridad, se espera que el probador siga las reglas que se exponen a continuaci\u00f3n. Esto es para estandarizar el alcance de las pruebas de aplicaciones y proporcionar una conciencia concreta de lo que se considera \"fuera del alcance\" para el an\u00e1lisis de seguridad. Reglas de participaci\u00f3n - Para los que solicitan la revisi\u00f3n WAF pueden estar instalados y configurados, pero no permiten ning\u00fan bloqueo autom\u00e1tico. Esto puede ralentizar mucho a la persona que realiza la prueba. Del mismo modo, si un servicio se est\u00e1 ejecutando en una m\u00e1quina virtual, aseg\u00farese de que servicios como fail2ban est\u00e9n desactivados. No puede realizar cambios en la aplicaci\u00f3n en ejecuci\u00f3n hasta que la prueba haya finalizado. Esto es para evitar que se rompa accidentalmente un ataque en curso que de otro modo ser\u00eda v\u00e1lido. Los resultados de la revisi\u00f3n no se consideran \"definitivos\". Un equipo de seguridad orquestado por la organizaci\u00f3n debe realizar siempre una revisi\u00f3n de seguridad antes de pasar una aplicaci\u00f3n a producci\u00f3n. Reglas de participaci\u00f3n - Para aquellos que realizan pruebas No intente realizar ataques de denegaci\u00f3n de servicio o de otra manera de colapsar los servicios. Se tolera el escaneo activo pesado, pero no se permiten los derribos deliberados. No interactuar con seres humanos. La suplantaci\u00f3n de credenciales u otros ataques del lado del cliente est\u00e1n prohibidos. Se anima a detallar los ataques XSS y similares como parte de la prueba, pero no los aproveche contra usuarios o clientes internos. Ataque desde un \u00fanico punto. Especialmente si la aplicaci\u00f3n est\u00e1 actualmente en manos del cliente, proporcione la direcci\u00f3n IP o el nombre del host atacante para evitar que salten las alarmas.","title":"Reglas de participaci\u00f3n"},{"location":"seguridad/rules-of-engagement/#reglas-de-participacion","text":"Al realizar el an\u00e1lisis de seguridad, se espera que el probador siga las reglas que se exponen a continuaci\u00f3n. Esto es para estandarizar el alcance de las pruebas de aplicaciones y proporcionar una conciencia concreta de lo que se considera \"fuera del alcance\" para el an\u00e1lisis de seguridad.","title":"Reglas de participaci\u00f3n"},{"location":"seguridad/rules-of-engagement/#reglas-de-participacion-para-los-que-solicitan-la-revision","text":"WAF pueden estar instalados y configurados, pero no permiten ning\u00fan bloqueo autom\u00e1tico. Esto puede ralentizar mucho a la persona que realiza la prueba. Del mismo modo, si un servicio se est\u00e1 ejecutando en una m\u00e1quina virtual, aseg\u00farese de que servicios como fail2ban est\u00e9n desactivados. No puede realizar cambios en la aplicaci\u00f3n en ejecuci\u00f3n hasta que la prueba haya finalizado. Esto es para evitar que se rompa accidentalmente un ataque en curso que de otro modo ser\u00eda v\u00e1lido. Los resultados de la revisi\u00f3n no se consideran \"definitivos\". Un equipo de seguridad orquestado por la organizaci\u00f3n debe realizar siempre una revisi\u00f3n de seguridad antes de pasar una aplicaci\u00f3n a producci\u00f3n.","title":"Reglas de participaci\u00f3n - Para los que solicitan la revisi\u00f3n"},{"location":"seguridad/rules-of-engagement/#reglas-de-participacion-para-aquellos-que-realizan-pruebas","text":"No intente realizar ataques de denegaci\u00f3n de servicio o de otra manera de colapsar los servicios. Se tolera el escaneo activo pesado, pero no se permiten los derribos deliberados. No interactuar con seres humanos. La suplantaci\u00f3n de credenciales u otros ataques del lado del cliente est\u00e1n prohibidos. Se anima a detallar los ataques XSS y similares como parte de la prueba, pero no los aproveche contra usuarios o clientes internos. Ataque desde un \u00fanico punto. Especialmente si la aplicaci\u00f3n est\u00e1 actualmente en manos del cliente, proporcione la direcci\u00f3n IP o el nombre del host atacante para evitar que salten las alarmas.","title":"Reglas de participaci\u00f3n - Para aquellos que realizan pruebas"},{"location":"seguridad/secret-detection/","text":"Detecci\u00f3n de secretos Es importante asegurar que los secretos no lleguen a la base de c\u00f3digo y comprometan la seguridad de los datos de nuestra aplicaci\u00f3n. La mejor manera de hacerlo es introduciendo una forma sencilla y f\u00e1cil de detectar secretos durante su desarrollo, y en sus pipelines CI/CD. Esta secci\u00f3n describe c\u00f3mo podemos utilizar el framework de c\u00f3digo abierto Yelp Detect-Secrets . La herramienta Yelp Detect-Secrets utiliza un modelo de Entrop\u00eda de Shannon para detectar secretos en las bases de c\u00f3digo y evita que se introduzcan nuevos secretos. Pre-Commit Hook para detectar secretos El pre-commit hook de Detect-Secrets es una herramienta que evita que los secretos entren en el c\u00f3digo en una de las primeras etapas del desarrollo, evitando que el secreto quede en el historial de Git. Configuraci\u00f3n del entorno A continuaci\u00f3n se presentan dos formas de configurar el entorno en funci\u00f3n de su caso de uso. Pre-Commit Hook dentro del Repo existente Un simple script de instalaci\u00f3n arranca los repos existentes con pre-commit hooks y scripts para ayudar a gestionar el ciclo de vida de la detecci\u00f3n de secretos Pre-Commit Hook con nuevo repo Contiene todo lo anterior, adem\u00e1s de soporte para contenedores de desarrollo utilizando la imagen universal de contenedores de desarrollo de Github. Tambi\u00e9n incluye un flujo de trabajo de GitHub para realizar adicionalmente la detecci\u00f3n de secretos dentro de los pull requests Extensi\u00f3n de Azure DevOps para detectar secretos Esta extensi\u00f3n escanea la base de c\u00f3digo en busca de secretos usando sofisticados algoritmos como la entrop\u00eda de Shannon y reporta los hallazgos en el modelo Azure DevOps Pipeline para permitir una r\u00e1pida retroalimentaci\u00f3n y respuesta de los equipos de desarrollo. Como extensi\u00f3n desplegada en la canalizaci\u00f3n CI/CD, Detect Secrets no depende de que los desarrolladores cambien su entorno de desarrollo. Dependiendo de c\u00f3mo est\u00e9 configurada su canalizaci\u00f3n, puede llevar a situaciones en las que los secretos se filtren al repositorio antes de ser detectados. La filtraci\u00f3n de secretos en el repositorio requiere una limpieza, por lo que se recomienda el uso de protecciones de precommit y CI/CD. Configuraci\u00f3n Actualmente esta extensi\u00f3n est\u00e1 en vista previa privada y para obtener acceso a ella, contacta con un miembro del \u00c1rea de Soluciones de Seguridad enviando un correo electr\u00f3nico a csesecuritysa@microsoft.com. A continuaci\u00f3n se muestra la configuraci\u00f3n YAML para esta herramienta A\u00f1ada el plugin Detect-Secrets desde el asistente de tareas y configure la herramienta para que apunte a su ubicaci\u00f3n de origen y al archivo de la lista de palabras (lista permitida). La ubicaci\u00f3n de la fuente por defecto apuntar\u00e1 al directorio ra\u00edz de sus repositorios. - task : CSEDetectSecrets@1 inputs : sourceLocation : '$(Build.Repository.LocalPath)' usingwordListFile : true wordListFile : 'allow-list.txt' Para informar sobre los resultados del escaneo de detect-secrets a\u00f1ada lo siguiente debajo de la tarea de Yelp: - task : PublishTestResults@2 displayName : 'Publish Test Results' inputs : testResultsFormat : 'JUnit' testResultsFiles : 'report.xml' searchFolder : '$(Build.Repository.LocalPath)' Notas sobre los argumentos del esc\u00e1ner El escaneo invocar\u00e1 el esc\u00e1ner detect-secrets con los argumentos -C <ruta al directorio ra\u00edz> scan --force-use-all-plugins . Si desea dirigir la herramienta a un directorio espec\u00edfico, a\u00f1ada la ubicaci\u00f3n deseada en el YAML, por ejemplo, $(Build.Repository.LocalPath)/desired_path y tendr\u00e1 que actualizar la ruta searchFolder: $(Build.Repository.LocalPath) para ver los resultados del escaneo. Si el pipeline est\u00e1 configurado sin que scanNonGitFiles est\u00e9 configurado para su pipeline, entonces el argumento --all-files se establecer\u00e1 para escanear los artefactos git en su pipeline tambi\u00e9n. setFailureasWarning se establecer\u00e1 en false a menos que se indique lo contrario, lo que har\u00e1 que la tarea falle si se produce un hallazgo. Notas sobre el Argumento de Escaneo Allow-List Para mitigar los falsos positivos puede a\u00f1adir una lista de permitidos. Primero debe a\u00f1adir una lista permitida en su repositorio; se trata de un archivo de texto con un nombre de su elecci\u00f3n que contiene una lista de secretos permitidos separados por un retorno de carro. A continuaci\u00f3n, debe marcar la casilla \"\u00bfUtilizar un archivo de lista de palabras?\" y luego rellenar el campo \"Ubicaci\u00f3n del archivo de lista de palabras secretas en el repositorio\" con su nueva ubicaci\u00f3n de archivo. Guarde y ejecute la canalizaci\u00f3n. Si se encuentra con m\u00e1s falsos positivos en su canalizaci\u00f3n, simplemente a\u00f1\u00e1dalos a su nuevo archivo de lista permitida. Informes Despu\u00e9s de que la herramienta detect-secrets se haya ejecutado en el pipeline, fallar\u00e1 en rojo con el n\u00famero de secretos encontrados en el repositorio, o pasar\u00e1 en verde con ning\u00fan secreto encontrado. Para ver los resultados detallados completos, navegue hasta los resultados de la ejecuci\u00f3n de detect-secrets haciendo clic en el n\u00famero de job que acaba de ejecutarse. Al hacer clic en el campo <run #> se accede a una p\u00e1gina de Azure DevOps que contiene las siguientes pesta\u00f1as: \"Resumen\", \"Tests\", \"An\u00e1lisis\". Si seleccionas la pesta\u00f1a \"Tests\" iras a un resumen que muestra el archivo(s) sospechoso(s), el n\u00famero de l\u00ednea, y una versi\u00f3n hash del secreto junto con cu\u00e1ntos secretos fueron encontrados en el repositorio clasificado como \"<#> Total de pruebas\". Escenario nominal para la utilizaci\u00f3n de la herramienta Un resultado nominal para garantizar que no se introduzcan secretos en el c\u00f3digo fuente es utilizar estas dos herramientas. Los equipos pueden aplicar Detect Secrets a la canalizaci\u00f3n CI/CD para proteger el proyecto independientemente de las pr\u00e1cticas de desarrollo de los colaboradores individuales. Los individuos pueden aplicar Detect Secrets como una comprobaci\u00f3n previa al env\u00edo para reducir la posibilidad de que un accidente haga que un secreto se vincule al repositorio del proyecto. Siguiendo ambas pr\u00e1cticas se obtiene la mejor cobertura y siguiendo las instrucciones anteriores se puede reutilizar completamente el mismo archivo world-list de pre-commit en la extensi\u00f3n CI/CD. Lecturas adicionales Yelp/detect-secrets : Una forma empresarial de detectar y prevenir secretos en el c\u00f3digo.","title":"Detecci\u00f3n de secretos"},{"location":"seguridad/secret-detection/#deteccion-de-secretos","text":"Es importante asegurar que los secretos no lleguen a la base de c\u00f3digo y comprometan la seguridad de los datos de nuestra aplicaci\u00f3n. La mejor manera de hacerlo es introduciendo una forma sencilla y f\u00e1cil de detectar secretos durante su desarrollo, y en sus pipelines CI/CD. Esta secci\u00f3n describe c\u00f3mo podemos utilizar el framework de c\u00f3digo abierto Yelp Detect-Secrets . La herramienta Yelp Detect-Secrets utiliza un modelo de Entrop\u00eda de Shannon para detectar secretos en las bases de c\u00f3digo y evita que se introduzcan nuevos secretos.","title":"Detecci\u00f3n de secretos"},{"location":"seguridad/secret-detection/#pre-commit-hook-para-detectar-secretos","text":"El pre-commit hook de Detect-Secrets es una herramienta que evita que los secretos entren en el c\u00f3digo en una de las primeras etapas del desarrollo, evitando que el secreto quede en el historial de Git.","title":"Pre-Commit Hook para detectar secretos"},{"location":"seguridad/secret-detection/#configuracion-del-entorno","text":"A continuaci\u00f3n se presentan dos formas de configurar el entorno en funci\u00f3n de su caso de uso. Pre-Commit Hook dentro del Repo existente Un simple script de instalaci\u00f3n arranca los repos existentes con pre-commit hooks y scripts para ayudar a gestionar el ciclo de vida de la detecci\u00f3n de secretos Pre-Commit Hook con nuevo repo Contiene todo lo anterior, adem\u00e1s de soporte para contenedores de desarrollo utilizando la imagen universal de contenedores de desarrollo de Github. Tambi\u00e9n incluye un flujo de trabajo de GitHub para realizar adicionalmente la detecci\u00f3n de secretos dentro de los pull requests","title":"Configuraci\u00f3n del entorno"},{"location":"seguridad/secret-detection/#extension-de-azure-devops-para-detectar-secretos","text":"Esta extensi\u00f3n escanea la base de c\u00f3digo en busca de secretos usando sofisticados algoritmos como la entrop\u00eda de Shannon y reporta los hallazgos en el modelo Azure DevOps Pipeline para permitir una r\u00e1pida retroalimentaci\u00f3n y respuesta de los equipos de desarrollo. Como extensi\u00f3n desplegada en la canalizaci\u00f3n CI/CD, Detect Secrets no depende de que los desarrolladores cambien su entorno de desarrollo. Dependiendo de c\u00f3mo est\u00e9 configurada su canalizaci\u00f3n, puede llevar a situaciones en las que los secretos se filtren al repositorio antes de ser detectados. La filtraci\u00f3n de secretos en el repositorio requiere una limpieza, por lo que se recomienda el uso de protecciones de precommit y CI/CD.","title":"Extensi\u00f3n de Azure DevOps para detectar secretos"},{"location":"seguridad/secret-detection/#configuracion","text":"Actualmente esta extensi\u00f3n est\u00e1 en vista previa privada y para obtener acceso a ella, contacta con un miembro del \u00c1rea de Soluciones de Seguridad enviando un correo electr\u00f3nico a csesecuritysa@microsoft.com.","title":"Configuraci\u00f3n"},{"location":"seguridad/secret-detection/#a-continuacion-se-muestra-la-configuracion-yaml-para-esta-herramienta","text":"A\u00f1ada el plugin Detect-Secrets desde el asistente de tareas y configure la herramienta para que apunte a su ubicaci\u00f3n de origen y al archivo de la lista de palabras (lista permitida). La ubicaci\u00f3n de la fuente por defecto apuntar\u00e1 al directorio ra\u00edz de sus repositorios. - task : CSEDetectSecrets@1 inputs : sourceLocation : '$(Build.Repository.LocalPath)' usingwordListFile : true wordListFile : 'allow-list.txt' Para informar sobre los resultados del escaneo de detect-secrets a\u00f1ada lo siguiente debajo de la tarea de Yelp: - task : PublishTestResults@2 displayName : 'Publish Test Results' inputs : testResultsFormat : 'JUnit' testResultsFiles : 'report.xml' searchFolder : '$(Build.Repository.LocalPath)'","title":"A continuaci\u00f3n se muestra la configuraci\u00f3n YAML para esta herramienta"},{"location":"seguridad/secret-detection/#notas-sobre-los-argumentos-del-escaner","text":"El escaneo invocar\u00e1 el esc\u00e1ner detect-secrets con los argumentos -C <ruta al directorio ra\u00edz> scan --force-use-all-plugins . Si desea dirigir la herramienta a un directorio espec\u00edfico, a\u00f1ada la ubicaci\u00f3n deseada en el YAML, por ejemplo, $(Build.Repository.LocalPath)/desired_path y tendr\u00e1 que actualizar la ruta searchFolder: $(Build.Repository.LocalPath) para ver los resultados del escaneo. Si el pipeline est\u00e1 configurado sin que scanNonGitFiles est\u00e9 configurado para su pipeline, entonces el argumento --all-files se establecer\u00e1 para escanear los artefactos git en su pipeline tambi\u00e9n. setFailureasWarning se establecer\u00e1 en false a menos que se indique lo contrario, lo que har\u00e1 que la tarea falle si se produce un hallazgo.","title":"Notas sobre los argumentos del esc\u00e1ner"},{"location":"seguridad/secret-detection/#notas-sobre-el-argumento-de-escaneo-allow-list","text":"Para mitigar los falsos positivos puede a\u00f1adir una lista de permitidos. Primero debe a\u00f1adir una lista permitida en su repositorio; se trata de un archivo de texto con un nombre de su elecci\u00f3n que contiene una lista de secretos permitidos separados por un retorno de carro. A continuaci\u00f3n, debe marcar la casilla \"\u00bfUtilizar un archivo de lista de palabras?\" y luego rellenar el campo \"Ubicaci\u00f3n del archivo de lista de palabras secretas en el repositorio\" con su nueva ubicaci\u00f3n de archivo. Guarde y ejecute la canalizaci\u00f3n. Si se encuentra con m\u00e1s falsos positivos en su canalizaci\u00f3n, simplemente a\u00f1\u00e1dalos a su nuevo archivo de lista permitida.","title":"Notas sobre el Argumento de Escaneo Allow-List"},{"location":"seguridad/secret-detection/#informes","text":"Despu\u00e9s de que la herramienta detect-secrets se haya ejecutado en el pipeline, fallar\u00e1 en rojo con el n\u00famero de secretos encontrados en el repositorio, o pasar\u00e1 en verde con ning\u00fan secreto encontrado. Para ver los resultados detallados completos, navegue hasta los resultados de la ejecuci\u00f3n de detect-secrets haciendo clic en el n\u00famero de job que acaba de ejecutarse. Al hacer clic en el campo <run #> se accede a una p\u00e1gina de Azure DevOps que contiene las siguientes pesta\u00f1as: \"Resumen\", \"Tests\", \"An\u00e1lisis\". Si seleccionas la pesta\u00f1a \"Tests\" iras a un resumen que muestra el archivo(s) sospechoso(s), el n\u00famero de l\u00ednea, y una versi\u00f3n hash del secreto junto con cu\u00e1ntos secretos fueron encontrados en el repositorio clasificado como \"<#> Total de pruebas\".","title":"Informes"},{"location":"seguridad/secret-detection/#escenario-nominal-para-la-utilizacion-de-la-herramienta","text":"Un resultado nominal para garantizar que no se introduzcan secretos en el c\u00f3digo fuente es utilizar estas dos herramientas. Los equipos pueden aplicar Detect Secrets a la canalizaci\u00f3n CI/CD para proteger el proyecto independientemente de las pr\u00e1cticas de desarrollo de los colaboradores individuales. Los individuos pueden aplicar Detect Secrets como una comprobaci\u00f3n previa al env\u00edo para reducir la posibilidad de que un accidente haga que un secreto se vincule al repositorio del proyecto. Siguiendo ambas pr\u00e1cticas se obtiene la mejor cobertura y siguiendo las instrucciones anteriores se puede reutilizar completamente el mismo archivo world-list de pre-commit en la extensi\u00f3n CI/CD.","title":"Escenario nominal para la utilizaci\u00f3n de la herramienta"},{"location":"seguridad/secret-detection/#lecturas-adicionales","text":"Yelp/detect-secrets : Una forma empresarial de detectar y prevenir secretos en el c\u00f3digo.","title":"Lecturas adicionales"},{"location":"testing%20automatizado/","text":"","title":"Index"}]}